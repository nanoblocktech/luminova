<?php declare(strict_types = 1);

return [
	'lastFullAnalysisTime' => 1709100559,
	'meta' => array (
  'cacheVersion' => 'v10-collectedData',
  'phpstanVersion' => '1.10.59',
  'phpVersion' => 80301,
  'projectConfig' => '{parameters: {phpVersion: 80100, tmpDir: /Applications/XAMPP/xamppfiles/htdocs/luminova.com/builds/phpstan, level: 6, bootstrapFiles: [/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/plugins/autoload.php], paths: [/Applications/XAMPP/xamppfiles/htdocs/luminova.com/app, /Applications/XAMPP/xamppfiles/htdocs/luminova.com/system], excludePaths: {analyseAndScan: [/Applications/XAMPP/xamppfiles/htdocs/luminova.com/app/log/*, /Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/log/*, /Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/plugins/*, /Applications/XAMPP/xamppfiles/htdocs/luminova.com/builds/*, /Applications/XAMPP/xamppfiles/htdocs/luminova.com/dump/*], analyse: []}, scanDirectories: [/Applications/XAMPP/xamppfiles/htdocs/luminova.com/samples, /Applications/XAMPP/xamppfiles/htdocs/luminova.com/resources/views], checkMissingIterableValueType: false, checkGenericClassInNonGenericObjectType: false, checkMissingCallableSignature: true, treatPhpDocTypesAsCertain: false}, services: [Luminova\\Config\\PHPStanRules]}',
  'analysedPaths' => 
  array (
    0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/app',
    1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system',
  ),
  'scannedFiles' => 
  array (
    '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/resources/views/404.php' => 'da1b6e7668ca30014e8725bdc72d62011fec7bc2',
    '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/resources/views/index.php' => 'dc2c472479ce3396022e4463c2d801690bd5582f',
    '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/resources/views/system_errors/errors.php' => 'ac4c82cf8718c58dc32b634ba7648ba28eef77e2',
    '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/resources/views/system_errors/exceptions.php' => 'd0bac48701fa269abceeb75edd12988a3bff813a',
    '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/resources/views/system_errors/maintenance.php' => '6d171356205bfc4719b0e1d690b2afeeb035f5f9',
    '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/samples/Application.php' => '4c48b7f6867897597493313c6bfe8913500a0d13',
    '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/samples/Command.php' => '5e59172f925b7c4e96a8d9c2774ffb1eec472928',
    '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/samples/Config.php' => '76a50d1b3da161da1f22254d467a1a4ca2e69493',
    '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/samples/Cookie.php' => '0d7f89bf0306a1ed439393a36c80fea497083cb8',
    '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/samples/Func.php' => '8eec9ce9638a80811eb67879b5e375a6dfcea7b9',
    '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/samples/Global.php' => 'bf87c61ca4979d3d099503d9330024008036f260',
    '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/samples/Home.php' => '330b1e88f110bde8b6fdb2ce4652c0aede8d30bd',
    '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/samples/Session.php' => 'b13a698b049a51b1572b0e29d74a3b57b09a66f3',
    '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/samples/Template.php' => 'b90153c52c54132d529486b0cbf0af890f640ebe',
    '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/samples/UserController.php' => '9219b21d4dd52e7d515450204099ae68fec77778',
    '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/samples/UserModel.php' => 'eaab7cafae943639a9b9013e5c4aec49976d7371',
  ),
  'composerLocks' => 
  array (
  ),
  'composerInstalled' => 
  array (
  ),
  'executedFilesHashes' => 
  array (
    '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/plugins/autoload.php' => '2b23c1cad292eec3222c5a3e3a069e65be171009',
    'phar:///Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/plugins/phpstan/phpstan/phpstan.phar/stubs/runtime/Attribute.php' => 'eaf9127f074e9c7ebc65043ec4050f9fed60c2bb',
    'phar:///Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/plugins/phpstan/phpstan/phpstan.phar/stubs/runtime/ReflectionAttribute.php' => '0b4b78277eb6545955d2ce5e09bff28f1f8052c8',
    'phar:///Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/plugins/phpstan/phpstan/phpstan.phar/stubs/runtime/ReflectionIntersectionType.php' => 'a3e6299b87ee5d407dae7651758edfa11a74cb11',
    'phar:///Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/plugins/phpstan/phpstan/phpstan.phar/stubs/runtime/ReflectionUnionType.php' => '1b349aa997a834faeafe05fa21bc31cae22bf2e2',
  ),
  'phpExtensions' => 
  array (
    0 => 'Core',
    1 => 'FFI',
    2 => 'PDO',
    3 => 'PDO_ODBC',
    4 => 'Phar',
    5 => 'Reflection',
    6 => 'SPL',
    7 => 'SimpleXML',
    8 => 'Zend OPcache',
    9 => 'bcmath',
    10 => 'bz2',
    11 => 'calendar',
    12 => 'ctype',
    13 => 'curl',
    14 => 'date',
    15 => 'dba',
    16 => 'dom',
    17 => 'exif',
    18 => 'fileinfo',
    19 => 'filter',
    20 => 'ftp',
    21 => 'gd',
    22 => 'gettext',
    23 => 'gmp',
    24 => 'hash',
    25 => 'iconv',
    26 => 'intl',
    27 => 'json',
    28 => 'ldap',
    29 => 'libxml',
    30 => 'mbstring',
    31 => 'mysqli',
    32 => 'mysqlnd',
    33 => 'odbc',
    34 => 'openssl',
    35 => 'pcntl',
    36 => 'pcre',
    37 => 'pdo_dblib',
    38 => 'pdo_mysql',
    39 => 'pdo_pgsql',
    40 => 'pdo_sqlite',
    41 => 'pgsql',
    42 => 'posix',
    43 => 'pspell',
    44 => 'random',
    45 => 'readline',
    46 => 'session',
    47 => 'shmop',
    48 => 'soap',
    49 => 'sockets',
    50 => 'sodium',
    51 => 'sqlite3',
    52 => 'standard',
    53 => 'sysvmsg',
    54 => 'sysvsem',
    55 => 'sysvshm',
    56 => 'tidy',
    57 => 'tokenizer',
    58 => 'xml',
    59 => 'xmlreader',
    60 => 'xmlwriter',
    61 => 'xsl',
    62 => 'zip',
    63 => 'zlib',
  ),
  'stubFiles' => 
  array (
  ),
  'level' => '6',
),
	'projectExtensionFiles' => array (
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Config/PHPStanRules.php' => '926a7c1bfc5a89adc7d3e78c7fe4f0378894af80',
),
	'errorsCallback' => static function (): array { return array (
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/app/Controllers/Application.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @var above a method has no effect.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/app/Controllers/Application.php',
       'line' => 20,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/app/Controllers/Application.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 20,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @var for variable $session contains unknown class App\\Controllers\\Session.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/app/Controllers/Application.php',
       'line' => 20,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/app/Controllers/Application.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 20,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @var for variable $session contains unknown class App\\Controllers\\Session.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/app/Controllers/Application.php',
       'line' => 20,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/app/Controllers/Application.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 20,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Application/Application.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @var does not specify variable name.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Application/Application.php',
       'line' => 24,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Application/Application.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 24,
       'nodeType' => 'PhpParser\\Node\\Stmt\\TraitUse',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @var has invalid type Luminova\\Template\\TemplateTrait.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Application/Application.php',
       'line' => 24,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Application/Application.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 24,
       'nodeType' => 'PhpParser\\Node\\Stmt\\TraitUse',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Application\\Application::$instance through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Application/Application.php',
       'line' => 96,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Application/Application.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 96,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    3 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Application\\Application::$instance through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Application/Application.php',
       'line' => 97,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Application/Application.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 97,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    4 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe usage of new static().',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Application/Application.php',
       'line' => 97,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Application/Application.php',
       'traitFilePath' => NULL,
       'tip' => 'See: https://phpstan.org/blog/solving-phpstan-error-unsafe-usage-of-new-static',
       'nodeLine' => 97,
       'nodeType' => 'PhpParser\\Node\\Expr\\New_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    5 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Application\\Application::getInstance() should return static(Luminova\\Application\\Application) but returns Luminova\\Application\\Application.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Application/Application.php',
       'line' => 100,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Application/Application.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 100,
       'nodeType' => 'PhpParser\\Node\\Stmt\\Return_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    6 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Application\\Application::$instance through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Application/Application.php',
       'line' => 100,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Application/Application.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 100,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    7 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Strict comparison using === between non-falsy-string and \'\' will always evaluate to false.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Template/TemplateTrait.php (in context of class Luminova\\Application\\Application)',
       'line' => 516,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Application/Application.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 516,
       'nodeType' => 'PhpParser\\Node\\Expr\\BinaryOp\\Identical',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    8 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $expire',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Template/TemplateTrait.php (in context of class Luminova\\Application\\Application)',
       'line' => 610,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Application/Application.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 610,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'expire',
      ),
    )),
    9 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Parameter #1 $callback of function ob_start expects callable(): mixed, bool given.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Template/TemplateTrait.php (in context of class Luminova\\Application\\Application)',
       'line' => 637,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Application/Application.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 637,
       'nodeType' => 'PhpParser\\Node\\Expr\\FuncCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    10 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Parameter #1 $callback of function ob_start expects callable(): mixed, bool given.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Template/TemplateTrait.php (in context of class Luminova\\Application\\Application)',
       'line' => 693,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Application/Application.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 693,
       'nodeType' => 'PhpParser\\Node\\Expr\\FuncCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    11 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Parameter #1 $cacheControl of method Luminova\\Cache\\Compress::setCacheControl() expects string, bool given.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Template/TemplateTrait.php (in context of class Luminova\\Application\\Application)',
       'line' => 790,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Application/Application.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 790,
       'nodeType' => 'PhpParser\\Node\\Expr\\MethodCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    12 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param for parameter $suffix with type string is incompatible with native type bool.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Template/TemplateTrait.php (in context of class Luminova\\Application\\Application)',
       'line' => 1030,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Application/Application.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 1030,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Application/Services.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @method has invalid value (static $context            $context(...$params, bool $shared = true)): Unexpected token "$context", expected type at offset 602',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Application/Services.php',
       'line' => 39,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Application/Services.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 39,
       'nodeType' => 'PhpParser\\Node\\Stmt\\Class_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Application\\Services::__callStatic() has parameter $arguments with no type specified.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Application/Services.php',
       'line' => 87,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Application/Services.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 87,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $params',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Application/Services.php',
       'line' => 87,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Application/Services.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 87,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'params',
      ),
    )),
    3 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $shared',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Application/Services.php',
       'line' => 87,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Application/Services.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 87,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'shared',
      ),
    )),
    4 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Static method Luminova\\Application\\Services::has() is unused.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Application/Services.php',
       'line' => 146,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Application/Services.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 39,
       'nodeType' => 'PHPStan\\Node\\ClassMethodsNode',
       'identifier' => 'deadCode.unusedMethod',
       'metadata' => 
      array (
        'classOrder' => 11,
        'classDepth' => 1,
        'classStartLine' => 39,
        'methodName' => 'has',
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Arrays/ArrayObject.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Class ArrayObject has @implements tag, but does not implement any interface.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Arrays/ArrayObject.php',
       'line' => 2,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Arrays/ArrayObject.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 2,
       'nodeType' => 'PHPStan\\Node\\InClassNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Class ArrayObject has @implements tag, but does not implement any interface.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Arrays/ArrayObject.php',
       'line' => 2,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Arrays/ArrayObject.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 2,
       'nodeType' => 'PHPStan\\Node\\InClassNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Base/BaseCommand.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param has invalid value (mixed, string|null> $params): Unexpected token ",", expected variable at offset 52',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Base/BaseCommand.php',
       'line' => 49,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Base/BaseCommand.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 49,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Base/BaseController.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @var above a method has no effect.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Base/BaseController.php',
       'line' => 46,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Base/BaseController.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 46,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Cache/FileCache.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Property Luminova\\Cache\\FileCache::$isDebugging is never read, only written.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Cache/FileCache.php',
       'line' => 80,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Cache/FileCache.php',
       'traitFilePath' => NULL,
       'tip' => 'See: https://phpstan.org/developing-extensions/always-read-written-properties',
       'nodeLine' => 16,
       'nodeType' => 'PHPStan\\Node\\ClassPropertiesNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $instance',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Cache/FileCache.php',
       'line' => 148,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Cache/FileCache.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 148,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'instance',
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Static property Luminova\\Cache\\FileCache::$instance (static(Luminova\\Cache\\FileCache)) does not accept Luminova\\Cache\\FileCache.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Cache/FileCache.php',
       'line' => 151,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Cache/FileCache.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 151,
       'nodeType' => 'PHPStan\\Node\\PropertyAssignNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    3 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Cache\\FileCache::onExpired() has parameter $cacheCallback with no signature specified for callable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Cache/FileCache.php',
       'line' => 334,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Cache/FileCache.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 334,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    4 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Cache\\FileCache::onCache() has parameter $cacheCallback with no signature specified for callable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Cache/FileCache.php',
       'line' => 348,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Cache/FileCache.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 348,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    5 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Cache\\FileCache::get() has parameter $cacheCallback with no signature specified for callable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Cache/FileCache.php',
       'line' => 382,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Cache/FileCache.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 382,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    6 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param for parameter $expiration with type string is incompatible with native type int.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Cache/FileCache.php',
       'line' => 507,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Cache/FileCache.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 507,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    7 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Strict comparison using === between string and null will always evaluate to false.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Cache/FileCache.php',
       'line' => 509,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Cache/FileCache.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 509,
       'nodeType' => 'PhpParser\\Node\\Expr\\BinaryOp\\Identical',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Cache/MemoryCache.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Cache\\MemoryCache::onExpired() has parameter $cacheCallback with no signature specified for callable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Cache/MemoryCache.php',
       'line' => 105,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Cache/MemoryCache.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 105,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Cache\\MemoryCache::withExpired() has parameter $cacheCallback with no signature specified for callable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Cache/MemoryCache.php',
       'line' => 119,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Cache/MemoryCache.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 119,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Colors.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Command\\Colors::isValidColor() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Colors.php',
       'line' => 78,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Colors.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 78,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Command\\Colors::isValidColor() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Colors.php',
       'line' => 82,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Colors.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 82,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Commands.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Constant STATUS_ERROR not found.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Commands.php',
       'line' => 42,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Commands.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 42,
       'nodeType' => 'PhpParser\\Node\\Expr\\ConstFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Console.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Constant STATUS_OK not found.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Console.php',
       'line' => 71,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Console.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 71,
       'nodeType' => 'PhpParser\\Node\\Expr\\ConstFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Novakit/Database.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $options',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Novakit/Database.php',
       'line' => 46,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Novakit/Database.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 46,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'options',
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Match arm comparison between true and \'db:create\' is always false.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Novakit/Database.php',
       'line' => 51,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Novakit/Database.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 50,
       'nodeType' => 'PHPStan\\Node\\MatchExpressionNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Match arm comparison between true and \'db:update\' is always false.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Novakit/Database.php',
       'line' => 54,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Novakit/Database.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 50,
       'nodeType' => 'PHPStan\\Node\\MatchExpressionNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    3 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Match arm comparison between true and \'db:insert\' is always false.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Novakit/Database.php',
       'line' => 57,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Novakit/Database.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 50,
       'nodeType' => 'PHPStan\\Node\\MatchExpressionNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    4 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Match arm comparison between true and \'db:delete\' is always false.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Novakit/Database.php',
       'line' => 60,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Novakit/Database.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 50,
       'nodeType' => 'PHPStan\\Node\\MatchExpressionNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    5 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Match arm comparison between true and \'db:drop\' is always false.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Novakit/Database.php',
       'line' => 63,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Novakit/Database.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 50,
       'nodeType' => 'PHPStan\\Node\\MatchExpressionNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    6 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Match arm comparison between true and \'db:truncate\' is always false.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Novakit/Database.php',
       'line' => 66,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Novakit/Database.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 50,
       'nodeType' => 'PHPStan\\Node\\MatchExpressionNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    7 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Match arm comparison between true and \'db:select\' is always false.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Novakit/Database.php',
       'line' => 69,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Novakit/Database.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 50,
       'nodeType' => 'PHPStan\\Node\\MatchExpressionNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    8 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Constant STATUS_ERROR not found.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Novakit/Database.php',
       'line' => 74,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Novakit/Database.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 74,
       'nodeType' => 'PhpParser\\Node\\Expr\\ConstFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    9 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Constant STATUS_OK not found.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Novakit/Database.php',
       'line' => 78,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Novakit/Database.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 78,
       'nodeType' => 'PhpParser\\Node\\Expr\\ConstFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Novakit/Generators.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Constant STATUS_ERROR not found.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Novakit/Generators.php',
       'line' => 73,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Novakit/Generators.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 73,
       'nodeType' => 'PhpParser\\Node\\Expr\\ConstFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Novakit/Help.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Constant STATUS_OK not found.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Novakit/Help.php',
       'line' => 49,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Novakit/Help.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 49,
       'nodeType' => 'PhpParser\\Node\\Expr\\ConstFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Novakit/Lists.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Constant STATUS_OK not found.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Novakit/Lists.php',
       'line' => 47,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Novakit/Lists.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 47,
       'nodeType' => 'PhpParser\\Node\\Expr\\ConstFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Novakit/Server.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $options',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Novakit/Server.php',
       'line' => 54,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Novakit/Server.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 54,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'options',
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Constant PUBLIC_PATH not found.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Novakit/Server.php',
       'line' => 62,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Novakit/Server.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 62,
       'nodeType' => 'PhpParser\\Node\\Expr\\ConstFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Constant STATUS_OK not found.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Novakit/Server.php',
       'line' => 96,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Novakit/Server.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 96,
       'nodeType' => 'PhpParser\\Node\\Expr\\ConstFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Terminal.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @var does not specify variable name.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Terminal.php',
       'line' => 78,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Terminal.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 78,
       'nodeType' => 'PhpParser\\Node\\Stmt\\Expression',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @var does not specify variable name.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Terminal.php',
       'line' => 83,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Terminal.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 83,
       'nodeType' => 'PhpParser\\Node\\Stmt\\Expression',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @var does not specify variable name.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Terminal.php',
       'line' => 88,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Terminal.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 88,
       'nodeType' => 'PhpParser\\Node\\Stmt\\Expression',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    3 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Command\\Terminal::progressWatch() has parameter $onFinish with no signature specified for callable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Terminal.php',
       'line' => 197,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Terminal.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 197,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    4 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Command\\Terminal::progressWatch() has parameter $onProgress with no signature specified for callable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Terminal.php',
       'line' => 197,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Terminal.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 197,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    5 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Variable $textOptions on left side of ?? always exists and is not nullable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Terminal.php',
       'line' => 272,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Terminal.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 272,
       'nodeType' => 'PhpParser\\Node\\Expr\\BinaryOp\\Coalesce',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    6 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Command\\Terminal::writeArrayValues() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Terminal.php',
       'line' => 339,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Terminal.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 339,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    7 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe call to private method Luminova\\Command\\Terminal::getInputArrayValues() through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Terminal.php',
       'line' => 354,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Terminal.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 354,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    8 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Constant ENVIRONMENT not found.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Terminal.php',
       'line' => 487,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Terminal.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 487,
       'nodeType' => 'PhpParser\\Node\\Expr\\ConstFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    9 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Constant ENVIRONMENT not found.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Terminal.php',
       'line' => 692,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Terminal.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 692,
       'nodeType' => 'PhpParser\\Node\\Expr\\ConstFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    10 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Constant STATUS_ERROR not found.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Terminal.php',
       'line' => 1050,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Terminal.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 1050,
       'nodeType' => 'PhpParser\\Node\\Expr\\ConstFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    11 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Constant STATUS_ERROR not found.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Terminal.php',
       'line' => 1051,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Terminal.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 1051,
       'nodeType' => 'PhpParser\\Node\\Expr\\ConstFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    12 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Constant STATUS_OK not found.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Terminal.php',
       'line' => 1053,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Terminal.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 1053,
       'nodeType' => 'PhpParser\\Node\\Expr\\ConstFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/TextUtils.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $max',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/TextUtils.php',
       'line' => 29,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/TextUtils.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 29,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'max',
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $index',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/TextUtils.php',
       'line' => 58,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/TextUtils.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 58,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'index',
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Composer/BaseComposer.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Composer\\BaseComposer::progress() has parameter $onCompleteCallback with no signature specified for callable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Composer/BaseComposer.php',
       'line' => 21,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Composer/BaseComposer.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 21,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Composer\\BaseComposer::progress() has parameter $taskCallback with no signature specified for callable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Composer/BaseComposer.php',
       'line' => 21,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Composer/BaseComposer.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 21,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Composer/Builder.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Property Luminova\\Composer\\Builder::$projectFiles has no type specified.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Composer/Builder.php',
       'line' => 15,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Composer/Builder.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 15,
       'nodeType' => 'PHPStan\\Node\\ClassPropertyNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Property Luminova\\Composer\\Builder::$systemIgnoreFiles has no type specified.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Composer/Builder.php',
       'line' => 27,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Composer/Builder.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 27,
       'nodeType' => 'PHPStan\\Node\\ClassPropertyNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Property Luminova\\Composer\\Builder::$projectIgnoreFiles has no type specified.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Composer/Builder.php',
       'line' => 48,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Composer/Builder.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 48,
       'nodeType' => 'PHPStan\\Node\\ClassPropertyNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    3 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unreachable statement - code above always terminates.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Composer/Builder.php',
       'line' => 147,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Composer/Builder.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 147,
       'nodeType' => 'PHPStan\\Node\\UnreachableStatementNode',
       'identifier' => 'deadCode.unreachableStatement',
       'metadata' => 
      array (
        'depth' => 5,
        'order' => 1,
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Composer/Updater.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Static method Luminova\\Composer\\Updater::checkAndCopyDirectory() is unused.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Composer/Updater.php',
       'line' => 109,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Composer/Updater.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 11,
       'nodeType' => 'PHPStan\\Node\\ClassMethodsNode',
       'identifier' => 'deadCode.unusedMethod',
       'metadata' => 
      array (
        'classOrder' => 0,
        'classDepth' => 1,
        'classStartLine' => 11,
        'methodName' => 'checkAndCopyDirectory',
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Static method Luminova\\Composer\\Updater::checkAndCreateDirectory() is unused.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Composer/Updater.php',
       'line' => 133,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Composer/Updater.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 11,
       'nodeType' => 'PHPStan\\Node\\ClassMethodsNode',
       'identifier' => 'deadCode.unusedMethod',
       'metadata' => 
      array (
        'classOrder' => 0,
        'classDepth' => 1,
        'classStartLine' => 11,
        'methodName' => 'checkAndCreateDirectory',
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Config/Configuration.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @return with type bool is incompatible with native type int.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Config/Configuration.php',
       'line' => 338,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Config/Configuration.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 338,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Config\\Configuration::getMixedNull() should return bool but returns null.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Config/Configuration.php',
       'line' => 379,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Config/Configuration.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 379,
       'nodeType' => 'PhpParser\\Node\\Stmt\\Return_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Controllers/ViewController.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Constant STATUS_OK not found.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Controllers/ViewController.php',
       'line' => 116,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Controllers/ViewController.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 116,
       'nodeType' => 'PhpParser\\Node\\Expr\\ConstFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Cookies/Cookie.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $key',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Cookies/Cookie.php',
       'line' => 175,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Cookies/Cookie.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 175,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'key',
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $key',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Cookies/Cookie.php',
       'line' => 188,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Cookies/Cookie.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 188,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'key',
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $index',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Cookies/Cookie.php',
       'line' => 208,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Cookies/Cookie.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 208,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'index',
      ),
    )),
    3 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Result of && is always true.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Cookies/Cookie.php',
       'line' => 216,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Cookies/Cookie.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 216,
       'nodeType' => 'PHPStan\\Node\\BooleanAndNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    4 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $index',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Cookies/Cookie.php',
       'line' => 230,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Cookies/Cookie.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 230,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'index',
      ),
    )),
    5 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Parameter #1 $value of method Luminova\\Cookies\\Cookie::saveGlobal() expects string, array given.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Cookies/Cookie.php',
       'line' => 265,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Cookies/Cookie.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 265,
       'nodeType' => 'PhpParser\\Node\\Expr\\MethodCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Cookies/CookieInterface.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $key',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Cookies/CookieInterface.php',
       'line' => 52,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Cookies/CookieInterface.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 52,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'key',
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $key',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Cookies/CookieInterface.php',
       'line' => 62,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Cookies/CookieInterface.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 62,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'key',
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $index',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Cookies/CookieInterface.php',
       'line' => 71,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Cookies/CookieInterface.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 71,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'index',
      ),
    )),
    3 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $index',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Cookies/CookieInterface.php',
       'line' => 89,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Cookies/CookieInterface.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 89,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'index',
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Cookies/Exception/CookieException.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe usage of new static().',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Cookies/Exception/CookieException.php',
       'line' => 47,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Cookies/Exception/CookieException.php',
       'traitFilePath' => NULL,
       'tip' => 'See: https://phpstan.org/blog/solving-phpstan-error-unsafe-usage-of-new-static',
       'nodeLine' => 47,
       'nodeType' => 'PhpParser\\Node\\Expr\\New_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Columns.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Property Luminova\\Database\\Columns::$columns has no type specified.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Columns.php',
       'line' => 24,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Columns.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 24,
       'nodeType' => 'PHPStan\\Node\\ClassPropertyNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Property Luminova\\Database\\Columns::$tableName has no type specified.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Columns.php',
       'line' => 25,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Columns.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 25,
       'nodeType' => 'PHPStan\\Node\\ClassPropertyNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Connection.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Database\\DatabaseException|Luminova\\Database\\InvalidException|Luminova\\Database\\InvalidObjectException is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Connection.php',
       'line' => 42,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Connection.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 42,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @return with type object is not subtype of native type Luminova\\Database\\Connection.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Connection.php',
       'line' => 55,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Connection.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 55,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Database\\DatabaseException|Luminova\\Database\\InvalidException|Luminova\\Database\\InvalidObjectException is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Connection.php',
       'line' => 55,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Connection.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 55,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    3 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Database\\DatabaseException|Luminova\\Database\\InvalidException|Luminova\\Database\\InvalidObjectException is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Connection.php',
       'line' => 71,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Connection.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 71,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Drivers/DriversInterface.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Database\\Drivers\\DatabaseException is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Drivers/DriversInterface.php',
       'line' => 142,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Drivers/DriversInterface.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 142,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Drivers/MySqlDriver.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Variable $config in empty() always exists and is not falsy.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Drivers/MySqlDriver.php',
       'line' => 71,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Drivers/MySqlDriver.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 71,
       'nodeType' => 'PhpParser\\Node\\Expr\\Empty_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Cannot call method bind_param() on bool|object.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Drivers/MySqlDriver.php',
       'line' => 332,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Drivers/MySqlDriver.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 332,
       'nodeType' => 'PhpParser\\Node\\Expr\\MethodCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Cannot call method bind_param() on object|true.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Drivers/MySqlDriver.php',
       'line' => 387,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Drivers/MySqlDriver.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 387,
       'nodeType' => 'PhpParser\\Node\\Expr\\MethodCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    3 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Cannot call method execute() on object|true.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Drivers/MySqlDriver.php',
       'line' => 389,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Drivers/MySqlDriver.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 389,
       'nodeType' => 'PhpParser\\Node\\Expr\\MethodCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    4 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Cannot access property $errno on object|true.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Drivers/MySqlDriver.php',
       'line' => 391,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Drivers/MySqlDriver.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 391,
       'nodeType' => 'PhpParser\\Node\\Expr\\PropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    5 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Cannot access property $affected_rows on object|true.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Drivers/MySqlDriver.php',
       'line' => 395,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Drivers/MySqlDriver.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 395,
       'nodeType' => 'PhpParser\\Node\\Expr\\PropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    6 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Cannot access property $num_rows on object|true.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Drivers/MySqlDriver.php',
       'line' => 395,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Drivers/MySqlDriver.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 395,
       'nodeType' => 'PhpParser\\Node\\Expr\\PropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    7 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Cannot call method get_result() on object|true.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Drivers/MySqlDriver.php',
       'line' => 434,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Drivers/MySqlDriver.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 434,
       'nodeType' => 'PhpParser\\Node\\Expr\\MethodCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    8 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Cannot call method get_result() on bool|object.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Drivers/MySqlDriver.php',
       'line' => 457,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Drivers/MySqlDriver.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 457,
       'nodeType' => 'PhpParser\\Node\\Expr\\MethodCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    9 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $queryResult',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Drivers/MySqlDriver.php',
       'line' => 469,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Drivers/MySqlDriver.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 469,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'queryResult',
      ),
    )),
    10 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Cannot call method free_result() on object|true.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Drivers/MySqlDriver.php',
       'line' => 617,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Drivers/MySqlDriver.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 617,
       'nodeType' => 'PhpParser\\Node\\Expr\\MethodCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Drivers/PdoDriver.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @var for constant Luminova\\Database\\Drivers\\PdoDriver::PARAM_BOOL with type bool is incompatible with value 5.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Drivers/PdoDriver.php',
       'line' => 51,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Drivers/PdoDriver.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 51,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassConst',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @var for constant Luminova\\Database\\Drivers\\PdoDriver::PARAM_NULL with type null is incompatible with value 0.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Drivers/PdoDriver.php',
       'line' => 56,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Drivers/PdoDriver.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 56,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassConst',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @var for constant Luminova\\Database\\Drivers\\PdoDriver::PARAM_STRING with type string is incompatible with value 2.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Drivers/PdoDriver.php',
       'line' => 61,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Drivers/PdoDriver.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 61,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassConst',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    3 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Variable $config in empty() always exists and is not falsy.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Drivers/PdoDriver.php',
       'line' => 71,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Drivers/PdoDriver.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 71,
       'nodeType' => 'PhpParser\\Node\\Expr\\Empty_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    4 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Result of method PDOStatement::debugDumpParams() (void) is used.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Drivers/PdoDriver.php',
       'line' => 241,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Drivers/PdoDriver.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 241,
       'nodeType' => 'PhpParser\\Node\\Expr\\MethodCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    5 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @return with type array is incompatible with native type int.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Drivers/PdoDriver.php',
       'line' => 419,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Drivers/PdoDriver.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 419,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    6 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Database\\Drivers\\PdoDriver::getInt() should return int but returns array.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Drivers/PdoDriver.php',
       'line' => 425,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Drivers/PdoDriver.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 425,
       'nodeType' => 'PhpParser\\Node\\Stmt\\Return_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Query.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Expression on left side of ?? is not nullable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Query.php',
       'line' => 507,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Query.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 507,
       'nodeType' => 'PhpParser\\Node\\Expr\\BinaryOp\\Coalesce',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $columns',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Query.php',
       'line' => 865,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Query.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 865,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'columns',
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Database\\Query::truncate() should return bool but return statement is missing.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Query.php',
       'line' => 1088,
       'canBeIgnored' => false,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Query.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 1088,
       'nodeType' => 'PHPStan\\Node\\ExecutionEndNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    3 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Part $columns (array) of encapsed string cannot be cast to string.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Query.php',
       'line' => 1138,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Query.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 1138,
       'nodeType' => 'PhpParser\\Node\\Scalar\\Encapsed',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Results/Statements.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Database\\Results\\Statements::getClass() never returns object so it can be removed from the return type.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Results/Statements.php',
       'line' => 155,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Results/Statements.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 155,
       'nodeType' => 'PHPStan\\Node\\MethodReturnStatementsNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $class',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Results/Statements.php',
       'line' => 155,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Results/Statements.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 155,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'class',
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Result of && is always false.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Results/Statements.php',
       'line' => 158,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Results/Statements.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 158,
       'nodeType' => 'PHPStan\\Node\\BooleanAndNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    3 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Strict comparison using !== between null and null will always evaluate to false.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Results/Statements.php',
       'line' => 158,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Results/Statements.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 158,
       'nodeType' => 'PhpParser\\Node\\Expr\\BinaryOp\\NotIdentical',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Email/Clients/NovaMailer.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Email\\Clients\\Exception is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Email/Clients/NovaMailer.php',
       'line' => 254,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Email/Clients/NovaMailer.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 254,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Parameter #2 $port of function fsockopen expects int, string given.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Email/Clients/NovaMailer.php',
       'line' => 324,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Email/Clients/NovaMailer.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 324,
       'nodeType' => 'PhpParser\\Node\\Expr\\FuncCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Email\\Clients\\NovaMailer::smtpGet() has parameter $connection with no type specified.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Email/Clients/NovaMailer.php',
       'line' => 374,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Email/Clients/NovaMailer.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 374,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    3 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $stream',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Email/Clients/NovaMailer.php',
       'line' => 374,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Email/Clients/NovaMailer.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 374,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'stream',
      ),
    )),
    4 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Strict comparison using === between non-falsy-string and false will always evaluate to false.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Email/Clients/NovaMailer.php',
       'line' => 382,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Email/Clients/NovaMailer.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 382,
       'nodeType' => 'PhpParser\\Node\\Expr\\BinaryOp\\Identical',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    5 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Parameter #1 $prefix of function uniqid expects string, int<1, max> given.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Email/Clients/NovaMailer.php',
       'line' => 410,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Email/Clients/NovaMailer.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 410,
       'nodeType' => 'PhpParser\\Node\\Expr\\FuncCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Email/Clients/PHPMailer.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Class Luminova\\Email\\Clients\\PHPMailer extends unknown class PHPMailer\\PHPMailer\\PHPMailer.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Email/Clients/PHPMailer.php',
       'line' => 15,
       'canBeIgnored' => false,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Email/Clients/PHPMailer.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 15,
       'nodeType' => 'PhpParser\\Node\\Stmt\\Class_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Luminova\\Email\\Clients\\PHPMailer::__construct() calls parent::__construct() but Luminova\\Email\\Clients\\PHPMailer does not extend any class.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Email/Clients/PHPMailer.php',
       'line' => 24,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Email/Clients/PHPMailer.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 24,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Email/Exceptions/MailerException.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe usage of new static().',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Email/Exceptions/MailerException.php',
       'line' => 40,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Email/Exceptions/MailerException.php',
       'traitFilePath' => NULL,
       'tip' => 'See: https://phpstan.org/blog/solving-phpstan-error-unsafe-usage-of-new-static',
       'nodeLine' => 40,
       'nodeType' => 'PhpParser\\Node\\Expr\\New_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Email/Mailer.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @return has invalid value (self::$client The Mailer client instance.): Unexpected token "$client", expected * at offset 72',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Email/Mailer.php',
       'line' => 97,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Email/Mailer.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 97,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Email\\Mailer::$instance through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Email/Mailer.php',
       'line' => 111,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Email/Mailer.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 111,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Email\\Mailer::$instance through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Email/Mailer.php',
       'line' => 112,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Email/Mailer.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 112,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    3 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe usage of new static().',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Email/Mailer.php',
       'line' => 112,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Email/Mailer.php',
       'traitFilePath' => NULL,
       'tip' => 'See: https://phpstan.org/blog/solving-phpstan-error-unsafe-usage-of-new-static',
       'nodeLine' => 112,
       'nodeType' => 'PhpParser\\Node\\Expr\\New_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    4 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Email\\Mailer::$instance through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Email/Mailer.php',
       'line' => 115,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Email/Mailer.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 115,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    5 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @return with type int is incompatible with native type string.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Email/Mailer.php',
       'line' => 300,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Email/Mailer.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 300,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    6 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @return with type int is incompatible with native type string.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Email/Mailer.php',
       'line' => 317,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Email/Mailer.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 317,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Exceptions/AppException.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Exceptions\\AppException::highlightColor() has no return type specified.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Exceptions/AppException.php',
       'line' => 162,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Exceptions/AppException.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 162,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Functions/Files.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Expression on left side of ?? is not nullable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Functions/Files.php',
       'line' => 63,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Functions/Files.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 63,
       'nodeType' => 'PhpParser\\Node\\Expr\\BinaryOp\\Coalesce',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Functions/Functions.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $haystack',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Functions/Functions.php',
       'line' => 92,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Functions/Functions.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 92,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'haystack',
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $needle',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Functions/Functions.php',
       'line' => 92,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Functions/Functions.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 92,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'needle',
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Right side of || is always true.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Functions/Functions.php',
       'line' => 110,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Functions/Functions.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 110,
       'nodeType' => 'PHPStan\\Node\\BooleanOrNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    3 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Parameter #2 $replacement of function preg_replace expects array|string, true given.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Functions/Functions.php',
       'line' => 114,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Functions/Functions.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 114,
       'nodeType' => 'PhpParser\\Node\\Expr\\FuncCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    4 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Parameter #1 $num1 of function bcsub expects string, int given.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Functions/Functions.php',
       'line' => 194,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Functions/Functions.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 194,
       'nodeType' => 'PhpParser\\Node\\Expr\\FuncCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    5 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Parameter #2 $num2 of function bcadd expects string, int given.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Functions/Functions.php',
       'line' => 194,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Functions/Functions.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 194,
       'nodeType' => 'PhpParser\\Node\\Expr\\FuncCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    6 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Parameter #2 $num2 of function bcsub expects string, int given.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Functions/Functions.php',
       'line' => 194,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Functions/Functions.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 194,
       'nodeType' => 'PhpParser\\Node\\Expr\\FuncCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    7 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Parameter #1 $num1 of function bcdiv expects string, int<0, max> given.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Functions/Functions.php',
       'line' => 195,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Functions/Functions.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 195,
       'nodeType' => 'PhpParser\\Node\\Expr\\FuncCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    8 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Parameter #2 $num2 of function bcdiv expects string, int given.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Functions/Functions.php',
       'line' => 195,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Functions/Functions.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 195,
       'nodeType' => 'PhpParser\\Node\\Expr\\FuncCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    9 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Parameter #1 $num1 of function bcadd expects string, int given.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Functions/Functions.php',
       'line' => 196,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Functions/Functions.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 196,
       'nodeType' => 'PhpParser\\Node\\Expr\\FuncCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    10 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Functions\\Functions::EAN() should return int but returns string.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Functions/Functions.php',
       'line' => 209,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Functions/Functions.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 209,
       'nodeType' => 'PhpParser\\Node\\Stmt\\Return_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    11 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param for parameter $phone with type mixed is not subtype of native type int|string.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Functions/Functions.php',
       'line' => 403,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Functions/Functions.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 403,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    12 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param for parameter $phone with type mixed is not subtype of native type string.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Functions/Functions.php',
       'line' => 423,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Functions/Functions.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 423,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    13 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $index',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Functions/Functions.php',
       'line' => 536,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Functions/Functions.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 536,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'index',
      ),
    )),
    14 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Strict comparison using === between \'/[^-0-9.]+/\'|\'/[^0-9-+]+/\'|\'/[^0-9.-]+/\'|\'/[^0-9.]+/\'|\'/[^0-9]+/\'|\'/[^a-zA-Z., ]+/\'|\'/[^a-zA-Z0-9-: ]+/\'|\'/[^a-zA-Z0-9-:\\\\/,_ …\'|\'/[^a-zA-Z0-9-@!*_]/\'|\'/[^a-zA-Z0-9-@.,]+/\'|\'/[^a-zA-Z0-9-@.]+/\'|\'/[^a-zA-Z0-9-\\\\/,_:+…\'|\'/[^a-zA-Z0-9-_.,!}{…\'|\'/[^a-zA-Z0-9-_.]+/\'|\'/[^a-zA-Z0-9?&+=.:\\\\…\'|\'/[^a-zA-Z0-9_-]/\'|\'/[^a-zA-Z]+/\' and null will always evaluate to false.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Functions/Functions.php',
       'line' => 700,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Functions/Functions.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 700,
       'nodeType' => 'PhpParser\\Node\\Expr\\BinaryOp\\Identical',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    15 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type InvalidArgumentException|Luminova\\Functions\\Exception|Luminova\\Functions\\RuntimeException is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Functions/Functions.php',
       'line' => 732,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Functions/Functions.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 732,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    16 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Undefined variable: $data',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Functions/Functions.php',
       'line' => 736,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Functions/Functions.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 736,
       'nodeType' => 'PhpParser\\Node\\Expr\\Variable',
       'identifier' => 'variable.undefined',
       'metadata' => 
      array (
        'variableName' => 'data',
        'statementDepth' => 5,
        'statementOrder' => 0,
        'depth' => 2,
        'order' => 0,
        'variables' => 
        array (
          0 => 'input',
          1 => 'context',
          2 => 'encoding',
        ),
        'parentVariables' => 
        array (
        ),
      ),
    )),
    17 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param for parameter $encoding with type int is incompatible with native type string.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Functions/Functions.php',
       'line' => 836,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Functions/Functions.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 836,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    18 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Parameter #2 $times of function str_repeat expects int, float given.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Functions/Functions.php',
       'line' => 912,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Functions/Functions.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 912,
       'nodeType' => 'PhpParser\\Node\\Expr\\FuncCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    19 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Parameter #3 $length of function substr expects int|null, float given.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Functions/Functions.php',
       'line' => 912,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Functions/Functions.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 912,
       'nodeType' => 'PhpParser\\Node\\Expr\\FuncCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/AsyncClientInterface.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Http\\AsyncClientInterface::sendAsync() has invalid return type GuzzleHttp\\Promise\\PromiseInterface.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/AsyncClientInterface.php',
       'line' => 8,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/AsyncClientInterface.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 8,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Parameter $request of method Luminova\\Http\\AsyncClientInterface::sendAsync() has invalid type GuzzleHttp\\Psr7\\Request.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/AsyncClientInterface.php',
       'line' => 8,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/AsyncClientInterface.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 8,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/Client/Curl.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Constructor of class Luminova\\Http\\Client\\Curl has an unused parameter $config.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/Client/Curl.php',
       'line' => 24,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/Client/Curl.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 24,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => 'constructor.unusedParameter',
       'metadata' => 
      array (
        'variableName' => 'config',
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/Client/Guzzle.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Property Luminova\\Http\\Client\\Guzzle::$client has unknown class GuzzleHttp\\Client as its type.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/Client/Guzzle.php',
       'line' => 21,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/Client/Guzzle.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 21,
       'nodeType' => 'PHPStan\\Node\\ClassPropertyNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Instantiated class GuzzleHttp\\Client not found.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/Client/Guzzle.php',
       'line' => 30,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/Client/Guzzle.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 30,
       'nodeType' => 'PhpParser\\Node\\Expr\\New_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Call to method request() on an unknown class GuzzleHttp\\Client.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/Client/Guzzle.php',
       'line' => 51,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/Client/Guzzle.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 51,
       'nodeType' => 'PhpParser\\Node\\Expr\\MethodCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/CurlAsyncClient.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Http\\CurlAsyncClient::sendAsync() has invalid return type GuzzleHttp\\Promise\\PromiseInterface.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/CurlAsyncClient.php',
       'line' => 11,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/CurlAsyncClient.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 11,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Parameter $request of method Luminova\\Http\\CurlAsyncClient::sendAsync() has invalid type GuzzleHttp\\Psr7\\Request.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/CurlAsyncClient.php',
       'line' => 11,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/CurlAsyncClient.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 11,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Call to method getUri() on an unknown class GuzzleHttp\\Psr7\\Request.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/CurlAsyncClient.php',
       'line' => 14,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/CurlAsyncClient.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 14,
       'nodeType' => 'PhpParser\\Node\\Expr\\MethodCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    3 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Call to static method promiseFor() on an unknown class GuzzleHttp\\Promise\\Utils.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/CurlAsyncClient.php',
       'line' => 23,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/CurlAsyncClient.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 23,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    4 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Instantiated class GuzzleHttp\\Psr7\\Response not found.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/CurlAsyncClient.php',
       'line' => 25,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/CurlAsyncClient.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 25,
       'nodeType' => 'PhpParser\\Node\\Expr\\New_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/GuzzleAsyncClient.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Property Luminova\\Http\\GuzzleAsyncClient::$client has no type specified.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/GuzzleAsyncClient.php',
       'line' => 10,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/GuzzleAsyncClient.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 10,
       'nodeType' => 'PHPStan\\Node\\ClassPropertyNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Instantiated class GuzzleHttp\\Client not found.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/GuzzleAsyncClient.php',
       'line' => 14,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/GuzzleAsyncClient.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 14,
       'nodeType' => 'PhpParser\\Node\\Expr\\New_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Http\\GuzzleAsyncClient::sendAsync() has invalid return type GuzzleHttp\\Promise\\PromiseInterface.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/GuzzleAsyncClient.php',
       'line' => 17,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/GuzzleAsyncClient.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 17,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    3 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Parameter $request of method Luminova\\Http\\GuzzleAsyncClient::sendAsync() has invalid type GuzzleHttp\\Psr7\\Request.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/GuzzleAsyncClient.php',
       'line' => 17,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/GuzzleAsyncClient.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 17,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/NetworkAsync.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Property Luminova\\Http\\NetworkAsync::$client has no type specified.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/NetworkAsync.php',
       'line' => 19,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/NetworkAsync.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 19,
       'nodeType' => 'PHPStan\\Node\\ClassPropertyNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Http\\NetworkAsync::sendAsync() has invalid return type GuzzleHttp\\Promise\\PromiseInterface.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/NetworkAsync.php',
       'line' => 26,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/NetworkAsync.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 26,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Instantiated class GuzzleHttp\\Psr7\\Request not found.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/NetworkAsync.php',
       'line' => 28,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/NetworkAsync.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 28,
       'nodeType' => 'PhpParser\\Node\\Expr\\New_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/Request.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Variable $mime on left side of ?? always exists and is not nullable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/Request.php',
       'line' => 433,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/Request.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 433,
       'nodeType' => 'PhpParser\\Node\\Expr\\BinaryOp\\Coalesce',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Variable $extension on left side of ?? always exists and is not nullable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/Request.php',
       'line' => 434,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/Request.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 434,
       'nodeType' => 'PhpParser\\Node\\Expr\\BinaryOp\\Coalesce',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Http\\Request::parseUserAgent() should return array but returns object{}&stdClass.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/Request.php',
       'line' => 614,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/Request.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 614,
       'nodeType' => 'PhpParser\\Node\\Stmt\\Return_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    3 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $headerName',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/Request.php',
       'line' => 639,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/Request.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 639,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'headerName',
      ),
    )),
    4 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Class Luminova\\Http\\Header does not have a constructor and must be instantiated without any parameters.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/Request.php',
       'line' => 654,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/Request.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 654,
       'nodeType' => 'PhpParser\\Node\\Expr\\New_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Languages/Translator.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $placeholders',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Languages/Translator.php',
       'line' => 138,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Languages/Translator.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 138,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'placeholders',
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Logger/Logger.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Logger\\Logger::setLogger() has no return type specified.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Logger/Logger.php',
       'line' => 25,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Logger/Logger.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 25,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Models/Model.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Models\\Model::insertRecord() should return bool but returns int.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Models/Model.php',
       'line' => 68,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Models/Model.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 68,
       'nodeType' => 'PhpParser\\Node\\Stmt\\Return_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Models\\Model::updateRecord() should return bool but returns int.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Models/Model.php',
       'line' => 80,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Models/Model.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 80,
       'nodeType' => 'PhpParser\\Node\\Stmt\\Return_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Models\\Model::deleteRecord() should return bool but returns int.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Models/Model.php',
       'line' => 115,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Models/Model.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 115,
       'nodeType' => 'PhpParser\\Node\\Stmt\\Return_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Models/PushMessage.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Property Luminova\\Models\\PushMessage::$title is unused.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Models/PushMessage.php',
       'line' => 19,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Models/PushMessage.php',
       'traitFilePath' => NULL,
       'tip' => 'See: https://phpstan.org/developing-extensions/always-read-written-properties',
       'nodeLine' => 14,
       'nodeType' => 'PHPStan\\Node\\ClassPropertiesNode',
       'identifier' => 'deadCode.unusedProperty',
       'metadata' => 
      array (
        'classOrder' => 1,
        'classDepth' => 1,
        'classStartLine' => 14,
        'propertyName' => 'title',
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Property Luminova\\Models\\PushMessage::$body is unused.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Models/PushMessage.php',
       'line' => 24,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Models/PushMessage.php',
       'traitFilePath' => NULL,
       'tip' => 'See: https://phpstan.org/developing-extensions/always-read-written-properties',
       'nodeLine' => 14,
       'nodeType' => 'PHPStan\\Node\\ClassPropertiesNode',
       'identifier' => 'deadCode.unusedProperty',
       'metadata' => 
      array (
        'classOrder' => 1,
        'classDepth' => 1,
        'classStartLine' => 14,
        'propertyName' => 'body',
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Constructor of class Luminova\\Models\\PushMessage has an unused parameter $type.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Models/PushMessage.php',
       'line' => 46,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Models/PushMessage.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 46,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => 'constructor.unusedParameter',
       'metadata' => 
      array (
        'variableName' => 'type',
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Notifications/FirebasePusher.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Property Luminova\\Notifications\\FirebasePusher::$factory has no type specified.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Notifications/FirebasePusher.php',
       'line' => 28,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Notifications/FirebasePusher.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 28,
       'nodeType' => 'PHPStan\\Node\\ClassPropertyNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Call to method withServiceAccount() on an unknown class Kreait\\Firebase\\Factory.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Notifications/FirebasePusher.php',
       'line' => 45,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Notifications/FirebasePusher.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 45,
       'nodeType' => 'PhpParser\\Node\\Expr\\MethodCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Instantiated class Kreait\\Firebase\\Factory not found.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Notifications/FirebasePusher.php',
       'line' => 45,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Notifications/FirebasePusher.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 45,
       'nodeType' => 'PhpParser\\Node\\Expr\\New_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    3 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Call to static method create() on an unknown class Kreait\\Firebase\\Messaging\\Notification.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Notifications/FirebasePusher.php',
       'line' => 71,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Notifications/FirebasePusher.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 71,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    4 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Call to static method withTarget() on an unknown class Kreait\\Firebase\\Messaging\\CloudMessage.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Notifications/FirebasePusher.php',
       'line' => 85,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Notifications/FirebasePusher.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 85,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    5 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Call to static method create() on an unknown class Kreait\\Firebase\\Messaging\\Notification.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Notifications/FirebasePusher.php',
       'line' => 86,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Notifications/FirebasePusher.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 86,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    6 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Call to static method withTarget() on an unknown class Kreait\\Firebase\\Messaging\\CloudMessage.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Notifications/FirebasePusher.php',
       'line' => 107,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Notifications/FirebasePusher.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 107,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    7 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Call to static method create() on an unknown class Kreait\\Firebase\\Messaging\\Notification.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Notifications/FirebasePusher.php',
       'line' => 109,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Notifications/FirebasePusher.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 109,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    8 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Call to static method new() on an unknown class Kreait\\Firebase\\Messaging\\CloudMessage.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Notifications/FirebasePusher.php',
       'line' => 130,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Notifications/FirebasePusher.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 130,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    9 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Call to static method create() on an unknown class Kreait\\Firebase\\Messaging\\Notification.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Notifications/FirebasePusher.php',
       'line' => 132,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Notifications/FirebasePusher.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 132,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    10 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Notifications\\FirebasePusher::push() should return mixed but return statement is missing.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Notifications/FirebasePusher.php',
       'line' => 152,
       'canBeIgnored' => false,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Notifications/FirebasePusher.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 152,
       'nodeType' => 'PHPStan\\Node\\ExecutionEndNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    11 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Notifications\\FirebasePusher::device() should return mixed but return statement is missing.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Notifications/FirebasePusher.php',
       'line' => 160,
       'canBeIgnored' => false,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Notifications/FirebasePusher.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 160,
       'nodeType' => 'PHPStan\\Node\\ExecutionEndNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    12 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Call to static method new() on an unknown class Kreait\\Firebase\\Messaging\\CloudMessage.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Notifications/FirebasePusher.php',
       'line' => 162,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Notifications/FirebasePusher.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 162,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Notifications/FirebaseRealtime.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Property Luminova\\Notifications\\FirebaseRealtime::$database has no type specified.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Notifications/FirebaseRealtime.php',
       'line' => 14,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Notifications/FirebaseRealtime.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 14,
       'nodeType' => 'PHPStan\\Node\\ClassPropertyNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Property Luminova\\Notifications\\FirebaseRealtime::$tableName has no type specified.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Notifications/FirebaseRealtime.php',
       'line' => 15,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Notifications/FirebaseRealtime.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 15,
       'nodeType' => 'PHPStan\\Node\\ClassPropertyNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Notifications\\FirebaseRealtime::__construct() has parameter $databaseUri with no type specified.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Notifications/FirebaseRealtime.php',
       'line' => 17,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Notifications/FirebaseRealtime.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 17,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    3 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Notifications\\FirebaseRealtime::__construct() has parameter $projectId with no type specified.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Notifications/FirebaseRealtime.php',
       'line' => 17,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Notifications/FirebaseRealtime.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 17,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    4 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Call to method withProjectId() on an unknown class Kreait\\Firebase\\Factory.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Notifications/FirebaseRealtime.php',
       'line' => 18,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Notifications/FirebaseRealtime.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 18,
       'nodeType' => 'PhpParser\\Node\\Expr\\MethodCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    5 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Instantiated class Kreait\\Firebase\\Factory not found.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Notifications/FirebaseRealtime.php',
       'line' => 18,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Notifications/FirebaseRealtime.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 18,
       'nodeType' => 'PhpParser\\Node\\Expr\\New_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    6 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Notifications\\FirebaseRealtime::insert() has parameter $rowId with no type specified.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Notifications/FirebaseRealtime.php',
       'line' => 49,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Notifications/FirebaseRealtime.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 49,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    7 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Notifications\\FirebaseRealtime::update() has parameter $rowId with no type specified.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Notifications/FirebaseRealtime.php',
       'line' => 55,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Notifications/FirebaseRealtime.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 55,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    8 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Notifications\\FirebaseRealtime::delete() has no return type specified.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Notifications/FirebaseRealtime.php',
       'line' => 62,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Notifications/FirebaseRealtime.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 62,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    9 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Notifications\\FirebaseRealtime::delete() has parameter $rowId with no type specified.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Notifications/FirebaseRealtime.php',
       'line' => 62,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Notifications/FirebaseRealtime.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 62,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Bootstrap.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Property Luminova\\Routing\\Bootstrap::$onError type has no signature specified for callable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Bootstrap.php',
       'line' => 57,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Bootstrap.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 57,
       'nodeType' => 'PHPStan\\Node\\ClassPropertyNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Routing\\Bootstrap::__construct() has parameter $onError with no signature specified for callable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Bootstrap.php',
       'line' => 70,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Bootstrap.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 70,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Routing\\Bootstrap::getErrorHandler() return type has no signature specified for callable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Bootstrap.php',
       'line' => 94,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Bootstrap.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 94,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Routing\\Router::before() has parameter $callback with no signature specified for callable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'line' => 107,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 107,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Routing\\Router::after() has parameter $callback with no signature specified for callable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'line' => 133,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 133,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Routing\\Router::capture() has parameter $callback with no signature specified for callable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'line' => 160,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 160,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    3 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Routing\\Router::authenticate() has parameter $callback with no signature specified for callable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'line' => 187,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 187,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    4 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Routing\\Router::authenticate() has parameter $pattern with no signature specified for callable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'line' => 187,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 187,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    5 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Routing\\Router::command() has parameter $callback with no signature specified for callable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'line' => 218,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 218,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    6 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Routing\\Router::any() has parameter $callback with no signature specified for callable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'line' => 243,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 243,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    7 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Routing\\Router::get() has parameter $callback with no signature specified for callable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'line' => 256,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 256,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    8 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param has invalid value (string pattern A route pattern or template view name): Unexpected token "pattern", expected variable at offset 81',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'line' => 256,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 256,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    9 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Routing\\Router::post() has parameter $callback with no signature specified for callable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'line' => 269,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 269,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    10 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Routing\\Router::patch() has parameter $callback with no signature specified for callable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'line' => 282,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 282,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    11 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Routing\\Router::delete() has parameter $callback with no signature specified for callable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'line' => 295,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 295,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    12 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Routing\\Router::put() has parameter $callback with no signature specified for callable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'line' => 308,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 308,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    13 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Routing\\Router::options() has parameter $callback with no signature specified for callable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'line' => 321,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 321,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    14 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Routing\\Router::bind() has parameter $callback with no signature specified for callable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'line' => 334,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 334,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    15 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @var does not specify variable name.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'line' => 373,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 373,
       'nodeType' => 'PhpParser\\Node\\Stmt\\Expression',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    16 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @var does not specify variable name.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'line' => 378,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 378,
       'nodeType' => 'PhpParser\\Node\\Stmt\\Expression',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    17 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @var does not specify variable name.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'line' => 383,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 383,
       'nodeType' => 'PhpParser\\Node\\Stmt\\Expression',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    18 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @var does not specify variable name.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'line' => 388,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 388,
       'nodeType' => 'PhpParser\\Node\\Stmt\\Expression',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    19 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @return with type bool is incompatible with native type void.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'line' => 426,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 426,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    20 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Right side of || is always true.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'line' => 441,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 441,
       'nodeType' => 'PHPStan\\Node\\BooleanOrNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    21 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Routing\\Router::run() has parameter $callback with no signature specified for callable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'line' => 470,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 470,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    22 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Constant STATUS_ERROR not found.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'line' => 483,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 483,
       'nodeType' => 'PhpParser\\Node\\Expr\\ConstFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    23 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Constant STATUS_OK not found.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'line' => 483,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 483,
       'nodeType' => 'PhpParser\\Node\\Expr\\ConstFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    24 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Routing\\Router::setErrorHandler() has parameter $callback with no signature specified for callable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'line' => 558,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 558,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    25 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Routing\\Router::setErrorHandler() has parameter $match_callback with no signature specified for callable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'line' => 558,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 558,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    26 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param for parameter $match with type string is incompatible with native type array|null.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'line' => 574,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 574,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    27 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Right side of && is always true.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'line' => 616,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 616,
       'nodeType' => 'PHPStan\\Node\\BooleanAndNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    28 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @return with type void is incompatible with native type bool.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'line' => 632,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 632,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    29 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Right side of && is always true.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'line' => 650,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 650,
       'nodeType' => 'PHPStan\\Node\\BooleanAndNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    30 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Right side of && is always true.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'line' => 658,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 658,
       'nodeType' => 'PHPStan\\Node\\BooleanAndNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    31 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Routing\\Router::execute() has parameter $callback with no signature specified for callable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'line' => 702,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 702,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    32 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Offset 0 does not exist on array<bool>.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'line' => 757,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 757,
       'nodeType' => 'PhpParser\\Node\\Expr\\Assign',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    33 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Offset 1 does not exist on array<bool>.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'line' => 757,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 757,
       'nodeType' => 'PhpParser\\Node\\Expr\\Assign',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    34 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'If condition is always true.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'line' => 771,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 771,
       'nodeType' => 'PhpParser\\Node\\Stmt\\If_',
       'identifier' => 'deadCode.ifConstantCondition',
       'metadata' => 
      array (
        'depth' => 3,
        'order' => 5,
        'value' => true,
      ),
    )),
    35 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @return contains unresolvable type.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'line' => 789,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 789,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    36 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Access to an undefined property object::$name.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'line' => 798,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more: <fg=cyan>https://phpstan.org/blog/solving-phpstan-access-to-undefined-property</>',
       'nodeLine' => 798,
       'nodeType' => 'PhpParser\\Node\\Expr\\PropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    37 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Access to an undefined property object::$name.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'line' => 802,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more: <fg=cyan>https://phpstan.org/blog/solving-phpstan-access-to-undefined-property</>',
       'nodeLine' => 802,
       'nodeType' => 'PhpParser\\Node\\Expr\\PropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    38 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Access to an undefined property object::$options.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'line' => 803,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more: <fg=cyan>https://phpstan.org/blog/solving-phpstan-access-to-undefined-property</>',
       'nodeLine' => 803,
       'nodeType' => 'PhpParser\\Node\\Expr\\PropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    39 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Access to an undefined property object::$usages.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'line' => 804,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more: <fg=cyan>https://phpstan.org/blog/solving-phpstan-access-to-undefined-property</>',
       'nodeLine' => 804,
       'nodeType' => 'PhpParser\\Node\\Expr\\PropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    40 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Access to an undefined property object::$description.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'line' => 805,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more: <fg=cyan>https://phpstan.org/blog/solving-phpstan-access-to-undefined-property</>',
       'nodeLine' => 805,
       'nodeType' => 'PhpParser\\Node\\Expr\\PropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    41 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Constant STATUS_OK not found.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'line' => 810,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 810,
       'nodeType' => 'PhpParser\\Node\\Expr\\ConstFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    42 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Constant STATUS_ERROR not found.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'line' => 817,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 817,
       'nodeType' => 'PhpParser\\Node\\Expr\\ConstFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    43 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Constant STATUS_ERROR not found.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'line' => 838,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => 'Learn more at https://phpstan.org/user-guide/discovering-symbols',
       'nodeLine' => 838,
       'nodeType' => 'PhpParser\\Node\\Expr\\ConstFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    44 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @return with type bool|string is not subtype of native type string|false.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'line' => 990,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 990,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Security/Encryption/AES.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $data',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Security/Encryption/AES.php',
       'line' => 35,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Security/Encryption/AES.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 35,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'data',
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Security/Encryption/EncryptionInterface.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Security\\Encryption\\ErrorException is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Security/Encryption/EncryptionInterface.php',
       'line' => 45,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Security/Encryption/EncryptionInterface.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 45,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Security\\Encryption\\InvalidException is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Security/Encryption/EncryptionInterface.php',
       'line' => 74,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Security/Encryption/EncryptionInterface.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 74,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Security\\Encryption\\InvalidException is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Security/Encryption/EncryptionInterface.php',
       'line' => 82,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Security/Encryption/EncryptionInterface.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 82,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Security/InputValidator.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Result of && is always false.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Security/InputValidator.php',
       'line' => 46,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Security/InputValidator.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 46,
       'nodeType' => 'PHPStan\\Node\\BooleanAndNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Variable $rules in empty() always exists and is not falsy.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Security/InputValidator.php',
       'line' => 46,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Security/InputValidator.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 46,
       'nodeType' => 'PhpParser\\Node\\Expr\\Empty_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $message',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Security/InputValidator.php',
       'line' => 354,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Security/InputValidator.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 354,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'message',
      ),
    )),
    3 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Variable $message in empty() is never defined.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Security/InputValidator.php',
       'line' => 372,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Security/InputValidator.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 372,
       'nodeType' => 'PhpParser\\Node\\Expr\\Empty_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Security/ValidatorInterface.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $message',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Security/ValidatorInterface.php',
       'line' => 64,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Security/ValidatorInterface.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 64,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'message',
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Seo/Meta.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Seo\\Meta::$instance through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Seo/Meta.php',
       'line' => 59,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 59,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Seo\\Meta::$instance through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Seo/Meta.php',
       'line' => 60,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 60,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe usage of new static().',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Seo/Meta.php',
       'line' => 60,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => 'See: https://phpstan.org/blog/solving-phpstan-error-unsafe-usage-of-new-static',
       'nodeLine' => 60,
       'nodeType' => 'PhpParser\\Node\\Expr\\New_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    3 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe access to private property Luminova\\Seo\\Meta::$instance through static::.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Seo/Meta.php',
       'line' => 62,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Seo/Meta.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 62,
       'nodeType' => 'PhpParser\\Node\\Expr\\StaticPropertyFetch',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Sessions/CookieManager.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Variable $_COOKIE in isset() always exists and is not nullable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Sessions/CookieManager.php',
       'line' => 234,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Sessions/CookieManager.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 234,
       'nodeType' => 'PhpParser\\Node\\Expr\\Isset_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unreachable statement - code above always terminates.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Sessions/CookieManager.php',
       'line' => 237,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Sessions/CookieManager.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 237,
       'nodeType' => 'PHPStan\\Node\\UnreachableStatementNode',
       'identifier' => 'deadCode.unreachableStatement',
       'metadata' => 
      array (
        'depth' => 3,
        'order' => 1,
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Variable $_COOKIE in isset() always exists and is not nullable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Sessions/CookieManager.php',
       'line' => 254,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Sessions/CookieManager.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 254,
       'nodeType' => 'PhpParser\\Node\\Expr\\Isset_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    3 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Sessions\\CookieManager::toArray() should return array but returns stdClass.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Sessions/CookieManager.php',
       'line' => 258,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Sessions/CookieManager.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 258,
       'nodeType' => 'PhpParser\\Node\\Stmt\\Return_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    4 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Variable $_COOKIE in isset() always exists and is not nullable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Sessions/CookieManager.php',
       'line' => 278,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Sessions/CookieManager.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 278,
       'nodeType' => 'PhpParser\\Node\\Expr\\Isset_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    5 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param for parameter $value with type array is incompatible with native type string.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Sessions/CookieManager.php',
       'line' => 350,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Sessions/CookieManager.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 350,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    6 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @return with type Luminova\\Sessions\\CookieManager is incompatible with native type void.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Sessions/CookieManager.php',
       'line' => 350,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Sessions/CookieManager.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 350,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Sessions/Session.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Unsafe usage of new static().',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Sessions/Session.php',
       'line' => 64,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Sessions/Session.php',
       'traitFilePath' => NULL,
       'tip' => 'See: https://phpstan.org/blog/solving-phpstan-error-unsafe-usage-of-new-static',
       'nodeLine' => 64,
       'nodeType' => 'PhpParser\\Node\\Expr\\New_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @return with type object is incompatible with native type array.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Sessions/Session.php',
       'line' => 106,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Sessions/Session.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 106,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Sessions/SessionInterface.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $online',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Sessions/SessionInterface.php',
       'line' => 76,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Sessions/SessionInterface.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 76,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'online',
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Sessions/SessionManager.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Property Luminova\\Sessions\\SessionManager::$config is never read, only written.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Sessions/SessionManager.php',
       'line' => 25,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Sessions/SessionManager.php',
       'traitFilePath' => NULL,
       'tip' => 'See: https://phpstan.org/developing-extensions/always-read-written-properties',
       'nodeLine' => 15,
       'nodeType' => 'PHPStan\\Node\\ClassPropertiesNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $config',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Sessions/SessionManager.php',
       'line' => 33,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Sessions/SessionManager.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 33,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'config',
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Template/Template.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Strict comparison using === between non-falsy-string and \'\' will always evaluate to false.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Template/TemplateTrait.php (in context of class Luminova\\Template\\Template)',
       'line' => 516,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Template/Template.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 516,
       'nodeType' => 'PhpParser\\Node\\Expr\\BinaryOp\\Identical',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $expire',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Template/TemplateTrait.php (in context of class Luminova\\Template\\Template)',
       'line' => 610,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Template/Template.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 610,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'expire',
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Parameter #1 $callback of function ob_start expects callable(): mixed, bool given.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Template/TemplateTrait.php (in context of class Luminova\\Template\\Template)',
       'line' => 637,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Template/Template.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 637,
       'nodeType' => 'PhpParser\\Node\\Expr\\FuncCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    3 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Parameter #1 $callback of function ob_start expects callable(): mixed, bool given.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Template/TemplateTrait.php (in context of class Luminova\\Template\\Template)',
       'line' => 693,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Template/Template.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 693,
       'nodeType' => 'PhpParser\\Node\\Expr\\FuncCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    4 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Parameter #1 $cacheControl of method Luminova\\Cache\\Compress::setCacheControl() expects string, bool given.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Template/TemplateTrait.php (in context of class Luminova\\Template\\Template)',
       'line' => 790,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Template/Template.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 790,
       'nodeType' => 'PhpParser\\Node\\Expr\\MethodCall',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    5 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param for parameter $suffix with type string is incompatible with native type bool.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Template/TemplateTrait.php (in context of class Luminova\\Template\\Template)',
       'line' => 1030,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Template/Template.php',
       'traitFilePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Template/TemplateTrait.php',
       'tip' => NULL,
       'nodeLine' => 1030,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Task.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Time\\Task::create() has no return type specified.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Task.php',
       'line' => 17,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Task.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 17,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Negated boolean expression is always false.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Task.php',
       'line' => 126,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Task.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 126,
       'nodeType' => 'PhpParser\\Node\\Expr\\BooleanNot',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Time.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $local',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Time.php',
       'line' => 61,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Time.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 61,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'local',
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Time\\Exception is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Time.php',
       'line' => 61,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Time.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 61,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Time\\Exception is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Time.php',
       'line' => 93,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Time.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 93,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    3 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $local',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Time.php',
       'line' => 111,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Time.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 111,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'local',
      ),
    )),
    4 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Time\\Exception is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Time.php',
       'line' => 111,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Time.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 111,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    5 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $local',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Time.php',
       'line' => 130,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Time.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 130,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'local',
      ),
    )),
    6 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Time\\Exception is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Time.php',
       'line' => 130,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Time.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 130,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    7 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $local',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Time.php',
       'line' => 145,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Time.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 145,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'local',
      ),
    )),
    8 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Time\\Exception is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Time.php',
       'line' => 145,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Time.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 145,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    9 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $local',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Time.php',
       'line' => 160,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Time.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 160,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'local',
      ),
    )),
    10 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Time\\Exception is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Time.php',
       'line' => 160,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Time.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 160,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    11 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Time\\Exception is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Time.php',
       'line' => 170,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Time.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 170,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    12 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Time\\Exception is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Time.php',
       'line' => 180,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Time.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 180,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    13 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Time\\Exception is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Time.php',
       'line' => 190,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Time.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 190,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    14 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Time\\Exception is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Time.php',
       'line' => 200,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Time.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 200,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    15 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Time\\Exception is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Time.php',
       'line' => 210,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Time.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 210,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    16 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Time\\Exception is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Time.php',
       'line' => 220,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Time.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 220,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    17 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Time\\Exception is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Time.php',
       'line' => 231,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Time.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 231,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    18 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Time\\Exception is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Time.php',
       'line' => 241,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Time.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 241,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    19 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Time\\Exception is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Time.php',
       'line' => 251,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Time.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 251,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    20 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Time\\Exception is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Time.php',
       'line' => 261,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Time.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 261,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    21 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Time\\Exception is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Time.php',
       'line' => 271,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Time.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 271,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    22 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Time\\Exception is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Time.php',
       'line' => 320,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Time.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 320,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    23 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Time\\Exception is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Time.php',
       'line' => 345,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Time.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 345,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    24 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Time\\Exception is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Time.php',
       'line' => 359,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Time.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 359,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    25 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Time\\Exception is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Time.php',
       'line' => 374,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Time.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 374,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    26 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Time\\Exception is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Time.php',
       'line' => 391,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Time.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 391,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    27 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Time\\Exception is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Time.php',
       'line' => 410,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Time.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 410,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    28 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Time\\Exception is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Time.php',
       'line' => 424,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Time.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 424,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    29 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Time\\Exception is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Time.php',
       'line' => 438,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Time.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 438,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    30 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $local',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Time.php',
       'line' => 459,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Time.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 459,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'local',
      ),
    )),
    31 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Time\\Exception is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Time.php',
       'line' => 459,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Time.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 459,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    32 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @param references unknown parameter: $datetime',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Time.php',
       'line' => 477,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Time.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 477,
       'nodeType' => 'PhpParser\\Node\\Stmt\\ClassMethod',
       'identifier' => 'phpDoc.unknownParameter',
       'metadata' => 
      array (
        'parameterName' => 'datetime',
      ),
    )),
    33 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'PHPDoc tag @throws with type Luminova\\Time\\Exception is not subtype of Throwable',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Time.php',
       'line' => 477,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Time.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 477,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    34 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Call to method DateTimeImmutable::setTime() on a separate line has no effect.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Time.php',
       'line' => 501,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Time.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 501,
       'nodeType' => 'PhpParser\\Node\\Stmt\\Expression',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    35 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Call to method DateTimeImmutable::setTime() on a separate line has no effect.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Time.php',
       'line' => 502,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Time.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 502,
       'nodeType' => 'PhpParser\\Node\\Stmt\\Expression',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Utils/Queue.php' => 
  array (
    0 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Utils\\Queue::push() has parameter $item with no signature specified for callable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Utils/Queue.php',
       'line' => 68,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Utils/Queue.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 68,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    1 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Method Luminova\\Utils\\Queue::run() has parameter $callback with no signature specified for callable.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Utils/Queue.php',
       'line' => 81,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Utils/Queue.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 81,
       'nodeType' => 'PHPStan\\Node\\InClassMethodNode',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
    2 => 
    \PHPStan\Analyser\Error::__set_state(array(
       'message' => 'Instanceof between mixed and Closure will always evaluate to false.',
       'file' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Utils/Queue.php',
       'line' => 167,
       'canBeIgnored' => true,
       'filePath' => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Utils/Queue.php',
       'traitFilePath' => NULL,
       'tip' => NULL,
       'nodeLine' => 167,
       'nodeType' => 'PhpParser\\Node\\Expr\\Instanceof_',
       'identifier' => NULL,
       'metadata' => 
      array (
      ),
    )),
  ),
); },
	'collectedDataCallback' => static function (): array { return array (
); },
	'dependencies' => array (
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/app/Controllers/Application.php' => 
  array (
    'fileHash' => 'ed12f14b077f915594281c986a9f25081d2c8d11',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Base/BaseController.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Controllers/ViewController.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/app/Controllers/Config/Config.php' => 
  array (
    'fileHash' => '29e8f024bc99dd3efce65b6e404ce174fa71ff4a',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/app/Controllers/Config/Cookie.php' => 
  array (
    'fileHash' => '0d7f89bf0306a1ed439393a36c80fea497083cb8',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Cookies/Cookie.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/app/Controllers/Config/Session.php' => 
  array (
    'fileHash' => 'b13a698b049a51b1572b0e29d74a3b57b09a66f3',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Security/Csrf.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Sessions/CookieManager.php',
      2 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Sessions/Session.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/app/Controllers/Config/Template.php' => 
  array (
    'fileHash' => 'b90153c52c54132d529486b0cbf0af890f640ebe',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Application/Application.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Template/Template.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/app/Controllers/Languages/App.en.php' => 
  array (
    'fileHash' => '0ba0f19d616fe501a4fc284c28a147bf3031c2aa',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/app/Controllers/Utils/Func.php' => 
  array (
    'fileHash' => '8eec9ce9638a80811eb67879b5e375a6dfcea7b9',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/app/Controllers/Utils/Global.php' => 
  array (
    'fileHash' => 'bf87c61ca4979d3d099503d9330024008036f260',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/app/Controllers/Welcome.php' => 
  array (
    'fileHash' => '74843d6a97f4e6f0c8771b914c9c0b8b9d702c7f',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Application/Application.php' => 
  array (
    'fileHash' => 'f7d60fc8bdedbe7911f4f266d6017fe8a18eab0d',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/app/Controllers/Application.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Base/BaseApplication.php',
      2 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Base/BaseController.php',
      3 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Controllers/ViewController.php',
      4 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Application/Services.php' => 
  array (
    'fileHash' => '756a443d2812d19d1d18c90a754bfc9c85bb9c11',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Arrays/ArrayCountable.php' => 
  array (
    'fileHash' => '1f360e7e13b860083e2313f9f23a2467b2eb9317',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Arrays/ArrayInput.php' => 
  array (
    'fileHash' => '0bebdcf751a45c5636fa4af0920aa0f2c47f9780',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Arrays/ArrayObject.php' => 
  array (
    'fileHash' => 'ea87b1c1c8ab895888187ecf89855d4ead79fee3',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Arrays/Arrays.php' => 
  array (
    'fileHash' => 'c82784eacbd0fba0aad43e4b75f1e0773fde6512',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Base/BaseApplication.php' => 
  array (
    'fileHash' => 'e9c3cb86da16755aa67b8db963de4c541eac39f4',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/app/Controllers/Application.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Base/BaseController.php',
      2 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Controllers/ViewController.php',
      3 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Base/BaseCommand.php' => 
  array (
    'fileHash' => '318d1af607686738237a5c2c7fb4b5c99a7698db',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Commands.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Novakit/Database.php',
      2 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Novakit/Generators.php',
      3 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Novakit/Help.php',
      4 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Novakit/Lists.php',
      5 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Novakit/Server.php',
      6 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Base/BaseConfig.php' => 
  array (
    'fileHash' => 'c1272ba08574af94be3f98bcab645809c34629da',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/app/Controllers/Welcome.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Application/Application.php',
      2 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Console.php',
      3 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Novakit/Generators.php',
      4 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Composer/BaseComposer.php',
      5 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Composer/Builder.php',
      6 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Connection.php',
      7 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Query.php',
      8 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Email/Mailer.php',
      9 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Errors/Error.php',
      10 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Exceptions/AppException.php',
      11 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/Header.php',
      12 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Logger/NovaLogger.php',
      13 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Template/Template.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Base/BaseController.php' => 
  array (
    'fileHash' => '8bf127aaf00a1bf181f69ea13c18a71ab9755c12',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Base/BaseFunction.php' => 
  array (
    'fileHash' => '1eafc17264ca2728e933baf7d14cd656af8bc6d6',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/app/Controllers/Utils/Func.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Base/BaseModel.php' => 
  array (
    'fileHash' => '38a0703e49d774dd9ca8567087b439d74d6b391d',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Base/BaseViewController.php' => 
  array (
    'fileHash' => '79acef17722ca432d3da13b8561bfe3ef72eeb03',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/app/Controllers/Welcome.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Cache/Cache.php' => 
  array (
    'fileHash' => 'b25706a4a5a099037a134de26972e1d47097de8a',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Cache/Compress.php' => 
  array (
    'fileHash' => '7bd74d2d0f3850ef1c2a76bafd5fa9df6d2c5e99',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Application/Application.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Template/Template.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Cache/FileCache.php' => 
  array (
    'fileHash' => 'f322037de7afab6969e3d421f5ac041127031bc9',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Cache/Cache.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Query.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Cache/FileCacheItem.php' => 
  array (
    'fileHash' => '97f2fb30dca98d6bedbbfe54052d6ff7b7237fc8',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Cache/FileCache.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Cache/MemoryCache.php' => 
  array (
    'fileHash' => 'f8e6f8919689bdf551abca4b235e9e3018b1cb50',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Cache/Cache.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Cache/Optimizer.php' => 
  array (
    'fileHash' => 'dd0c0891505e1ca83e3e1c3d90cc5184fa88b12c',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Application/Application.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Template/Template.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Colors.php' => 
  array (
    'fileHash' => '9ee9879b48f365d26cf17e362c9fb33c1e659924',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Terminal.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Commands.php' => 
  array (
    'fileHash' => '984f7862aaa6a7678020108072fc928afd02a830',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Console.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Terminal.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Console.php' => 
  array (
    'fileHash' => 'f395ef2166aa163a063c32de621c95fc426921b5',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Novakit/AvailableCommands.php' => 
  array (
    'fileHash' => '292261a4936bcabe93d6f8bda779e3fcfbdc6633',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Commands.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Novakit/Help.php',
      2 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Novakit/Lists.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Novakit/Database.php' => 
  array (
    'fileHash' => '6517fe36960ad9b774c960c52c61287799dcebc1',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Commands.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Novakit/Generators.php' => 
  array (
    'fileHash' => '56b9c46375f60e2b71e6c7f430017ba0a22b7509',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Commands.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Novakit/Help.php' => 
  array (
    'fileHash' => 'dc6f40c4e281c233ff06fdc891e2037bd16198e9',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Commands.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Novakit/Lists.php' => 
  array (
    'fileHash' => 'ffcc3182c5ee924aeaf922b2b9ceaac4f5cc6060',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Commands.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Novakit/Server.php' => 
  array (
    'fileHash' => '4418c65d186aac706f55bc98dfc900d8d9e5fe3d',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Commands.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Novakit/mod_rewrite.php' => 
  array (
    'fileHash' => 'eaec045d0b5c5f3bdf99b14c597b72b6695f9f80',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Terminal.php' => 
  array (
    'fileHash' => 'e1408034d85f2e1e9dc7331455a83c6d673ca7f8',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Base/BaseCommand.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Commands.php',
      2 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Console.php',
      3 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Novakit/Database.php',
      4 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Novakit/Generators.php',
      5 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Novakit/Help.php',
      6 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Novakit/Lists.php',
      7 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Novakit/Server.php',
      8 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/TerminalGenerator.php',
      9 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/TerminalGenerator.php' => 
  array (
    'fileHash' => '41b291b9fd6d246342f6fb421b06895ce9d73d48',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/TextUtils.php' => 
  array (
    'fileHash' => '451f55119665a29594fe85347104d12f7dd474a6',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Colors.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Novakit/Lists.php',
      2 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Terminal.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Composer/BaseComposer.php' => 
  array (
    'fileHash' => '5b0dedfc9742461d63840b0da5cb2422feed2d6a',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Composer/Builder.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Composer/Builder.php' => 
  array (
    'fileHash' => 'b7bf9c15ae03846c41dcbbfc45c3db9d56ca4321',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Composer/Updater.php' => 
  array (
    'fileHash' => 'b4aff10034f7f779cd67ffdf58eb5ba7870c280e',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Config/Configuration.php' => 
  array (
    'fileHash' => '6312370413b2a78a20630543cd04c7bcda65c0a3',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/app/Controllers/Config/Config.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/app/Controllers/Welcome.php',
      2 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Application/Application.php',
      3 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Application/Services.php',
      4 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Base/BaseConfig.php',
      5 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Console.php',
      6 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Novakit/Generators.php',
      7 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Composer/BaseComposer.php',
      8 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Composer/Builder.php',
      9 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Config/DotEnv.php',
      10 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Connection.php',
      11 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Query.php',
      12 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Email/Mailer.php',
      13 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Errors/Error.php',
      14 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Exceptions/AppException.php',
      15 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/Header.php',
      16 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Logger/NovaLogger.php',
      17 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Notifications/FirebasePusher.php',
      18 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Template/Template.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Config/Database.php' => 
  array (
    'fileHash' => '87496df8b074449f9560865cffb0d1c3af6aa15d',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Connection.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Drivers/MySqlDriver.php',
      2 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Drivers/PdoDriver.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Config/DotEnv.php' => 
  array (
    'fileHash' => 'e60def6ebcaf4ff4ae0ea712dbea781a888fa6e1',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Application/Application.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Composer/Builder.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Config/PHPStanRules.php' => 
  array (
    'fileHash' => '926a7c1bfc5a89adc7d3e78c7fe4f0378894af80',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Config/SystemPaths.php' => 
  array (
    'fileHash' => 'c250db258d27c8e604b25ce09fb0d564f6d2d172',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Controllers/Controller.php' => 
  array (
    'fileHash' => 'aaa951fbc944508ce95b71e30650f12f5ad07e98',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Controllers/ViewController.php' => 
  array (
    'fileHash' => 'ab9d21de8391a841bca4d361bb5033e9cc2f6eb1',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/app/Controllers/Welcome.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Base/BaseController.php',
      2 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Base/BaseViewController.php',
      3 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Cookies/Cookie.php' => 
  array (
    'fileHash' => '8a265b102152a5fab93cf79c634d0af3f5893565',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Cookies/CookieInterface.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Cookies/CookieInterface.php' => 
  array (
    'fileHash' => '66aae7aabc455cf918d4c663f641aeab446f3aa6',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Cookies/Cookie.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Cookies/Exception/CookieException.php' => 
  array (
    'fileHash' => '4615d8b06d8516a16a7261c2de4eea829f584d48',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Cookies/Cookie.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Columns.php' => 
  array (
    'fileHash' => '797b6e99d15038c5952364d23a0659a33109bec2',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Query.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Connection.php' => 
  array (
    'fileHash' => 'ff8145c5a3a6075eef00ad985b4a93f36b16f55f',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Query.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Models/Model.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Drivers/DriversInterface.php' => 
  array (
    'fileHash' => '0b1390c79d337e9a7a0e093fc82b3571b9d0ab41',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Connection.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Drivers/MySqlDriver.php',
      2 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Drivers/PdoDriver.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Drivers/MySqlDriver.php' => 
  array (
    'fileHash' => 'a8a3ff4167d7e8eb6773ff569a6a7d6af4f3ca58',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Connection.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Drivers/PdoDriver.php' => 
  array (
    'fileHash' => 'e17d563281db84456220d8c1c1aad5dc41117045',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Connection.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Query.php' => 
  array (
    'fileHash' => '487c6659a19c6844b13600c1f1e29709c9297fc5',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Models/Model.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Results/Statements.php' => 
  array (
    'fileHash' => '300be9b2987b78103c0e360963d49ed2b5b96f5e',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Query.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Email/Clients/MailClientInterface.php' => 
  array (
    'fileHash' => 'd001d4a60860edbf1a324071cb294c85a50e7039',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Email/Clients/NovaMailer.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Email/Clients/PHPMailer.php',
      2 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Email/Mailer.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Email/Clients/NovaMailer.php' => 
  array (
    'fileHash' => 'a44064ae7c37db08216f4f9fdb7d62a057573bfc',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Email/Mailer.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Email/Clients/PHPMailer.php' => 
  array (
    'fileHash' => '269356965a08dfe906a3c42b10dbeb65e14f5633',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Email/Mailer.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Email/Exceptions/MailerException.php' => 
  array (
    'fileHash' => '5b1d24a6fe5b8be7b8ecb532bb801622b8ef9193',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Email/Clients/NovaMailer.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Email/Mailer.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Email/Mailer.php' => 
  array (
    'fileHash' => '1fdfc982ec9ced12728ac55e39740b4fa6ea3e99',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Errors/Codes.php' => 
  array (
    'fileHash' => 'cb35e73a4402a8ba32298b42f15b868cea76384f',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Errors/Error.php' => 
  array (
    'fileHash' => 'b1260677575e03bfb7cc37946fce94a1e954d8c0',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Exceptions/AppException.php' => 
  array (
    'fileHash' => '07ae6451416b592bce346d579fa92e53228cff7f',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Application/Application.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Cache/Cache.php',
      2 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Cache/FileCache.php',
      3 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Config/DotEnv.php',
      4 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Cookies/Cookie.php',
      5 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Cookies/Exception/CookieException.php',
      6 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Drivers/MySqlDriver.php',
      7 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Drivers/PdoDriver.php',
      8 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Query.php',
      9 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Email/Clients/NovaMailer.php',
      10 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Email/Exceptions/MailerException.php',
      11 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Email/Mailer.php',
      12 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Exceptions/ClassException.php',
      13 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Exceptions/DatabaseException.php',
      14 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Exceptions/ErrorException.php',
      15 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Exceptions/FileException.php',
      16 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Exceptions/InvalidException.php',
      17 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Exceptions/InvalidObjectException.php',
      18 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Exceptions/LuminovaException.php',
      19 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Exceptions/NotFoundException.php',
      20 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Exceptions/RuntimeException.php',
      21 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Exceptions/ValidationException.php',
      22 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Exceptions/ViewNotFoundException.php',
      23 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Notifications/FirebasePusher.php',
      24 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
      25 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Security/Encryption/AES.php',
      26 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Template/Smarty.php',
      27 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Template/Template.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Exceptions/ClassException.php' => 
  array (
    'fileHash' => 'cd4827d368ccf8177a09fe78d3f4d72bb9e54d7e',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Application/Application.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Cache/Cache.php',
      2 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Template/Template.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Exceptions/DatabaseException.php' => 
  array (
    'fileHash' => 'df0a11d492fd9184d928b662af090ce2bd32ca39',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Drivers/MySqlDriver.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Drivers/PdoDriver.php',
      2 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Query.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Exceptions/ErrorException.php' => 
  array (
    'fileHash' => 'f156c937d44e036fa99755a16a51581e5cbfb9df',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Cache/FileCache.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Notifications/FirebasePusher.php',
      2 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
      3 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Security/Encryption/AES.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Exceptions/FileException.php' => 
  array (
    'fileHash' => 'a2fb98b5af38e99fd2f14d67a5be866b84f18cc7',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Config/DotEnv.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Exceptions/InvalidException.php' => 
  array (
    'fileHash' => 'f32645021c8cbf68341a8d0204daf8b6ec6b0a10',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Application/Application.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Drivers/MySqlDriver.php',
      2 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Drivers/PdoDriver.php',
      3 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Security/Encryption/AES.php',
      4 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Template/Template.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Exceptions/InvalidObjectException.php' => 
  array (
    'fileHash' => '9e2e71375cff1c30805b4f3420e90f951f8797fa',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Application/Application.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Drivers/MySqlDriver.php',
      2 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Drivers/PdoDriver.php',
      3 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Template/Template.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Exceptions/LuminovaException.php' => 
  array (
    'fileHash' => '60c068e0920a3f4b639fe82ba3be47a7b58fce44',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Exceptions/NotFoundException.php' => 
  array (
    'fileHash' => 'a073d17a2fad47e8634b6ed297117e597f33649f',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Exceptions/RuntimeException.php' => 
  array (
    'fileHash' => 'c5a401a32bfe699c2d619a8dcfa962d1f22cf639',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Application/Application.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Template/Template.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Exceptions/ValidationException.php' => 
  array (
    'fileHash' => '754cfba85296835fd75e22200e6397ef6705ae0a',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Exceptions/ViewNotFoundException.php' => 
  array (
    'fileHash' => '2e0ea0766f84c62e5a606bef405d44d3e0105ec8',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Application/Application.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Template/Template.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Functions/Document.php' => 
  array (
    'fileHash' => '9a2e6666cc74875dfdc67b20cd7b3ae4c14788fa',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Application/Services.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Base/BaseFunction.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Functions/Escaper.php' => 
  array (
    'fileHash' => '143f6fe7af94728c37d3e07aa2243d9d689558f3',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Functions/Functions.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Functions/Files.php' => 
  array (
    'fileHash' => '9b95b8936ab9ac47425f896db8a697c3bd883b42',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Application/Services.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Base/BaseFunction.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Functions/Functions.php' => 
  array (
    'fileHash' => '411f713f030b861a1bb9c8b33f2781ef1eb7cc02',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/app/Controllers/Utils/Func.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Application/Services.php',
      2 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Base/BaseFunction.php',
      3 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Security/InputValidator.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Functions/IPAddress.php' => 
  array (
    'fileHash' => 'ab1c5c8547b6d0e5bf1b76bd96474600bb50b659',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Application/Services.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Base/BaseFunction.php',
      2 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Security/InputValidator.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/AsyncClientInterface.php' => 
  array (
    'fileHash' => 'c454e85359fdcafcd6b921ff42fa2aa3065bf884',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/CurlAsyncClient.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/GuzzleAsyncClient.php',
      2 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/NetworkAsync.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/Client/Curl.php' => 
  array (
    'fileHash' => '47fd656075ed3feed865be1311cd1642b475e852',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/Client/Guzzle.php' => 
  array (
    'fileHash' => '826dcbede481cdbfb283b3209cd543d22d242e7f',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/CurlAsyncClient.php' => 
  array (
    'fileHash' => '637b1f834d051f345bd979522f66692ee451d9cb',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/GuzzleAsyncClient.php' => 
  array (
    'fileHash' => '229fd81730261392a3c87bdd83b4586f390e4de5',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/Header.php' => 
  array (
    'fileHash' => '3473b4ffe6fe8dc346991f31e032e16043e080d0',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Cache/Compress.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Cache/Optimizer.php',
      2 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/Request.php',
      3 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/Network.php' => 
  array (
    'fileHash' => '9ba4a5bf71a38e3ba9ccdff01ba255f392cabd2f',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/NetworkAsync.php' => 
  array (
    'fileHash' => '71be928b57cf122253d074f4f2ae94d9da8551ac',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/NetworkClientInterface.php' => 
  array (
    'fileHash' => '294fbf5aa1d05f3cef2ee85f132b3d66900fd6ba',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/Client/Curl.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/Client/Guzzle.php',
      2 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/Network.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/NetworkRequest.php' => 
  array (
    'fileHash' => '842475c4e1b03462bd1af1297d76ddb91564ea47',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/NetworkAsync.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/NetworkResponse.php' => 
  array (
    'fileHash' => 'ccf921c907524f7a6d43a4f32edba879c2a8693b',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/Client/Curl.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/Client/Guzzle.php',
      2 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/Network.php',
      3 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/NetworkClientInterface.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/Request.php' => 
  array (
    'fileHash' => '109380389e1e81ec013b8faf549495dff3718ac2',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Base/BaseController.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Controllers/ViewController.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Languages/Translator.php' => 
  array (
    'fileHash' => 'f16c7f103fe4f8b232cf08f797c56a5b82e34f64',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Application/Services.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Library/Importer.php' => 
  array (
    'fileHash' => '5fb151bbfd6d305d753f949e27ef8715f5e64fb3',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Application/Services.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Controllers/ViewController.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Logger/Logger.php' => 
  array (
    'fileHash' => 'a6ba8362b540b6826366bd98af7fd0a7d6fe36c7',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Errors/Error.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Exceptions/AppException.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Logger/LoggerAware.php' => 
  array (
    'fileHash' => '08be0c3dd4ad6d23c4208325084c839cbcb481d4',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Logger/NovaLogger.php' => 
  array (
    'fileHash' => '2819f3d3c225988c46d9146879e48ab95b8b6a41',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Logger/Logger.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Logger/LoggerAware.php',
      2 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Sessions/Session.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Models/Model.php' => 
  array (
    'fileHash' => '860dc2fec4af3ef03fafedae556af133f3815662',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Base/BaseModel.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Models/PushMessage.php' => 
  array (
    'fileHash' => '41934b7bc1f886609a02b0c2ce1fd7a51901fe76',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Notifications/FirebasePusher.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Notifications/FirebasePusher.php' => 
  array (
    'fileHash' => '930a209e6a3aa3768f912f0f3207f00069258c1b',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Notifications/FirebaseRealtime.php' => 
  array (
    'fileHash' => 'e5b052182488d4be09b4626f2dfb6eda7763c65e',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Bootstrap.php' => 
  array (
    'fileHash' => '1ff2ce69269d4c0942f9ad15be8a8cb2e0b4d36a',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php' => 
  array (
    'fileHash' => '415926a18162eba5d88164c2a0426203624e8a9d',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Application/Application.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Security/Csrf.php' => 
  array (
    'fileHash' => 'fed63a401c7c01bf92a6aead3464758221d48d2b',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Security/Encryption/AES.php' => 
  array (
    'fileHash' => 'a2c2ffea84880da6619e3360da9742ee60e1ebc9',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Security/Encryption/EncryptionInterface.php' => 
  array (
    'fileHash' => '7fca5d363d68217fd0a77f2dc9c0a47ccaca5bfe',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Security/Encryption/AES.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Security/InputValidator.php' => 
  array (
    'fileHash' => '071fe7e537d4696afcde6b4596895980c0f95280',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Base/BaseController.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Terminal.php',
      2 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Controllers/ViewController.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Security/ValidatorInterface.php' => 
  array (
    'fileHash' => 'aa2536e5cad3df0b198f0739ce7c52c826fbe6fc',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Base/BaseController.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Terminal.php',
      2 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Controllers/ViewController.php',
      3 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Security/InputValidator.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Seo/Meta.php' => 
  array (
    'fileHash' => '753652886461a95824a306e51dde9dc558175f2c',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Sessions/CookieManager.php' => 
  array (
    'fileHash' => '5e2e5584731f5e6168f586b27768d4f8f4c75389',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Sessions/Session.php' => 
  array (
    'fileHash' => 'fbf6141a2ef81f84ddc67023b701d0cf69cc6f84',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Application/Services.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Sessions/SessionInterface.php' => 
  array (
    'fileHash' => '7aec888d0922cdd74abad15e88eb0a13f5027068',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Sessions/CookieManager.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Sessions/Session.php',
      2 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Sessions/SessionManager.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Sessions/SessionManager.php' => 
  array (
    'fileHash' => '3fcb74f04e444bd70ab916fb88062b1c48e7f19a',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Sessions/Session.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Storage/AwsC3.php' => 
  array (
    'fileHash' => 'da39a3ee5e6b4b0d3255bfef95601890afd80709',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Template/Smarty.php' => 
  array (
    'fileHash' => '1e2b33c22c0c6cbb0a506fa53006d73ef08783d5',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Application/Application.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Template/Template.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Template/Template.php' => 
  array (
    'fileHash' => 'f8217ba3042fed9c0175aeadc7b16c8d57275d00',
    'dependentFiles' => 
    array (
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Template/TemplateTrait.php' => 
  array (
    'fileHash' => '7957de0687e886cd8d309f2e6a3bc2155c04fb2d',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/app/Controllers/Application.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Application/Application.php',
      2 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Base/BaseApplication.php',
      3 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Base/BaseController.php',
      4 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Controllers/ViewController.php',
      5 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php',
      6 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Template/Template.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Task.php' => 
  array (
    'fileHash' => '6daeadcdb8a2370b78b226d7435ac6db45823df4',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Application/Services.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Time.php' => 
  array (
    'fileHash' => '9ac3d136a0df4d596998611fa89de8423205786d',
    'dependentFiles' => 
    array (
      0 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Cookies/Cookie.php',
      1 => '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Task.php',
    ),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Utils/Queue.php' => 
  array (
    'fileHash' => '090aeaac2cfdc49e22b9102a9852e618f012f0a8',
    'dependentFiles' => 
    array (
    ),
  ),
),
	'exportedNodesCallback' => static function (): array { return array (
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/app/Controllers/Application.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'App\\Controllers\\Application',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => 'Luminova\\Base\\BaseApplication',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var Session $session;
     * protected $session;
    */',
             'namespace' => 'App\\Controllers',
             'uses' => 
            array (
              'baseapplication' => 'Luminova\\Base\\BaseApplication',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'dir',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/app/Controllers/Config/Config.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'App\\Controllers\\Config\\Config',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => 'Luminova\\Config\\Configuration',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/app/Controllers/Config/Cookie.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'App\\Controllers\\Config\\Cookie',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => true,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'savePath',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * The path where session files are stored on the server.
     * @var string $savePath;
     */',
             'namespace' => 'App\\Controllers\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'expiration',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * The lifetime of the session in seconds.
     * @var int $expiration;
     */',
             'namespace' => 'App\\Controllers\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'int',
           'public' => true,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'cookiePath',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * The path to use for the session cookie.
     * @var string $sessionPath;
     */',
             'namespace' => 'App\\Controllers\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'cookieDomain',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * The domain to use for the session cookie.
     * @var string $sessionDomain;
     */',
             'namespace' => 'App\\Controllers\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'sameSite',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set the session cookie security level.
     * None, Lax, Strict 
     * @var string $sameSite;
     */',
             'namespace' => 'App\\Controllers\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'secure',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     *
     * Cookie will only be set if a secure HTTPS connection exists.
     */',
             'namespace' => 'App\\Controllers\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'bool',
           'public' => true,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'httpOnly',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     *
     * Cookie will only be accessible via HTTP(S) (no JavaScript).
     */',
             'namespace' => 'App\\Controllers\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'bool',
           'public' => true,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'cookieRaw',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * This flag allows setting a "raw" cookie, i.e., its name and value are
     * not URL encoded using `rawurlencode()`.
     *
     * If this is set to `true`, cookie names should be compliant of RFC 2616\'s
     * list of allowed characters.
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie#attributes
     * @see https://tools.ietf.org/html/rfc2616#section-2.2
     */',
             'namespace' => 'App\\Controllers\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'bool',
           'public' => true,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/app/Controllers/Config/Session.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'App\\Controllers\\Config\\Session',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => true,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'cookieName',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * The name of the session cookie.
     * 
     * @var string $cookieName;
     */',
             'namespace' => 'App\\Controllers\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'savePath',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * The path where session files are stored on the server.
     * 
     * @var string $savePath;
     */',
             'namespace' => 'App\\Controllers\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'expiration',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * The lifetime of the session in seconds.
     * 
     * @var int $expiration;
     */',
             'namespace' => 'App\\Controllers\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'int',
           'public' => true,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'sessionPath',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * The path to use for the session cookie.
     * 
     * @var string $sessionPath;
     */',
             'namespace' => 'App\\Controllers\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'sessionDomain',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * The domain to use for the session cookie.
     * 
     * @var string $sessionDomain;
     */',
             'namespace' => 'App\\Controllers\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'sameSite',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set the session cookie security level.
     * None, Lax, Strict 
     * 
     * @var string $sameSite;
     */',
             'namespace' => 'App\\Controllers\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'csrfStorage',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set the csrf storage engine 
     * cookie, session, 
     * 
     * @var string $csrfStorage;
     */',
             'namespace' => 'App\\Controllers\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/app/Controllers/Config/Template.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'App\\Controllers\\Config\\Template',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => true,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'ENGINE',
               'value' => '\'default\'',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Application template engine
     * 
     * @var string ENGINE [default, smarty] 
    */',
             'namespace' => 'App\\Controllers\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'optionsAsVariable',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Access template view options as variable
     * If set to true then options can be access like $name else $this->_name
     * 
     * @var bool $optionsAsVariable 
    */',
             'namespace' => 'App\\Controllers\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'bool',
           'public' => true,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'templateFolder',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Application template file directory path
     * 
     * @var string $templateFolder 
    */',
             'namespace' => 'App\\Controllers\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'optimizerFolder',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Application template optimized file directory path
     * 
     * @var string $optimizerFolder 
    */',
             'namespace' => 'App\\Controllers\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'assetsFolder',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Holds template assets folder
     * 
     * @var string $assetsFolder 
    */',
             'namespace' => 'App\\Controllers\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'smartyCompileFolder',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Holds smarty template compile folder
     * 
     * @var string $smartyCompileFolder 
    */',
             'namespace' => 'App\\Controllers\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'smartyConfigFolder',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Holds template config folder
     * 
     * @var string $smartyConfigFolder 
    */',
             'namespace' => 'App\\Controllers\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'smartyCacheFolder',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Holds template cache folder
     * 
     * @var string $smartyCacheFolder 
    */',
             'namespace' => 'App\\Controllers\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/app/Controllers/Utils/Func.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'App\\Controllers\\Utils\\Func',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => 'Luminova\\Base\\BaseFunction',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/app/Controllers/Welcome.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'App\\Controllers\\Welcome',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => 'Luminova\\Base\\BaseViewController',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'page',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'info',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Application/Application.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Application\\Application',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
        0 => 'Luminova\\Template\\TemplateTrait',
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'router',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Router class instance
     *
     * @var Router
     */',
             'namespace' => 'Luminova\\Application',
             'uses' => 
            array (
              'router' => 'Luminova\\Routing\\Router',
              'dotenv' => 'Luminova\\Config\\DotEnv',
              'templatetrait' => 'Luminova\\Template\\TemplateTrait',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => '?Luminova\\Routing\\Router',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Initialize the base application constructor
     *
     * @param string $dir The project root directory
     */',
             'namespace' => 'Luminova\\Application',
             'uses' => 
            array (
              'router' => 'Luminova\\Routing\\Router',
              'dotenv' => 'Luminova\\Config\\DotEnv',
              'templatetrait' => 'Luminova\\Template\\TemplateTrait',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'dir',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getView',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the current view paths, segments uri
     *
     * @return string
     */',
             'namespace' => 'Luminova\\Application',
             'uses' => 
            array (
              'router' => 'Luminova\\Routing\\Router',
              'dotenv' => 'Luminova\\Config\\DotEnv',
              'templatetrait' => 'Luminova\\Template\\TemplateTrait',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getBasePath',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get application base path from router.
     *
     * @return string
     */',
             'namespace' => 'Luminova\\Application',
             'uses' => 
            array (
              'router' => 'Luminova\\Routing\\Router',
              'dotenv' => 'Luminova\\Config\\DotEnv',
              'templatetrait' => 'Luminova\\Template\\TemplateTrait',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getInstance',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the base application instance as a singleton.
     *
     * @param string $dir The project root directory
     * 
     * @return static Application
     */',
             'namespace' => 'Luminova\\Application',
             'uses' => 
            array (
              'router' => 'Luminova\\Routing\\Router',
              'dotenv' => 'Luminova\\Config\\DotEnv',
              'templatetrait' => 'Luminova\\Template\\TemplateTrait',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'static',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'dir',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Application/Services.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Application\\Services',
       'phpDoc' => 
      \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
         'phpDocString' => '/**
 * Services Configuration file.
 *
 * @method static Functions           functions(...$params, bool $shared = true)
 * @method static Functions           func(...$params, bool $shared = true)
 * @method static Configuration       config(...$params, bool $shared = true)
 * @method static Session             session(...$params, bool $shared = true)
 * @method static Task                task(...$params, bool $shared = true)
 * @method static Importer            import(...$params, bool $shared = true)
 * @method static Translator          language($locale, bool $shared = true)
 * @method static $context            $context(...$params, bool $shared = true)
 */',
         'namespace' => 'Luminova\\Application',
         'uses' => 
        array (
          'configuration' => 'Luminova\\Config\\Configuration',
          'task' => 'Luminova\\Time\\Task',
          'functions' => 'Luminova\\Functions\\Functions',
          'ipaddress' => 'Luminova\\Functions\\IPAddress',
          'files' => 'Luminova\\Functions\\Files',
          'document' => 'Luminova\\Functions\\Document',
          'session' => 'Luminova\\Sessions\\Session',
          'importer' => 'Luminova\\Library\\Importer',
          'translator' => 'Luminova\\Languages\\Translator',
          'runtimeexception' => 'RuntimeException',
          'throwable' => 'Throwable',
        ),
         'constUses' => 
        array (
        ),
      )),
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__callStatic',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Dynamically create an instance of the specified service class.
     *
     * @param string $context The context or name of the service.
     * @param mixed ...$params Parameters to pass to the service constructor.
     * @param bool $shared The Last parameter to pass to the service constructor 
     * indicate if it should return a shared instance
     * 
     * @example Services::method(\'foo\', \'bar\', false)
     * @example Services::method(false)
     * 
     * @return object|null An instance of the service class, or null if not found.
     * @throws RuntimeException If failed to instantiate the service.
     */',
             'namespace' => 'Luminova\\Application',
             'uses' => 
            array (
              'configuration' => 'Luminova\\Config\\Configuration',
              'task' => 'Luminova\\Time\\Task',
              'functions' => 'Luminova\\Functions\\Functions',
              'ipaddress' => 'Luminova\\Functions\\IPAddress',
              'files' => 'Luminova\\Functions\\Files',
              'document' => 'Luminova\\Functions\\Document',
              'session' => 'Luminova\\Sessions\\Session',
              'importer' => 'Luminova\\Library\\Importer',
              'translator' => 'Luminova\\Languages\\Translator',
              'runtimeexception' => 'RuntimeException',
              'throwable' => 'Throwable',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => '?object',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'context',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'arguments',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'create',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Create an instance of the specified service class.
     *
     * @param string $context The context or name of the service.
     * @param bool $shared Whether the instance should be shared (cached) or not.
     * @param mixed ...$params Parameters to pass to the service constructor.
     * 
     * @return object|null An instance of the service class, or null if not found.
     * @throws RuntimeException If failed to instantiate the service.
     */',
             'namespace' => 'Luminova\\Application',
             'uses' => 
            array (
              'configuration' => 'Luminova\\Config\\Configuration',
              'task' => 'Luminova\\Time\\Task',
              'functions' => 'Luminova\\Functions\\Functions',
              'ipaddress' => 'Luminova\\Functions\\IPAddress',
              'files' => 'Luminova\\Functions\\Files',
              'document' => 'Luminova\\Functions\\Document',
              'session' => 'Luminova\\Sessions\\Session',
              'importer' => 'Luminova\\Library\\Importer',
              'translator' => 'Luminova\\Languages\\Translator',
              'runtimeexception' => 'RuntimeException',
              'throwable' => 'Throwable',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => '?object',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'context',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'shared',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'params',
               'type' => NULL,
               'byRef' => false,
               'variadic' => true,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'remove',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Clear cached instances of service classes.
     *
     * @param string|null $context Optional. The context or name of the service to clear cache for.
     *                             If null, clears cache for all services.
     * @return void
     */',
             'namespace' => 'Luminova\\Application',
             'uses' => 
            array (
              'configuration' => 'Luminova\\Config\\Configuration',
              'task' => 'Luminova\\Time\\Task',
              'functions' => 'Luminova\\Functions\\Functions',
              'ipaddress' => 'Luminova\\Functions\\IPAddress',
              'files' => 'Luminova\\Functions\\Files',
              'document' => 'Luminova\\Functions\\Document',
              'session' => 'Luminova\\Sessions\\Session',
              'importer' => 'Luminova\\Library\\Importer',
              'translator' => 'Luminova\\Languages\\Translator',
              'runtimeexception' => 'RuntimeException',
              'throwable' => 'Throwable',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'context',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'rest',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Clear all cached instances of service classes.
     *
     * @return void
     */',
             'namespace' => 'Luminova\\Application',
             'uses' => 
            array (
              'configuration' => 'Luminova\\Config\\Configuration',
              'task' => 'Luminova\\Time\\Task',
              'functions' => 'Luminova\\Functions\\Functions',
              'ipaddress' => 'Luminova\\Functions\\IPAddress',
              'files' => 'Luminova\\Functions\\Files',
              'document' => 'Luminova\\Functions\\Document',
              'session' => 'Luminova\\Sessions\\Session',
              'importer' => 'Luminova\\Library\\Importer',
              'translator' => 'Luminova\\Languages\\Translator',
              'runtimeexception' => 'RuntimeException',
              'throwable' => 'Throwable',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Arrays/ArrayCountable.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Arrays\\ArrayCountable',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
        0 => 'Countable',
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
    * @param array $array
    */',
             'namespace' => 'Luminova\\Arrays',
             'uses' => 
            array (
              'countable' => 'Countable',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'array',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'count',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
    * @return int array count
    */',
             'namespace' => 'Luminova\\Arrays',
             'uses' => 
            array (
              'countable' => 'Countable',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'int',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'isNested',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Check if array is a nested array
     * 
     * @return bool 
    */',
             'namespace' => 'Luminova\\Arrays',
             'uses' => 
            array (
              'countable' => 'Countable',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Arrays/ArrayInput.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Arrays\\ArrayInput',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'parameters',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getParameterOption',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'values',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'default',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'hasParameterOption',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'values',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getParameters',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getArguments',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getOptions',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Arrays/ArrayObject.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'ArrayObject',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getColumns',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'array',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'property',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'values',
               'type' => 'array|object',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Arrays/Arrays.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Arrays\\Arrays',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'array',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'get',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'isNested',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Check if array is a nested array
     * 
     * @return bool 
    */',
             'namespace' => 'Luminova\\Arrays',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Base/BaseApplication.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Base\\BaseApplication',
       'phpDoc' => NULL,
       'abstract' => true,
       'final' => false,
       'extends' => 'Luminova\\Application\\Application',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__get',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Magic method getter
     * Get properties from template class 
     *
     * @param string $key property or attribute key
     * 
     * @return ?mixed return property else null
    */',
             'namespace' => 'Luminova\\Base',
             'uses' => 
            array (
              'application' => 'Luminova\\Application\\Application',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Base/BaseCommand.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Base\\BaseCommand',
       'phpDoc' => NULL,
       'abstract' => true,
       'final' => false,
       'extends' => 'Luminova\\Command\\Terminal',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'group',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $group command group
    */',
             'namespace' => 'Luminova\\Base',
             'uses' => 
            array (
              'terminal' => 'Luminova\\Command\\Terminal',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'name',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $name command name
    */',
             'namespace' => 'Luminova\\Base',
             'uses' => 
            array (
              'terminal' => 'Luminova\\Command\\Terminal',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'usage',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string|array $usage command usages
    */',
             'namespace' => 'Luminova\\Base',
             'uses' => 
            array (
              'terminal' => 'Luminova\\Command\\Terminal',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string|array',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'options',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var array $options command options
    */',
             'namespace' => 'Luminova\\Base',
             'uses' => 
            array (
              'terminal' => 'Luminova\\Command\\Terminal',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'array',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'description',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $description command description
    */',
             'namespace' => 'Luminova\\Base',
             'uses' => 
            array (
              'terminal' => 'Luminova\\Command\\Terminal',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'run',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Run a command.
     *
     * @param mixed, string|null> $params
     * 
     * @return int status code 1 or 0
    */',
             'namespace' => 'Luminova\\Base',
             'uses' => 
            array (
              'terminal' => 'Luminova\\Command\\Terminal',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => true,
           'final' => false,
           'static' => false,
           'returnType' => 'int',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'params',
               'type' => '?array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__get',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Magic method getter
     *
     * @param string $key property key
     * 
     * @return mixed return property else null
    */',
             'namespace' => 'Luminova\\Base',
             'uses' => 
            array (
              'terminal' => 'Luminova\\Command\\Terminal',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__isset',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Magic method isset
     * Check if property is set
     *
     * @param string $key property key
     * 
     * @return bool 
    */',
             'namespace' => 'Luminova\\Base',
             'uses' => 
            array (
              'terminal' => 'Luminova\\Command\\Terminal',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Base/BaseConfig.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Base\\BaseConfig',
       'phpDoc' => NULL,
       'abstract' => true,
       'final' => false,
       'extends' => 'Luminova\\Config\\Configuration',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Base/BaseController.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Base\\BaseController',
       'phpDoc' => NULL,
       'abstract' => true,
       'final' => false,
       'extends' => 'Luminova\\Controllers\\ViewController',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'request',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * HTTP request object 
     * @var Request $request 
    */',
             'namespace' => 'Luminova\\Base',
             'uses' => 
            array (
              'viewcontroller' => 'Luminova\\Controllers\\ViewController',
              'request' => 'Luminova\\Http\\Request',
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'application' => 'App\\Controllers\\Application',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => '?Luminova\\Http\\Request',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'validate',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Input validation object 
     * @var InputValidator $validate
    */',
             'namespace' => 'Luminova\\Base',
             'uses' => 
            array (
              'viewcontroller' => 'Luminova\\Controllers\\ViewController',
              'request' => 'Luminova\\Http\\Request',
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'application' => 'App\\Controllers\\Application',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => '?Luminova\\Security\\InputValidator',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'app',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
      * Application instance
      * @var Application $app 
     */',
             'namespace' => 'Luminova\\Base',
             'uses' => 
            array (
              'viewcontroller' => 'Luminova\\Controllers\\ViewController',
              'request' => 'Luminova\\Http\\Request',
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'application' => 'App\\Controllers\\Application',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => '?App\\Controllers\\Application',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Initialize controller instance
     * Make request and validate available global
     * 
     * @var InputValidator $validate $this->validate
     * @var Request $request $this->request
     * @var Request $app  $this->app
    */',
             'namespace' => 'Luminova\\Base',
             'uses' => 
            array (
              'viewcontroller' => 'Luminova\\Controllers\\ViewController',
              'request' => 'Luminova\\Http\\Request',
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'application' => 'App\\Controllers\\Application',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => true,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__get',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Magic method getter
     *
     * @param string $key property key
     * 
     * @return ?mixed return property else null
    */',
             'namespace' => 'Luminova\\Base',
             'uses' => 
            array (
              'viewcontroller' => 'Luminova\\Controllers\\ViewController',
              'request' => 'Luminova\\Http\\Request',
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'application' => 'App\\Controllers\\Application',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__isset',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Magic method isset
     * Check if property is set
     *
     * @param string $key property key
     * 
     * @return bool 
    */',
             'namespace' => 'Luminova\\Base',
             'uses' => 
            array (
              'viewcontroller' => 'Luminova\\Controllers\\ViewController',
              'request' => 'Luminova\\Http\\Request',
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'application' => 'App\\Controllers\\Application',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Base/BaseFunction.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Base\\BaseFunction',
       'phpDoc' => NULL,
       'abstract' => true,
       'final' => false,
       'extends' => 'Luminova\\Functions\\Functions',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'files',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns an instance of the Files class.
     *
     * @return Files
     */',
             'namespace' => 'Luminova\\Base',
             'uses' => 
            array (
              'functions' => 'Luminova\\Functions\\Functions',
              'ipaddress' => 'Luminova\\Functions\\IPAddress',
              'files' => 'Luminova\\Functions\\Files',
              'document' => 'Luminova\\Functions\\Document',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'Luminova\\Functions\\Files',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'ip',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns an instance of the IPAddress class.
     *
     * @return IPAddress
     */',
             'namespace' => 'Luminova\\Base',
             'uses' => 
            array (
              'functions' => 'Luminova\\Functions\\Functions',
              'ipaddress' => 'Luminova\\Functions\\IPAddress',
              'files' => 'Luminova\\Functions\\Files',
              'document' => 'Luminova\\Functions\\Document',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'Luminova\\Functions\\IPAddress',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'document',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns an instance of the Document class.
     *
     * @return Document
     */',
             'namespace' => 'Luminova\\Base',
             'uses' => 
            array (
              'functions' => 'Luminova\\Functions\\Functions',
              'ipaddress' => 'Luminova\\Functions\\IPAddress',
              'files' => 'Luminova\\Functions\\Files',
              'document' => 'Luminova\\Functions\\Document',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'Luminova\\Functions\\Document',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Base/BaseModel.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Base\\BaseModel',
       'phpDoc' => NULL,
       'abstract' => true,
       'final' => false,
       'extends' => 'Luminova\\Models\\Model',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__get',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Magic method getter
     *
     * @param string $key property key
     * 
     * @return ?mixed return property else null
    */',
             'namespace' => 'Luminova\\Base',
             'uses' => 
            array (
              'model' => 'Luminova\\Models\\Model',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__isset',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Magic method isset
     * Check if property is set
     *
     * @param string $key property key
     * 
     * @return bool 
    */',
             'namespace' => 'Luminova\\Base',
             'uses' => 
            array (
              'model' => 'Luminova\\Models\\Model',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Base/BaseViewController.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Base\\BaseViewController',
       'phpDoc' => NULL,
       'abstract' => true,
       'final' => false,
       'extends' => 'Luminova\\Controllers\\ViewController',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__get',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Magic method getter
     *
     * @param string $key property key
     * 
     * @return ?mixed return property else null
    */',
             'namespace' => 'Luminova\\Base',
             'uses' => 
            array (
              'viewcontroller' => 'Luminova\\Controllers\\ViewController',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__isset',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Magic method isset
     * Check if property is set
     *
     * @param string $key property key
     * 
     * @return bool 
    */',
             'namespace' => 'Luminova\\Base',
             'uses' => 
            array (
              'viewcontroller' => 'Luminova\\Controllers\\ViewController',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Cache/Cache.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Cache\\Cache',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'FILE',
               'value' => '"FileCache"',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
    * Engin type for file cache
    * @var string FILE
    */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'filecache' => 'Luminova\\Cache\\FileCache',
              'memorycache' => 'Luminova\\Cache\\MemoryCache',
              'classexception' => 'Luminova\\Exceptions\\ClassException',
            ),
             'constUses' => 
            array (
            ),
          )),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'MEM',
               'value' => '"MemoryCache"',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
    * Engin type for Memcached
    * @var string MEM
    */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'filecache' => 'Luminova\\Cache\\FileCache',
              'memorycache' => 'Luminova\\Cache\\MemoryCache',
              'classexception' => 'Luminova\\Exceptions\\ClassException',
            ),
             'constUses' => 
            array (
            ),
          )),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'engine',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
    * Engin instance
    * @var object $engine
    */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'filecache' => 'Luminova\\Cache\\FileCache',
              'memorycache' => 'Luminova\\Cache\\MemoryCache',
              'classexception' => 'Luminova\\Exceptions\\ClassException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => NULL,
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
    * Cache constructor.
    *
    * @param string $engine The cache engine to use (e.g., self::FILE or self::MEM).
    */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'filecache' => 'Luminova\\Cache\\FileCache',
              'memorycache' => 'Luminova\\Cache\\MemoryCache',
              'classexception' => 'Luminova\\Exceptions\\ClassException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'engine',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getInstance',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get an instance of the cache engine.
     * @param string $engine The cache engine to use (e.g., self::FILE or self::MEM).
     * 
     * @return self self::$instance The cache engine instance.
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'filecache' => 'Luminova\\Cache\\FileCache',
              'memorycache' => 'Luminova\\Cache\\MemoryCache',
              'classexception' => 'Luminova\\Exceptions\\ClassException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'engine',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Cache/Compress.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Cache\\Compress',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'JSON',
               'value' => '"application/json;"',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
	* holds json content type
	* @var string JSON
	*/',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
            ),
             'constUses' => 
            array (
            ),
          )),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'TEXT',
               'value' => '"text/plain;"',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
	* holds text content type
	* @var string TEXT
	*/',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
            ),
             'constUses' => 
            array (
            ),
          )),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'HTML',
               'value' => '"text/html;"',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
	* holds html content type
	* @var string HTML
	*/',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
            ),
             'constUses' => 
            array (
            ),
          )),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'XML',
               'value' => '\'application/xml\'',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
	* holds xml content type
	* @var string XML
	*/',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
            ),
             'constUses' => 
            array (
            ),
          )),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Class constructor.
     * Initializes default settings for the response headers and cache control.
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'useGzip',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Enable or disable Gzip compression.
     *
     * @param bool $gzip Enable Gzip compression (true) or disable it (false).
     * @return Compress Returns the class instance for method chaining.
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'Luminova\\Cache\\Compress',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'gzip',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setExpires',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set the expiration offset for the Cache-Control header.
     *
     * @param int $offset Cache expiration offset in seconds.
     * @return Compress Returns the class instance for method chaining.
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'Luminova\\Cache\\Compress',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'offset',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setCacheControl',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set the Cache-Control header.
     *
     * @param string $cacheControl Cache-Control header value.
     * @return Compress Returns the class instance for method chaining.
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'Luminova\\Cache\\Compress',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'cacheControl',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setCompressionLevel',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * sets compression level
     *
     * @param int $level Level
     * @return Compress $this
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'Luminova\\Cache\\Compress',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'level',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        9 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setIgnoreCodeblock',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * sets ignore user code block
     *
     * @param bool $ignore
     * @return Compress Returns the class instance for method chaining.
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'Luminova\\Cache\\Compress',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'ignore',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        10 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getCompressed',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get compressed content
     * @return mixed compressed content $this->compressedContent
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        11 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getMinified',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get minified content
     * @return string minified content $this->minifiedContent
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        12 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'compress',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Compresses the buffer content and adds necessary headers to optimize the response.
     *
     * @param string|array|object $data The content to compress (can be an array or object for JSON response).
     * @param string $contentType The expected content type for the response.
     * @return string The compressed content for output.
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'data',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'contentType',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        13 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getInfo',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get page header information
     * 
     * @return array
    */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        14 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'html',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Send the output in HTML format.
     *
     * @param string|array|object $body The content body to be sent in the response.
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'body',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        15 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'text',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Send the output in text format.
     *
     * @param string|array|object $body The content body to be sent in the response.
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'body',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        16 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'xml',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Send the output in XML format.
     *
     * @param string|array|object $body The content body to be sent in the response.
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'body',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        17 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'json',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Send the output in JSON format.
     *
     * @param string|array|object $body The content body to be sent in the response.
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'body',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        18 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'run',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Send the output based on the specified content type.
     *
     * @param string|array|object $body The content body to be sent in the response.
     * @param string $contentType The expected content type for the response.
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'body',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'contentType',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        19 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'end',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * End output buffering and send the response.
     *
     * @param string $contentType The expected content type for the response.
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'contentType',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        20 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'startMinify',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Start output buffering and minify the content by removing unwanted tags and whitespace.
    */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        21 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'minify',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Minify the given content by removing unwanted tags and whitespace.
     *
     * @param string $content The content to minify.
     * @return string minified content.
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'content',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        22 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'minifyIgnoreCodeblock',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Minify the given content by removing unwanted tags and whitespace.
     * Ignore html <code></code> block
     * @param string $content The content to minify.
     * @return string minified content.
    */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'content',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Cache/FileCache.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Cache\\FileCache',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'TTL_7DAYS',
               'value' => '7 * 24 * 60 * 60',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Cache expiry time 7 days
     * @var int TTL_7DAYS constant
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'filecacheitem' => 'Luminova\\Cache\\FileCacheItem',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'generator' => 'Generator',
            ),
             'constUses' => 
            array (
            ),
          )),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'TTL_24HR',
               'value' => '24 * 60 * 60',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Cache expiry time 24 hours
     * @var int TTL_24HR constant
    */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'filecacheitem' => 'Luminova\\Cache\\FileCacheItem',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'generator' => 'Generator',
            ),
             'constUses' => 
            array (
            ),
          )),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'TTL_30MIN',
               'value' => '30 * 60',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Cache expiry time 30 minutes 
     * @var int TTL_30MIN constant
    */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'filecacheitem' => 'Luminova\\Cache\\FileCacheItem',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'generator' => 'Generator',
            ),
             'constUses' => 
            array (
            ),
          )),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'PHP',
               'value' => '".catch.php"',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Hold the cache extension type PHP
     * @var string PHP constant
    */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'filecacheitem' => 'Luminova\\Cache\\FileCacheItem',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'generator' => 'Generator',
            ),
             'constUses' => 
            array (
            ),
          )),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'JSON',
               'value' => '".json"',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Hold the cache extension type JSON
     * @var string JSON constant
    */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'filecacheitem' => 'Luminova\\Cache\\FileCacheItem',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'generator' => 'Generator',
            ),
             'constUses' => 
            array (
            ),
          )),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'TEXT',
               'value' => '".txt"',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Hold the cache extension TEXT
     * @var string TEXT constant
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'filecacheitem' => 'Luminova\\Cache\\FileCacheItem',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'generator' => 'Generator',
            ),
             'constUses' => 
            array (
            ),
          )),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Constructor.
     * 
     * @param string $filename cache filename to hash
     * @param string $filepath cache directory.
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'filecacheitem' => 'Luminova\\Cache\\FileCacheItem',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'generator' => 'Generator',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'filename',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'filepath',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getInstance',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get static Singleton Class.
     * 
     * @param string $filename cache filename to hash
     * @param string $filepath cache directory.
     * 
     * @param self $instance Instance
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'filecacheitem' => 'Luminova\\Cache\\FileCacheItem',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'generator' => 'Generator',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'filename',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'filepath',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setCacheLocation',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set the new cache directory path
     * @param string $path cache directory must end with 
     * 
     * @return self $this
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'filecacheitem' => 'Luminova\\Cache\\FileCacheItem',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'generator' => 'Generator',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'path',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        9 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setFilename',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Sets the new cache file name.
     * 
     * @param string $name cache filename hash value
     * 
     * @return self $this
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'filecacheitem' => 'Luminova\\Cache\\FileCacheItem',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'generator' => 'Generator',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'name',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        10 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'hashFilename',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Generate hash name for cache 
     * 
     * @param string $name cache filename to hash
     * 
     * @return string hashed name with prefix
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'filecacheitem' => 'Luminova\\Cache\\FileCacheItem',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'generator' => 'Generator',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'name',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        11 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setExtension',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Sets the cache file extension type
     * 
     * @param string $extension 
     * 
     * @return self $this
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'filecacheitem' => 'Luminova\\Cache\\FileCacheItem',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'generator' => 'Generator',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'extension',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        12 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setDebugMode',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Sets the cache debugging mode
     * 
     * @param bool $mode 
     * 
     * @return self $this
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'filecacheitem' => 'Luminova\\Cache\\FileCacheItem',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'generator' => 'Generator',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'mode',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        13 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setEnableCache',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Sets the cache state mode, if disabled cache system will always return new data not cached version 
     * 
     * @param bool $enable 
     * 
     * @return self $this
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'filecacheitem' => 'Luminova\\Cache\\FileCacheItem',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'generator' => 'Generator',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'enable',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        14 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setExpire',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Sets the cache expiry time duration
     * @param int $time 
     * @return self $this
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'filecacheitem' => 'Luminova\\Cache\\FileCacheItem',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'generator' => 'Generator',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'time',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        15 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setLock',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Sets the cache lock
     * 
     * @param bool $lock lock catch to avoid deletion even when cache time expire
     * 
     * @return self $this
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'filecacheitem' => 'Luminova\\Cache\\FileCacheItem',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'generator' => 'Generator',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'lock',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        16 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'enableBase64',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Enable the cache to store data in base64 encoded.
     * 
     * @param bool $encode true or false
     * 
     * @return self $this
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'filecacheitem' => 'Luminova\\Cache\\FileCacheItem',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'generator' => 'Generator',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'encode',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        17 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'enableDeleteExpired',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Enable the cache delete expired data
     * 
     * @param bool $allow true or false
     * 
     * @return self $this
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'filecacheitem' => 'Luminova\\Cache\\FileCacheItem',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'generator' => 'Generator',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'allow',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        18 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'enableSecureAccess',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Enable the cache to store secure data in php file extension.
     * 
     * @param bool $secure true or false
     * 
     * @return self $this
    */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'filecacheitem' => 'Luminova\\Cache\\FileCacheItem',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'generator' => 'Generator',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'secure',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        19 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getCacheFilePath',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Gets Combines directory, filename and extension into a full filepath
     * 
     * @return string
    */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'filecacheitem' => 'Luminova\\Cache\\FileCacheItem',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'generator' => 'Generator',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        20 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'onExpired',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Loads, create, update and delete cache with fewer options
     * 
     * @param string $key cache key
     * @param callable $cacheCallback Callback called when data needs to be refreshed.
     * 
     * @return mixed Data currently stored under key
     * @throws ErrorException if the file cannot be saved
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'filecacheitem' => 'Luminova\\Cache\\FileCacheItem',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'generator' => 'Generator',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'cacheCallback',
               'type' => 'callable',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        21 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'onCache',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Loads, create, update and delete cache with FileCacheItem model
     * 
     * @param string $key cache key
     * @param callable $cacheCallback Callback called when data needs to be refreshed.
     * 
     * @return mixed Data currently stored under key
     * @throws ErrorException if the file cannot be saved
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'filecacheitem' => 'Luminova\\Cache\\FileCacheItem',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'generator' => 'Generator',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'cacheCallback',
               'type' => 'callable',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        22 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'get',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Loads, create, update and delete cache with full options
     * 
     * @param string $key cache key
     * @param callable $cacheCallback Callback called when data needs to be refreshed.
     * @param int $time cache expiry time
     * @param bool $lock lock catch to avoid deletion even when cache time expire
     * 
     * @return mixed|null Data currently stored under key
     * @throws ErrorException if the file cannot be saved
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'filecacheitem' => 'Luminova\\Cache\\FileCacheItem',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'generator' => 'Generator',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'cacheCallback',
               'type' => 'callable',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'time',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            3 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'lock',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        23 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'create',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Creates, Reloads and retrieve cache once class is created
     * 
     * @return self $this
     * @throws ErrorException if there is a problem loading the cache
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'filecacheitem' => 'Luminova\\Cache\\FileCacheItem',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'generator' => 'Generator',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        24 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'hasCached',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Checks if cache key exist
     * 
     * @param string $key cache key
     * 
     * @return bool true or false
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'filecacheitem' => 'Luminova\\Cache\\FileCacheItem',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'generator' => 'Generator',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        25 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'removeIfExpired',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Remove expired cache by key
     * 
     * @return int number of deleted keys
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'filecacheitem' => 'Luminova\\Cache\\FileCacheItem',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'generator' => 'Generator',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'int',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        26 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'hasExpired',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Checks if the cache timestamp has expired by key
     * 
     * @param string $key cache key
     * 
     * @return bool true or false
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'filecacheitem' => 'Luminova\\Cache\\FileCacheItem',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'generator' => 'Generator',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        27 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'remove',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Deletes data associated with $key
     * 
     * @param string $key cache key
     * 
     * @return bool true or false
     * @throws ErrorException if the file cannot be saved
    */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'filecacheitem' => 'Luminova\\Cache\\FileCacheItem',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'generator' => 'Generator',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        28 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'removeList',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Deletes data associated array of keys
     * 
     * @param array $array cache keys
     * 
     * @return Generator
     * @throws ErrorException if the file cannot be saved
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'filecacheitem' => 'Luminova\\Cache\\FileCacheItem',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'generator' => 'Generator',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'Generator',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'array',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        29 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'retrieveCache',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Retrieve cache data from disk
     * 
     * @param string $key cache key
     * 
     * @return mixed returns data if $key is valid and not expired, NULL otherwise
     * @throws ErrorException if the file cannot be saved
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'filecacheitem' => 'Luminova\\Cache\\FileCacheItem',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'generator' => 'Generator',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        30 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'clearCache',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Clears the cache
     * 
     * @return void
     * @throws ErrorException if the file cannot be saved
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'filecacheitem' => 'Luminova\\Cache\\FileCacheItem',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'generator' => 'Generator',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        31 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'removeCache',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Remove cache file
     * 
     * @return bool true if file path exist else false
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'filecacheitem' => 'Luminova\\Cache\\FileCacheItem',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'generator' => 'Generator',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        32 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'removeCacheDisk',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Remove cache file from disk with full path
     * 
     * @param string $path cache full path /
     * @param array $filenames cache file array names
     * @param string $extension cache file extension type
     * 
     * @return bool
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'filecacheitem' => 'Luminova\\Cache\\FileCacheItem',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'generator' => 'Generator',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'path',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'filenames',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'extension',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Cache/FileCacheItem.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Cache\\FileCacheItem',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setExpiry',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set the expiration time for the cache item.
     *
     * @param int $expiry The expiration time in seconds.
     * @return self
    */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'expiry',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setLock',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set the lock status for the cache item.
     *
     * @param bool $lock The lock status (true for locked, false for unlocked).
     * @return self
    */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'lock',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setData',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set the data for the cache item.
     *
     * @param mixed $data The data to be cached.
     * @return self
    */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'data',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getExpiry',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the expiration time of the cache item.
     *
     * @return int The expiration time in seconds.
    */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'int',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getLock',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Check if the cache item is locked.
     *
     * @return bool The lock status (true if locked, false if unlocked).
    */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getData',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the data stored in the cache item.
     *
     * @return mixed The cached data.
    */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Cache/MemoryCache.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Cache\\MemoryCache',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * MemoryCache constructor.
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'memcached' => 'Memcached',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setConfig',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set Memcached server configuration.
     *
     * @param string $host Memcached server host.
     * @param int $port Memcached server port.
     * 
     * @return self
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'memcached' => 'Memcached',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'host',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'port',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'addConfig',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set Memcached server configuration from an array.
     *
     * @param array $config Memcached server configuration array.
     * @return self
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'memcached' => 'Memcached',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'config',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'connect',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Initialize the Memcached engine with the configured servers.
     *
     * @return self
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'memcached' => 'Memcached',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setExpire',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set the cache expiration time duration in seconds.
     *
     * @param int $time Cache expiration time in seconds.
     * 
     * @return self
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'memcached' => 'Memcached',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'time',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'onExpired',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Retrieve cached data or generate it using a callback if not found.
     *
     * @param string $key Cache key.
     * @param callable $cacheCallback Callback function to generate the data.
     * 
     * @return mixed Cached or generated data.
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'memcached' => 'Memcached',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'cacheCallback',
               'type' => 'callable',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'withExpired',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Retrieve cached data or generate it using a callback if not found with a custom expiration time.
     *
     * @param string $key Cache key.
     * @param callable $cacheCallback Callback function to generate the data.
     * @param int $expiration Custom cache expiration time in seconds.
     * 
     * @return mixed Cached or generated data.
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'memcached' => 'Memcached',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'cacheCallback',
               'type' => 'callable',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'expiration',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'writeCache',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Write data to the cache with a custom expiration time.
     *
     * @param string $key Cache key.
     * @param mixed $value Data to be cached.
     * @param int $expiration Cache expiration time in seconds.
     * @return bool True on success, false on failure.
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'memcached' => 'Memcached',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'value',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'expiration',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'remove',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Remove data associated with a cache key.
     *
     * @param string $key Cache key to remove.
     * @return bool True on success, false on failure.
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'memcached' => 'Memcached',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        9 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'removeList',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Remove data associated with an array of cache keys.
     *
     * @param array $array Array of cache keys to remove.
     * @return void
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'memcached' => 'Memcached',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'array',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        10 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'clearCache',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Clear the entire cache.
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'memcached' => 'Memcached',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        11 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'close',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Close the Memcached connection.
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'memcached' => 'Memcached',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Cache/Optimizer.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Cache\\Optimizer',
       'phpDoc' => 
      \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
         'phpDocString' => '/**
 *
 * @author Peter Chigozie(NG) peterujah
 * @copyright Copyright (c), 2021 Peter(NG) peterujah
 * @license MIT public license
 */',
         'namespace' => 'Luminova\\Cache',
         'uses' => 
        array (
          'header' => 'Luminova\\Http\\Header',
        ),
         'constUses' => 
        array (
        ),
      )),
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Class constructor.
     *
     * @param int $cacheExpiration The expiration time for cached files in seconds (default: 24 hours).
     * @param string $cacheDir The directory where cached files will be stored (default: \'cache\').
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'cacheExpiration',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'cacheDir',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getCacheLocation',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the file path for the cache based on the current request URI.
     *
     * @param string $extension file extension
     * 
     * @return string The file path for the cache.
    */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'extension',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getCacheFilepath',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the cache directory path.
     *
     * @return string The cache directory path.
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'hasCache',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Check if the cached file is still valid based on its expiration time.
     *
     * @return bool True if the cache is still valid; false otherwise.
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getFileTime',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the formatted file modification time.
     *
     * @return string Formatted file modification time.
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getCache',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Load the content from the cache file and exit the script.
     * 
     * @return bool True if loading was successful; false otherwise.
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'info',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'saveCache',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Save the content to the cache file.
     *
     * @param string $content The content to be saved to the cache file.
     * @param string $info Framework copyright information
     *
     * @return bool True if saving was successful; false otherwise.
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'content',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'info',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'cacheData',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getKey',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the cache key.
     *
     * @return string The cache key.
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setKey',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set the cache key.
     *
     * @param string $key The key to set.
     *
     * @return void
     */',
             'namespace' => 'Luminova\\Cache',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Colors.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Command\\Colors',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'foregroundColors',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Text Foreground color list
     *
     * @var array<string, string>
     */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => NULL,
           'public' => false,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'backgroundColors',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Text Background color list
     *
     * @var array<string, string>
     */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => NULL,
           'public' => false,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'apply',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns the given text with the correct color codes for a foreground and
     * optionally a background color.
     *
     * @param string $text Text to color
     * @param int|null $format Optionally apply text formatting.
     * @param string $foreground Foreground color name
     * @param string|null $background Optional background color name
     * 
     *
     * @return string A colored text if color is supported
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'text',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'format',
               'type' => '?int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'foreground',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            3 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'background',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Commands.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Command\\Commands',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'run',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Run console command
     * @param Terminal $cli novakit cli instance
     * @param array $options Command options
     * 
     * @return int
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'terminal' => 'Luminova\\Command\\Terminal',
              'server' => 'Luminova\\Command\\Novakit\\Server',
              'help' => 'Luminova\\Command\\Novakit\\Help',
              'lists' => 'Luminova\\Command\\Novakit\\Lists',
              'database' => 'Luminova\\Command\\Novakit\\Database',
              'generators' => 'Luminova\\Command\\Novakit\\Generators',
              'availablecommands' => 'Luminova\\Command\\Novakit\\AvailableCommands',
              'closure' => 'Closure',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'int',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'cli',
               'type' => 'Luminova\\Command\\Terminal',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'options',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getCommand',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'array',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'command',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'has',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'command',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'get',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'array',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'command',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Console.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Command\\Console',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Initialize console instance
     * 
     * @param bool $noHeader Suppress header if no header is detected
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'terminal' => 'Luminova\\Command\\Terminal',
              'commands' => 'Luminova\\Command\\Commands',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'noHeader',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getTerminal',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get novakit static CLI instance 
     * 
     * @return Terminal
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'terminal' => 'Luminova\\Command\\Terminal',
              'commands' => 'Luminova\\Command\\Commands',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'Luminova\\Command\\Terminal',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'run',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Run CLI
     * @param array $commands commands to execute
     * 
     * @return void
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'terminal' => 'Luminova\\Command\\Terminal',
              'commands' => 'Luminova\\Command\\Commands',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'commands',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Novakit/AvailableCommands.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Command\\Novakit\\AvailableCommands',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'commands',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * The found commands.
     *
     * @var array
    */',
             'namespace' => 'Luminova\\Command\\Novakit',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => NULL,
           'public' => false,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getCommands',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'get',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'array',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'has',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'command',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Novakit/Database.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Command\\Novakit\\Database',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => 'Luminova\\Base\\BaseCommand',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'group',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $group command group
    */',
             'namespace' => 'Luminova\\Command\\Novakit',
             'uses' => 
            array (
              'terminal' => 'Luminova\\Command\\Terminal',
              'basecommand' => 'Luminova\\Base\\BaseCommand',
              'availablecommands' => 'Luminova\\Command\\Novakit\\AvailableCommands',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'name',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $name command name
    */',
             'namespace' => 'Luminova\\Command\\Novakit',
             'uses' => 
            array (
              'terminal' => 'Luminova\\Command\\Terminal',
              'basecommand' => 'Luminova\\Base\\BaseCommand',
              'availablecommands' => 'Luminova\\Command\\Novakit\\AvailableCommands',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'options',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Options
     *
     * @var array<string, string>
    */',
             'namespace' => 'Luminova\\Command\\Novakit',
             'uses' => 
            array (
              'terminal' => 'Luminova\\Command\\Terminal',
              'basecommand' => 'Luminova\\Base\\BaseCommand',
              'availablecommands' => 'Luminova\\Command\\Novakit\\AvailableCommands',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'array',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'run',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @param array $options terminal options
     * 
     * @return int 
    */',
             'namespace' => 'Luminova\\Command\\Novakit',
             'uses' => 
            array (
              'terminal' => 'Luminova\\Command\\Terminal',
              'basecommand' => 'Luminova\\Base\\BaseCommand',
              'availablecommands' => 'Luminova\\Command\\Novakit\\AvailableCommands',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'int',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'params',
               'type' => '?array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Novakit/Generators.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Command\\Novakit\\Generators',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => 'Luminova\\Base\\BaseCommand',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'group',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $group command group
    */',
             'namespace' => 'Luminova\\Command\\Novakit',
             'uses' => 
            array (
              'terminal' => 'Luminova\\Command\\Terminal',
              'basecommand' => 'Luminova\\Base\\BaseCommand',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'availablecommands' => 'Luminova\\Command\\Novakit\\AvailableCommands',
              'closure' => 'Closure',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'name',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $name command name
    */',
             'namespace' => 'Luminova\\Command\\Novakit',
             'uses' => 
            array (
              'terminal' => 'Luminova\\Command\\Terminal',
              'basecommand' => 'Luminova\\Base\\BaseCommand',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'availablecommands' => 'Luminova\\Command\\Novakit\\AvailableCommands',
              'closure' => 'Closure',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'options',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Options
     *
     * @var array<string, string>
    */',
             'namespace' => 'Luminova\\Command\\Novakit',
             'uses' => 
            array (
              'terminal' => 'Luminova\\Command\\Terminal',
              'basecommand' => 'Luminova\\Base\\BaseCommand',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'availablecommands' => 'Luminova\\Command\\Novakit\\AvailableCommands',
              'closure' => 'Closure',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'array',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'usages',
          ),
           'phpDoc' => NULL,
           'type' => 'string|array',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'description',
          ),
           'phpDoc' => NULL,
           'type' => 'string',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'run',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @param array $options terminal options
     * 
     * @return int 
    */',
             'namespace' => 'Luminova\\Command\\Novakit',
             'uses' => 
            array (
              'terminal' => 'Luminova\\Command\\Terminal',
              'basecommand' => 'Luminova\\Base\\BaseCommand',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'availablecommands' => 'Luminova\\Command\\Novakit\\AvailableCommands',
              'closure' => 'Closure',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'int',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'options',
               'type' => '?array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Novakit/Help.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Command\\Novakit\\Help',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => 'Luminova\\Base\\BaseCommand',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'group',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $group command group
    */',
             'namespace' => 'Luminova\\Command\\Novakit',
             'uses' => 
            array (
              'terminal' => 'Luminova\\Command\\Terminal',
              'basecommand' => 'Luminova\\Base\\BaseCommand',
              'availablecommands' => 'Luminova\\Command\\Novakit\\AvailableCommands',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'name',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $name command name
    */',
             'namespace' => 'Luminova\\Command\\Novakit',
             'uses' => 
            array (
              'terminal' => 'Luminova\\Command\\Terminal',
              'basecommand' => 'Luminova\\Base\\BaseCommand',
              'availablecommands' => 'Luminova\\Command\\Novakit\\AvailableCommands',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'options',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Options
     *
     * @var array<string, string>
    */',
             'namespace' => 'Luminova\\Command\\Novakit',
             'uses' => 
            array (
              'terminal' => 'Luminova\\Command\\Terminal',
              'basecommand' => 'Luminova\\Base\\BaseCommand',
              'availablecommands' => 'Luminova\\Command\\Novakit\\AvailableCommands',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'array',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'run',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @param array $params terminal options
     * 
     * @return int 
    */',
             'namespace' => 'Luminova\\Command\\Novakit',
             'uses' => 
            array (
              'terminal' => 'Luminova\\Command\\Terminal',
              'basecommand' => 'Luminova\\Base\\BaseCommand',
              'availablecommands' => 'Luminova\\Command\\Novakit\\AvailableCommands',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'int',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'params',
               'type' => '?array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Novakit/Lists.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Command\\Novakit\\Lists',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => 'Luminova\\Base\\BaseCommand',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'group',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $group command group
    */',
             'namespace' => 'Luminova\\Command\\Novakit',
             'uses' => 
            array (
              'terminal' => 'Luminova\\Command\\Terminal',
              'basecommand' => 'Luminova\\Base\\BaseCommand',
              'textutils' => 'Luminova\\Command\\TextUtils',
              'availablecommands' => 'Luminova\\Command\\Novakit\\AvailableCommands',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'name',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $name command name
    */',
             'namespace' => 'Luminova\\Command\\Novakit',
             'uses' => 
            array (
              'terminal' => 'Luminova\\Command\\Terminal',
              'basecommand' => 'Luminova\\Base\\BaseCommand',
              'textutils' => 'Luminova\\Command\\TextUtils',
              'availablecommands' => 'Luminova\\Command\\Novakit\\AvailableCommands',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'options',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Options
     *
     * @var array<string, string>
    */',
             'namespace' => 'Luminova\\Command\\Novakit',
             'uses' => 
            array (
              'terminal' => 'Luminova\\Command\\Terminal',
              'basecommand' => 'Luminova\\Base\\BaseCommand',
              'textutils' => 'Luminova\\Command\\TextUtils',
              'availablecommands' => 'Luminova\\Command\\Novakit\\AvailableCommands',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'array',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'usages',
          ),
           'phpDoc' => NULL,
           'type' => 'string|array',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'run',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @param array $params terminal options
     * 
     * @return int 
    */',
             'namespace' => 'Luminova\\Command\\Novakit',
             'uses' => 
            array (
              'terminal' => 'Luminova\\Command\\Terminal',
              'basecommand' => 'Luminova\\Base\\BaseCommand',
              'textutils' => 'Luminova\\Command\\TextUtils',
              'availablecommands' => 'Luminova\\Command\\Novakit\\AvailableCommands',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'int',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'params',
               'type' => '?array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'listCommands',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Novakit/Server.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Command\\Novakit\\Server',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => 'Luminova\\Base\\BaseCommand',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'group',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $group command group
    */',
             'namespace' => 'Luminova\\Command\\Novakit',
             'uses' => 
            array (
              'terminal' => 'Luminova\\Command\\Terminal',
              'basecommand' => 'Luminova\\Base\\BaseCommand',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'name',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $name command name
    */',
             'namespace' => 'Luminova\\Command\\Novakit',
             'uses' => 
            array (
              'terminal' => 'Luminova\\Command\\Terminal',
              'basecommand' => 'Luminova\\Base\\BaseCommand',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'options',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Options
     *
     * @var array<string, string>
    */',
             'namespace' => 'Luminova\\Command\\Novakit',
             'uses' => 
            array (
              'terminal' => 'Luminova\\Command\\Terminal',
              'basecommand' => 'Luminova\\Base\\BaseCommand',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'array',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'run',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @param array $options terminal options
     * 
     * @return int 
    */',
             'namespace' => 'Luminova\\Command\\Novakit',
             'uses' => 
            array (
              'terminal' => 'Luminova\\Command\\Terminal',
              'basecommand' => 'Luminova\\Base\\BaseCommand',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'int',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'params',
               'type' => '?array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/Terminal.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Command\\Terminal',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'height',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Height of terminal visible window
     *
     * @var int|null $height
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => NULL,
           'public' => false,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'width',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Width of terminal visible window
     *
     * @var int|null $width
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => NULL,
           'public' => false,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'isReadline',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Is the readline library on the system?
     *
     * @var bool
     */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => NULL,
           'public' => true,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'waitMessage',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Prompt message display 
     *
     * @var string $waitMessage
     */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => NULL,
           'public' => true,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'isNewline',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Write in a new line enabled
     *
     * @var bool $isNewline
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => NULL,
           'public' => false,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'isColored',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Is colored text supported
     *
     * @var bool $isColored
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => NULL,
           'public' => false,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'commandsOptions',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Passed command line arguments
     * And infos about command
     *
     * @var array $commandsOptions
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => NULL,
           'public' => false,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'waiting',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Show a waiting countdown, intentionally freeze screen while waiting
     * Or ask user for a key press to continue.
     * 
     * Examples
     * 
     * @example $this->waiting(20, true); show waiting for 20 seconds with countdown message
     * @example $this->waiting(0, false); show waiting message till user press any key
     * @example $this->waiting(20, false); show waiting for 20 seconds with a freezed screen
     *
     * @param int  $seconds Number of seconds for waiting
     * @param bool $countdown Show waiting countdown
     *
     * @return void
     */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'seconds',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'countdown',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        9 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'progress',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Displays a progress bar on the CLI.
     * Progress should be called in a loop
     * Or use progressWatch()
     * 
     * Examples 
     * 
     * @example $this->progress(1, 10, true); Show progress bar line with beep when completed
     * @example $this->progress(1, 10, false); Show progress bar line without beep when completed
     *
     * @param int|bool $progressLine Current loop index number or false to terminate the progress bar
     * @param int|null $progressCount Total count of progress bar to show or null to on termination
     * @param bool $beep Beep when progress is completed, default is true
     *
     * @return float|int
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'int|float',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'progressLine',
               'type' => 'int|bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'progressCount',
               'type' => '?int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'beep',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        10 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'progressWatch',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Displays a progress bar on the CLI with a callback functions
     * Progress shouldn\'t be called in a loop
     * You can pass your function to execute in $stepCallback callback function
     * This is useful when you just want to display a progress bar 
     * and execute next method when it finished
     *
     * Examples 
     * 
     * @example $this->progressWatch(100, $onFinish, $onProgress, true) Show 100 lines of progress bar with a callbacks and beep on finish
     * 
     * @param int $progressCount Total count of progress bar to show
     * @param ?callable $onFinish Execute callback when progress finished
     * @param ?callable $onProgress Execute callback on each progress step
     * @param bool $beep Beep when progress is completed, default is true
     *
     * @return void
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'progressCount',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'onFinish',
               'type' => '?callable',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'onProgress',
               'type' => '?callable',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            3 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'beep',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        11 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'beeps',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Beeps a certain number of times.
     *
     * Examples
     * 
     * @example $this->beeps(1) Beep once 
     * 
     * @param int $num The number of times to beep
     *
     * @return void
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'num',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        12 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'prompt',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Prompt for user for input.
     * Pass options as an array ["YES", "NO]
     * You can make a colored options by use the array key for color name ["green" => "YES","red" => "NO"]
     *
     * Examples
     *
     * @example $name = $this->prompt(\'What is your name?\'); Prompt user to enter their name
     * @example $color = $this->prompt(\'Are you sure you want to continue?\', ["green" => "YES","red" => "NO"]); Prompt user to choose any option and specify each option color in array key
     * @example $color = $this->prompt(\'What is your gender?\', [\'male\',\'female\']); Prompt user to select their gender, no colored text will be used
     * @example $email = $this->prompt(\'Are you sure you want to continue?\', ["YES", "NO], \'required|in_array(YES,NO)\'); Prompt user to choose any option and pass a validation
     *
     * @param string $message Prompt message
     * @param array $options  Options to prompt selection, 
     * @param string|null $validations Validation rules
     *
     * @return string The user input
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'message',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'options',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'validations',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            3 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'silent',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        13 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'promptChooser',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Prompt multi choice selection
     * Display array index key as the option identifier to select.
     * If you use associative array users will still see index key instead
     * 
     * Examples
     *
     * @example $array = $this->promptChooser(\'Choose your programming languages?\', [\'PHP\', \'JAVA\', \'SWIFT\', \'JS\', \'SQL\', \'CSS\', \'HTML\']); Prompt multiple chooser, using PHP as default if user didn\'t select anything before hit return.
     * @example $array = $this->promptChooser(\'Choose your programming languages?\', [\'PHP\', \'JAVA\', \'SWIFT\', \'JS\', \'SQL\', \'CSS\', \'HTML\'], true); Prompt multiple chooser, persisting that user must choose an option
     *
     *
     * @param string $text  Display text description for your multiple options
     * @param array  $options A list of options [\'male\' => \'Male\', \'female\' => \'Female] or [\'male\', \'female\']
     * @param bool $required Require user to choose any option else the first array will be return as default
     *
     * @return array<string|int, mixed> $options The selected array keys and values
     */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'array',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'text',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'options',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'required',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        14 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'wrap',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Wrap it with padding left and width to a maximum

     * @param string|null $string string to write
     * @param int $max maximum width
     * @param int $leftPadding left padding
     * 
     * @return string $lines
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'string',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'max',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'leftPadding',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        15 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getWidth',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Attempts to determine the width of the viewable CLI window.
     * 
     * @return int static::$width or fallback to default
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'int',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'default',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        16 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getHeight',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Attempts to determine the height of the viewable CLI window.
     * 
     * @return int static::$height or fallback to default
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'int',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'default',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        17 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getVisibleWindow',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the visible CLI width and height.
     *
     * @return void
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        18 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'input',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get input from the shell, using readline or the standard STDIN
     *
     * Named options must be in the following formats:
     * php index.php user -v --v -name=John --name=John
     *
     * @param string|null $prefix You may specify a string with which to prompt the user.
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'prefix',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        19 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'validate',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Input validation on prompts
     *
     * @param string $value Input value
     * @param array $rules Validation rules
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => false,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'value',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'rules',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        20 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'error',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Display error text on CLI 
     *
     * @param string $text Error message
     * @param string|null $foreground Foreground color name
     * @param string|null $background Optional background color name
     * 
     * @return void
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'text',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'foreground',
               'type' => 'string|null',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'background',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        21 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'writeln',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Print text to CLI with newline.
     * 
     * @param string $text Text to display
     * @param string|null $foreground Optional foreground color name
     * @param string|null $background Optional background color name
     *
     * @return void
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'text',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'foreground',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'background',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        22 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'write',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Print text to CLI without a newline.
     * 
     * @param string $text Text to display
     * @param string|null $foreground Optional foreground color name
     * @param string|null $background Optional background color name
     *
     * @return void
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'text',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'foreground',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'background',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        23 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'fwrite',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Write text to resource handler or output text if not in cli mode
     *
     * @param resource $handle resource handler
     * @param string $text string to output or write
     *
     * @return void
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => false,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'handle',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'text',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        24 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'clear',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Clears the screen of output
     *
     * @return void
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        25 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'clearAndUpdateOutput',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Clears cli output to update new text
     *
     * @return void
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        26 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'color',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns the given text with the correct color codes for a foreground and
     * optionally a background color.
     *
     * @param string $text Text to color
     * @param string $foreground Foreground color name
     * @param string|null $background Optional background color name
     * @param int|null $format Optionally apply text formatting.
     *
     * @return string A colored text if color is supported
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'text',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'foreground',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'background',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            3 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'format',
               'type' => '?int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        27 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'newLine',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Create a new line 
     *
     * @param int $count Count of new lines to create
     * 
     * @return void 
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'count',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        28 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'resourceSupportColor',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Check if the stream resource supports colors.
     *
     * @param resource $resource STDIN/STDOUT
     * @return bool 
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'resource',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        29 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'streamSupports',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Checks whether the current stream resource supports or
     * refers to a valid terminal type device.
     *
     * @param string $function Function name to check
     * @param resource $resource Resource to handle STDIN/STDOUT
     * 
     * @return bool if the stream resource is supported
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'function',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'resource',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        30 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'registerCommands',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Register command line queries to static::$options and run it
     * This method is being called in router to parse commands
     * 
     * @param array $values arguments 
     * @param bool $run run command after it has been registered 
     * 
     * @return int
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'int',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'values',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'run',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        31 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'parseCommands',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Parse command line queries to static::$options
     * 
     * @param array $arguments arguments $_SERVER[\'argv\']
     * 
     * @return array<string, mixed>
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'array',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'arguments',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        32 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getRequestCommands',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the current command controller views
     * @return array $views
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        33 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getArgument',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get command argument by index number
     * 
     * @param int $index
     * 
     * @return string|null|int
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'index',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        34 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getArguments',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get command arguments
     * 
     * @return array
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        35 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getCommand',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get command name
     * 
     * @return string|null
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => '?string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        36 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getCaller',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get command caller command string
     * The full passed command, options and arguments 
     * 
     * @return string|null
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => '?string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        37 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getOption',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get options value 
     * 
     * @param string $name
     * 
     * @return null|string|int
     */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'name',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        38 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getOptions',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns the array of options.
     * 
     * @return array static::$options[\'options\']
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        39 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getQuery',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Gets a single query command-line by name.
     * If it doesn\'t exists return null
     *
     * @param string $name Option key name
     * 
     * @return string|array|null
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'name',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        40 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getQueries',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns the raw array of requested query commands.
     * 
     * @return array static::$commandsOptions
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        41 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'isCommandLine',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Is CLI?
     *
     * Test to see if a request was made from the command line.
     *
     * @return bool
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        42 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'isMacTerminal',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Checks whether the current terminal is mac terminal
     *
     * @return bool 
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        43 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'isWindowsTerminal',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Checks whether the stream resource on windows is terminal
     *
     * @param resource $resource STDIN/STDOUT
     * 
     * @return bool 
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'resource',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        44 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'isWindows',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Checks whether the current OS is windows
     *
     * @return bool
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        45 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'isMacOS',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Checks whether the current OS is mac
     *
     * @return bool
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        46 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'hasCommand',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Checks whether system has requested command
     *
     * @param string $command
     * @param array $options
     * 
     * @return bool
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'command',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'options',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        47 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'printHelp',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Print help
     *
     * @param array $help
     * 
     * @return void
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'help',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        48 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getStatusCode',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Gets request status code [1, 0]
     * @param void|bool|null|int $result response from callback function
     * @return int
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'int',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'result',
               'type' => '?mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        49 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'header',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Print Command line header information
     * @param string $version framework cli version number
     * @return void
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'version',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        50 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'phpScript',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the PHP script path.
     *
     * @return string
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'invalidargumentexception' => 'InvalidArgumentException',
              'colors' => 'Luminova\\Command\\Colors',
              'commands' => 'Luminova\\Command\\Commands',
              'textutils' => 'Luminova\\Command\\TextUtils',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/TerminalGenerator.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Command\\TerminalGenerator',
       'phpDoc' => NULL,
       'abstract' => true,
       'final' => false,
       'extends' => 'Luminova\\Command\\Terminal',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Command/TextUtils.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Command\\TextUtils',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'ANSI_RESET',
               'value' => '0',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'ANSI_BOLD',
               'value' => '1',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'ANSI_ITALIC',
               'value' => '3',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'ANSI_UNDERLINE',
               'value' => '4',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'ANSI_STRIKETHROUGH',
               'value' => '9',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'leftPad',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Pads string left
     *
     * @param string $text string to pad
     * @param int $max maximum padding 
     * @param string $char Padding character
     * 
     * @return string
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'text',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'length',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'char',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'rightPad',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Pads string right
     *
     * @param string $text string to pad
     * @param int $max maximum padding 
     * @param string $char Padding character
     * 
     * @return string
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'text',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'max',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'char',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'padding',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Pads string to fit same length
     *
     * @param string $text string to pad
     * @param int $max maximum padding 
     * @param int $extra How many extra spaces to add at the end
     * @param int $index index of
     * 
     * @return string
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'text',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'max',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'extra',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            3 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'indent',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'strlen',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the length of characters in a string and ignore styles 
     *
     * @param string $string Optional string
     * @param string $encoding Text encoding
     * 
     * @return int The number of characters in the string
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'int',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'string',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'encoding',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        9 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'style',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Apply style format on text string
     *
     * @param string $text Text to style
     * @param int|null $format  Style to apply text.
     * @param bool $formatted Return a formatted string or string with style code
     * 
     *
     * @return string A style formatted ansi string 
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'text',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'format',
               'type' => '?int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'formatted',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        10 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'hasAnsiMethod',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Check if text already has ANSI method in place
     * 
     * @param string $text Text string
     * 
     * @return bool true or false
    */',
             'namespace' => 'Luminova\\Command',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'text',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Composer/BaseComposer.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Composer\\BaseComposer',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => 'Luminova\\Base\\BaseConfig',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'progress',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @param int $totalSteps
     * @param callable $taskCallback
     * @param callable|null $onCompleteCallback
     * @param string $completionMessage
    */',
             'namespace' => 'Luminova\\Composer',
             'uses' => 
            array (
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'totalSteps',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'taskCallback',
               'type' => 'callable',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'onCompleteCallback',
               'type' => '?callable',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            3 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'completionMessage',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'parseLocation',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'path',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'isParentOrEqual',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'path1',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'path2',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Composer/Builder.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Composer\\Builder',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => 'Luminova\\Composer\\BaseComposer',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'buildProject',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'destinationDir',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'buildArchiveProject',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'zipFileName',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'buildDir',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Composer/Updater.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Composer\\Updater',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'updateFiles',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'renameProjectRoot',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'moveProjectToRoot',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Config/Configuration.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Config\\Configuration',
       'phpDoc' => NULL,
       'abstract' => true,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'DS',
               'value' => 'DIRECTORY_SEPARATOR',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'version',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
    * @var string $version version name
    */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => NULL,
           'public' => true,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'versionCode',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
    * @var int $versionCode version code
    */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => NULL,
           'public' => true,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'MIN_PHP_VERSION',
               'value' => '\'8.0\'',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Minimum required php version
    * @var string MIN_PHP_VERSION 
    */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__get',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Magic method to retrieve session properties.
     *
     * @param string $propertyName The name of the property to retrieve.
     * @return mixed
     */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'propertyName',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'appName',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the application name.
     *
     * @return string
     */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'hostName',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the host name.
     *
     * @return string
     */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'baseUrl',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the base URL.
     *
     * @return string
     */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'baseWwwUrl',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the base www URL.
     *
     * @return string
     */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        9 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'appVersion',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the application version.
     *
     * @return string
     */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        10 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'fileVersion',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the file version.
     *
     * @return string
     */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        11 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'shouldMinify',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Check if minification is enabled.
     *
     * @return int
     */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'int',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        12 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'urlProtocol',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the URL protocol (http or https).
     *
     * @return string
     */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        13 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getFullUrl',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the full URL.
     *
     * @return string
     */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        14 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getRequestHost',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the request host.
     *
     * @return string
     */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        15 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getEnvironment',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get development environment
     *
     * @return string
    */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        16 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'isMaintenance',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Check if app is on maintenance
     *
     * @return bool
    */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        17 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'isProduction',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Check if the application is in production mode.
     *
     * @return bool
     */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        18 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'isLocal',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Check if the application is running locally.
     *
     * @return bool
     */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        19 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'isLocalServer',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Check if the application is running on local server.
     *
     * @return bool
    */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        20 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'usePublic',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Check if the application should use custom public as path 
     * If the local server is not running and not on production server
     * If the document root is not changed to "public", manually enable the app to use "public" as the default
     *
     * @return bool
    */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        21 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'root',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the root directory.
     *
     * @param string $directory The directory to start searching for composer.json or system directory.
     * 
     * @return string
     */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'directory',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'suffix',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        22 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getRootDirectory',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the root directory.
     *
     * @param string $directory The directory to start searching for composer.json.
     * 
     * @deprecated This method has been deprecated use root($directory, $suffix) instead
     * @return string|null
     */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => '?string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'directory',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        23 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'filterPath',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Filter the path to match to allowed in error directories preview.
     *
     * @param string $path The path to be filtered.
     * 
     * @return string
     */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'path',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        24 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'get',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get environment configuration variables.
     *
     * @param string $key The key to retrieve.
     * @param mixed $default The default value to return if the key is not found.
     * 
     * @return mixed
     */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'default',
               'type' => '?mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        25 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'set',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set an environment variable if it doesn\'t already exist.
     *
     * @param string $name The name of the environment variable.
     * @param string $value The value of the environment variable.
     * 
     * @return void
     */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'name',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'value',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        26 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getVariables',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get environment configuration variables.
     *
     * @param string $key The key to retrieve.
     * @param mixed $default The default value to return if the key is not found.
     * 
     * @deprecated This method will be removed in the next major release use get instead
     * @return mixed
     */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'default',
               'type' => '?mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        27 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getString',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get environment configuration variables.
     *
     * @param string $key The key to retrieve.
     * @param string $default The default value to return if the key is not found.
     * 
     * @return string
     */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'default',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        28 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getInt',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get environment variable as integer value
     *
     * @param string $key variable name
     * @param int $default fallback to default
     * @return bool
    */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'int',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'default',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        29 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getBoolean',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get environment variable as boolean
     *
     * @param string $key variable name
     * @param bool $default fallback to default
     * @return bool
    */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'default',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        30 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getMixedNull',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get environment variable as default null
     *
     * @param string $key variable name
     * @param mixed|null $default fallback to default
     * @return bool
    */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'default',
               'type' => '?mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        31 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'variableToNotation',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Convert variable to dot or underscore notation.
     *
     * @param string $input The input string .
     * @param string $notation The conversion notion
     * @return string
    */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'input',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'notation',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        32 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'copyright',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the framework copyright information
     *
     * @return string
     */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        33 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'version',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the framework version number
     *
     * @return string
     */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Config/Database.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Config\\Database',
       'phpDoc' => 
      \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
         'phpDocString' => '/**
 * Database Configuration
 *
 * This class represents the configuration for a database connection.
 */',
         'namespace' => 'Luminova\\Config',
         'uses' => 
        array (
        ),
         'constUses' => 
        array (
        ),
      )),
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'port',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * The port to connect to the database.
     * @var int|null $port 
     */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => '?int',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'host',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * The hostname or IP address of the database server.
     * @var string $host [localhost, 127.0.0.1]
     */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'version',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * The version of the database server.
     * @var string|null $version 
     */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => '?string',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'charset',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * The character set used for the database connection.
     * @var string $charset 
     */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'sqlite_path',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * The path to the SQLite database file if applicable.
     * @var string|null $sqlite_path 
     */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => '?string',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'production',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Indicates if this configuration is for a production environment.
     * @var bool $production 
     */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'bool',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'username',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * The username for the database connection.
     * @var string $username 
     */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'password',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * The password for the database connection.
     * @var string $password 
     */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'database',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * The name of the database to connect to.
     * @var string $database 
    */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        9 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'persistent',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * persistent database connection
     * @var bool $persistent 
    */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'bool',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Config/DotEnv.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Config\\DotEnv',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'register',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Register environment variables from a .env file.
     *
     * @param string $path The path to the .env file.
     * 
     * @return void 
     * @throws FileException If the .env file is not found.
     */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
              'configuration' => 'Luminova\\Config\\Configuration',
              'fileexception' => 'Luminova\\Exceptions\\FileException',
              'splfileobject' => 'SplFileObject',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'path',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Config/PHPStanRules.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Config\\PHPStanRules',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => true,
       'extends' => NULL,
       'implements' => 
      array (
        0 => 'PHPStan\\Rules\\Rule',
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getNodeType',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'processNode',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @param Stmt $node
     */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
              'doc' => 'PhpParser\\Comment\\Doc',
              'node' => 'PhpParser\\Node',
              'stmt' => 'PhpParser\\Node\\Stmt',
              'use_' => 'PhpParser\\Node\\Stmt\\Use_',
              'scope' => 'PHPStan\\Analyser\\Scope',
              'rule' => 'PHPStan\\Rules\\Rule',
              'variable' => 'PhpParser\\Node\\Expr\\Variable',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'node',
               'type' => 'PhpParser\\Node',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'scope',
               'type' => 'PHPStan\\Analyser\\Scope',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Config/SystemPaths.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Config\\SystemPaths',
       'phpDoc' => NULL,
       'abstract' => true,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'systemDirectory',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * SYSTEM FOLDER NAME
     */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'systemPluginsDirectory',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * SYSTEM FOLDER NAME
     */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'appDirectory',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * APPLICATION FOLDER NAME
     */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'writableDirectory',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * WRITABLE DIRECTORY NAME
     */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'testsDirectory',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * TESTS DIRECTORY NAME
     */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'viewDirectory',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * VIEW DIRECTORY NAME
     */',
             'namespace' => 'Luminova\\Config',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Controllers/Controller.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Controllers\\Controller',
       'phpDoc' => NULL,
       'abstract' => true,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Controllers/ViewController.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Controllers\\ViewController',
       'phpDoc' => NULL,
       'abstract' => true,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'request',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
    * Initializes the http request class
    * Allows #[\\Override]
    * 
    * @return Request $request http request object 
    */',
             'namespace' => 'Luminova\\Controllers',
             'uses' => 
            array (
              'application' => 'App\\Controllers\\Application',
              'request' => 'Luminova\\Http\\Request',
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'importer' => 'Luminova\\Library\\Importer',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => false,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'Luminova\\Http\\Request',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'validate',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Initializes the input validator class
    * Allows #[\\Override]
    * 
    * @return InputValidator $validate input validation object 
    */',
             'namespace' => 'Luminova\\Controllers',
             'uses' => 
            array (
              'application' => 'App\\Controllers\\Application',
              'request' => 'Luminova\\Http\\Request',
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'importer' => 'Luminova\\Library\\Importer',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => false,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'Luminova\\Security\\InputValidator',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'app',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Initializes the application class
    * Allows #[\\Override]
    * 
    * @return Application $app Application instance
    */',
             'namespace' => 'Luminova\\Controllers',
             'uses' => 
            array (
              'application' => 'App\\Controllers\\Application',
              'request' => 'Luminova\\Http\\Request',
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'importer' => 'Luminova\\Library\\Importer',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => false,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'App\\Controllers\\Application',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'library',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Initializes the application class
    * Allows #[\\Override]
    * 
    * @return Importer $app Application instance
    */',
             'namespace' => 'Luminova\\Controllers',
             'uses' => 
            array (
              'application' => 'App\\Controllers\\Application',
              'request' => 'Luminova\\Http\\Request',
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'importer' => 'Luminova\\Library\\Importer',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => false,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'Luminova\\Library\\Importer',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'view',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Render view
     *
     * @param string $view view name
     * @param array $options view options
     * 
     * @return int STATUS_OK
    */',
             'namespace' => 'Luminova\\Controllers',
             'uses' => 
            array (
              'application' => 'App\\Controllers\\Application',
              'request' => 'Luminova\\Http\\Request',
              'inputvalidator' => 'Luminova\\Security\\InputValidator',
              'importer' => 'Luminova\\Library\\Importer',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => false,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'int',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'view',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'options',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Cookies/Cookie.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Cookies\\Cookie',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
        0 => 'Luminova\\Cookies\\CookieInterface',
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'prefix',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $prefix
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'name',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $name
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'value',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var mixed $value
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'mixed',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'expires',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var int $expires
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'int',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'path',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $path
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'domain',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $domain
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'secure',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var bool $secure
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'bool',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'httpOnly',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var bool $httpOnly
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'bool',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'sameSite',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $sameSite
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        9 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'raw',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var bool $raw
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'bool',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        10 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'options',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var array $options
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'array',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        11 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'default',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var array $default
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'array',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        12 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Cookie constructor.
     * 
     * @param string $name Cookie name 
     * @param mixed $value cookie value
     * @param array $options Cookie options
     * 
     * @throws CookieException
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => true,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'name',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'value',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'options',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        13 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setOptions',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set cookie options 
     * 
     * @param string|array $options Options array or CookieConfig class name
     * 
     * @return self $this
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'options',
               'type' => 'string|array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        14 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'set',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Set key and value to session
     * 
     * @param string $key key to set
     * @param mixed $value value to set
     * 
     * @return Cookie new Cookie instance
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'Luminova\\Cookies\\Cookie',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'name',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'value',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'options',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        15 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setValue',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Set key and value to session
     * 
     * @param string $key key to set
     * @param mixed $value value to set
     * 
     * @return self
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'value',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        16 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'get',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * get data from session
     * 
     * @param string $index key to get
     * 
     * @return mixed
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        17 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'delete',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Remove key from the current session storage by passing the key.
     *
     * @param string $index Key index to unset.
     * 
     * @return self
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        18 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'has',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Check if key exists in session
     * 
     * @param string $key
     * 
     * @return bool
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        19 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getName',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get cookie name
     * 
     * @return string
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        20 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getOptions',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get cookie options
     * 
     * @return array
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        21 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getValue',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get cookie value
     * 
     * @return mixed
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        22 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getDomain',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get cookie domain
     * 
     * @return string
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        23 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getPrefix',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get cookie prefix
     * 
     * @return string
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        24 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getExpiry',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get cookie expiry
     * 
     * @return int
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'int',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        25 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getExpiryString',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get cookie expiry time as string
     * 
     * @return string
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        26 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'hasExpired',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Checks if the cookie has expired.
     * 
     * @return bool
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        27 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getMaxAge',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Gets the "Max-Age" cookie attribute.
     * 
     * @return int
     */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'int',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        28 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getPath',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get cookie path
     * 
     * @return string
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        29 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getSameSite',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get cookie samesite attribute
     * 
     * @return string
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        30 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'isSecure',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get cookie security attribute
     * 
     * @return bool
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        31 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'isHttpOnly',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get cookie httponly attribute
     * 
     * @return bool
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        32 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'isRaw',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get cookie raw attribute
     * 
     * @return bool
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        33 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getString',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns the Cookie as a header value.
     * 
     * @return string
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        34 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'toString',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns the Cookie as a header value.
     * 
     * @return string
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        35 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getId',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get cookie id
     * 
     * @return string
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        36 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getPrefixedName',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Gets the cookie name prepended with the prefix
     * 
     * @return string
     */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        37 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setFromString',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Create a new Cookie instance from a `Set-Cookie` header.
     *
     * @param string $cookie Cookie header string 
     * @param bool $raw Is raw cookie
     * 
     * @return Cookie New Cookie instance
     */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'Luminova\\Cookies\\Cookie',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'cookie',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'raw',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        38 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'hasPrefix',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Check if cookie name has prefix
     * 
     * @param ?string $name 
     * 
     * @return bool
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'name',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        39 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'toTimestamp',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Converts expires time to Unix timestamp format.
     *
     * @param DateTimeInterface|int|string $expires
     * 
     * @return int $timestamp
     */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => false,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'int',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'expires',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        40 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__toString',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns the string representation of the Cookie object.
     *
     * @return string
     */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        41 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'toArray',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns the array representation of the Cookie object.
     *
     * @return array<string, bool|int|string>
     */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        42 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'validateName',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Validates the cookie name per RFC 2616.
     *
     * If `$raw` is true, names should not contain invalid characters
     * as `setrawcookie()` will reject this.
     *
     * @throws CookieException
     */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => false,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        43 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'validatePrefix',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Validates the special prefixes if some attribute requirements are met.
     *
     * @throws CookieException
     */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => false,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        44 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'validateSameSite',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Validates the `SameSite` to be within the allowed types.
     *
     * @throws CookieException
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite
     */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieinterface' => 'Luminova\\Cookies\\CookieInterface',
              'cookieexception' => 'Luminova\\Cookies\\Exception\\CookieException',
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
              'time' => 'Luminova\\Time\\Time',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => false,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Cookies/CookieInterface.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedInterfaceNode::__set_state(array(
       'name' => 'Luminova\\Cookies\\CookieInterface',
       'phpDoc' => NULL,
       'extends' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'NONE',
               'value' => '\'none\'',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Cookies will be sent in all contexts, i.e in responses to both
     * third-party and cross-origin requests. If `SameSite=None` is set,
     * the cookie `Secure` attribute must also be set (or the cookie will be blocked).
     */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
            ),
             'constUses' => 
            array (
            ),
          )),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'LAX',
               'value' => '\'lax\'',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Cookies are not sent on normal cross-site sub requests (for example to
     * load images or frames into a third party site), but are sent when a
     * user is navigating to the origin site (i.e. when following a link).
     */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
            ),
             'constUses' => 
            array (
            ),
          )),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'STRICT',
               'value' => '\'strict\'',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Cookies will only be sent in a third-party context and not be sent
     * along with requests initiated by third party websites.
     */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
            ),
             'constUses' => 
            array (
            ),
          )),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'EXPIRES_FORMAT',
               'value' => '\'D, d-M-Y H:i:s T\'',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Expires date string format.
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Date
     * @see https://tools.ietf.org/html/rfc7231#section-7.1.1.2
     */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
            ),
             'constUses' => 
            array (
            ),
          )),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'set',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Set key and value to session
     * 
     * @param string $key key to set
     * @param mixed $value value to set
     * 
     * @return Cookie new Cookie instance
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'Luminova\\Cookies\\Cookie',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'name',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'value',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'options',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setValue',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Set key and value to session
     * 
     * @param string $key key to set
     * @param mixed $value value to set
     * 
     * @return self
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'value',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'get',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * get data from session
     * 
     * @param string $index key to get
     * 
     * @return mixed
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'has',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Check if key exists in session
     * 
     * @param string $key
     * 
     * @return bool
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'delete',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Remove key from the current session storage by passing the key.
     *
     * @param string $index Key index to unset.
     * 
     * @return self
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        9 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setOptions',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set cookie options 
     * 
     * @param string|array $options Options array or CookieConfig class name
     * 
     * @return self $this
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'options',
               'type' => 'string|array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        10 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setFromString',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Create a new Cookie instance from a `Set-Cookie` header.
     *
     * @param string $cookie Cookie header string 
     * @param bool $raw Is raw cookie
     * 
     * @return Cookie New Cookie instance
     */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'Luminova\\Cookies\\Cookie',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'cookie',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'raw',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        11 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getId',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get cookie id
     * 
     * @return string
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        12 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getPrefix',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get cookie prefix
     * 
     * @return string
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        13 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getPrefixedName',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Gets the cookie name prepended with the prefix
     * 
     * @return string
     */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        14 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getName',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get cookie name
     * 
     * @return string
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        15 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getValue',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get cookie value
     * 
     * @return mixed
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        16 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getExpiry',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get cookie expiry
     * 
     * @return int
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'int',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        17 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getExpiryString',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get cookie expiry time as string
     * 
     * @return string
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        18 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'hasExpired',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Checks if the cookie is expired.
     */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        19 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getMaxAge',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Gets the "Max-Age" cookie attribute.
     * 
     * @return int
     */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'int',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        20 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getPath',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get cookie path
     * 
     * @return string
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        21 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getDomain',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get cookie domain
     * 
     * @return string
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        22 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'isSecure',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get cookie security attribute
     * 
     * @return bool
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        23 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'isHttpOnly',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get cookie httpOnly attribute
     * 
     * @return bool
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        24 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getSameSite',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get cookie sameSite attribute
     * 
     * @return string
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        25 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'isRaw',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get cookie raw attribute
     * 
     * @return bool
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        26 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getOptions',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get cookie options
     * 
     * @return array<string, mixed> 
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        27 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getString',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns the Cookie as a header value.
     * 
     * @return string
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        28 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'toString',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns the Cookie as a header value.
     * 
     * @return string
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        29 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'hasPrefix',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Check if cookie name has prefix
     * 
     * @param ?string $name 
     * 
     * @return bool
    */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'name',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        30 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__toString',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns the string representation of the Cookie object.
     *
     * @return string
     */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        31 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'toArray',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns the array representation of the Cookie object.
     *
     * @return array<string, bool|int|string>
     */',
             'namespace' => 'Luminova\\Cookies',
             'uses' => 
            array (
              'cookieconfig' => 'App\\Controllers\\Config\\Cookie',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Cookies/Exception/CookieException.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Cookies\\Exception\\CookieException',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => 'Luminova\\Exceptions\\AppException',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'throwWith',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Thrown when a cookie-related error occurs.
     *
     * @param string $type The type of error.
     * @param mixed|null $name The cookie name associated with the error (if applicable).
     * @return static
     */',
             'namespace' => 'Luminova\\Cookies\\Exception',
             'uses' => 
            array (
              'appexception' => 'Luminova\\Exceptions\\AppException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'type',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'name',
               'type' => '?mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Columns.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Database\\Columns',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'INT',
               'value' => '"INT"',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'VARCHAR',
               'value' => '"VARCHAR"',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'DEFAULT_NONE',
               'value' => '"NONE"',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'DEFAULT_TIMESTAMP',
               'value' => '"CURRENT_TIMESTAMP"',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'DEFAULT_NULL',
               'value' => '"NULL"',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'INDEX_PRIMARY',
               'value' => '"PRIMARY"',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'INDEX_UNIQUE',
               'value' => '"UNIQUE"',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'INDEX_INDEX',
               'value' => '"INDEX"',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'INDEX_FULLTEXT',
               'value' => '"FULLTEXT"',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        9 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'INDEX_SPATIAL',
               'value' => '"SPATIAL"',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        10 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'tableName',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        11 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setName',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'Luminova\\Database\\Columns',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'name',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        12 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setType',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'Luminova\\Database\\Columns',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'type',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'length',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        13 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setCollation',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'Luminova\\Database\\Columns',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'collation',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        14 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setAttributes',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'Luminova\\Database\\Columns',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'attributes',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        15 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setAutoIncrement',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'Luminova\\Database\\Columns',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'autoIncrement',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        16 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setDefault',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'Luminova\\Database\\Columns',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'default',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        17 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setIndex',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'Luminova\\Database\\Columns',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'indexType',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        18 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getColumns',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'name',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        19 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'generate',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Connection.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Database\\Connection',
       'phpDoc' => 
      \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
         'phpDocString' => '/**
  * Class Connection
  *
  * Manages database connections based on configuration.
  *
  * @package Luminova\\Database
*/',
         'namespace' => 'Luminova\\Database',
         'uses' => 
        array (
          'baseconfig' => 'Luminova\\Base\\BaseConfig',
          'mysqldriver' => 'Luminova\\Database\\Drivers\\MySqlDriver',
          'pdodriver' => 'Luminova\\Database\\Drivers\\PdoDriver',
          'database' => 'Luminova\\Config\\Database',
        ),
         'constUses' => 
        array (
        ),
      )),
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'db',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
      * Database connection instance 
      * @var object 
    */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'mysqldriver' => 'Luminova\\Database\\Drivers\\MySqlDriver',
              'pdodriver' => 'Luminova\\Database\\Drivers\\PdoDriver',
              'database' => 'Luminova\\Config\\Database',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => NULL,
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
      * Connection constructor.
      *
      * Initializes the database connection based on configuration.
      * @throws DatabaseException|InvalidException|InvalidObjectException If fails
      */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'mysqldriver' => 'Luminova\\Database\\Drivers\\MySqlDriver',
              'pdodriver' => 'Luminova\\Database\\Drivers\\PdoDriver',
              'database' => 'Luminova\\Config\\Database',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getInstance',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
      * Get the singleton instance of Connection.
      *
      * @return object Database connection instance.
      *  @throws DatabaseException|InvalidException|InvalidObjectException If fails
      */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'mysqldriver' => 'Luminova\\Database\\Drivers\\MySqlDriver',
              'pdodriver' => 'Luminova\\Database\\Drivers\\PdoDriver',
              'database' => 'Luminova\\Config\\Database',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'self',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Drivers/DriversInterface.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedInterfaceNode::__set_state(array(
       'name' => 'Luminova\\Database\\Drivers\\DriversInterface',
       'phpDoc' => NULL,
       'extends' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getDriver',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get driver name
     * 
     * @return string Database driver name
    */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setDebug',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Sets the debug mode.
     *
     * @param bool $debug The debug mode.
     * @return self The current class instance.
    */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'debug',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'error',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns the error information for the last statement execution.
     *
     * @return string The error information array.
    */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'errors',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns the error information.
     *
     * @return array The error information.
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'dumpDebug',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Dumps the debug information for the last statement execution.
     *
     * @return string|null The debug information or null if debug mode is off.
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'info',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns the error information for the last statement execution.
     *
     * @return array $info The error information array.
    */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'prepare',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Prepares a statement for execution.
     *
     * @param string $query The SQL query.
     * @return self The current class instance.
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'query',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'query',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Executes a query.
     *
     * @param string $query The SQL query.
     * @return self The current class instance.
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'query',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'exec',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Executes a query.
     *
     * @param string $query The SQL query.
     * @return int The affected row counts
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'int',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'query',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        9 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'beginTransaction',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Begin transaction
     *
     * @return void 
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        10 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'commit',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Commits transaction
     *
     * @return void 
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        11 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'rollback',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Rollback transaction if fails
     *
     * @return void
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        12 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getType',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns the appropriate parameter type based on the value and type.
     *
     * @param mixed       $value The parameter value.
     * @param ?int    $type  The parameter type.
     *
     * @return int The parameter type.
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'value',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'type',
               'type' => '?int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        13 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'bind',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Binds a value to a parameter.
     *
     * @param string       $param The parameter identifier.
     * @param mixed       $value The parameter value.
     * @param null|int    $type  The parameter type.
     *
     * @return self The current class instance.
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'param',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'value',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'type',
               'type' => '?mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        14 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'param',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Binds a variable to a parameter.
     *
     * @param string       $param The parameter identifier.
     * @param mixed       $value The parameter value.
     * @param null|int    $type  The parameter type.
     *
     * @return self The current class instance.
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'param',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'value',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'type',
               'type' => '?mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        15 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'execute',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Executes the prepared statement.
     * @param array $values execute statement with values
     * 
     * @throws DatabaseException 
     * @return void
    */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'values',
               'type' => '?array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        16 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'rowCount',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns the number of rows affected by the last statement execution.
     *
     * @return int The number of rows.
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'int',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        17 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getOne',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Fetches a single row as an object.
     *
     * @return mixed The result object or false if no row is found.
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        18 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getAll',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Fetches all rows as an array of objects.
     *
     * @return mixed The array of result objects.
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        19 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getInt',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Fetches all rows as a 2D array of integers.
     *
     * @return int The 2D array of integers.
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'int',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        20 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getResult',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Fetches all rows as an array or stdClass object.
     *
     * @param string $type The type of result to fetch (\'object\' or \'array\').
     * 
     * @return array|stdClass The result containing the rows.
    */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array|stdClass',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'type',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        21 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getObject',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Fetches all rows as a stdClass object.
     *
     * @return stdClass The stdClass object containing the result rows.
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'stdClass',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        22 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getArray',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Fetches all rows as a array.
     *
     * @return array The array containing the result rows.
    */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        23 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getLastInsertId',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns the ID of the last inserted row or sequence value.
     *
     * @return string The last insert ID.
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        24 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'free',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Frees up the statement cursor and sets the statement object to null.
     * 
     * @return void
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        25 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'close',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Frees up the statement cursor and close database connection
     * 
     * @return void
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Drivers/MySqlDriver.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Database\\Drivers\\MySqlDriver',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
        0 => 'Luminova\\Database\\Drivers\\DriversInterface',
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Constructor.
     *
     * @param Database $config database configuration. array
     * @throws InvalidException|InvalidObjectException If a required configuration key is missing.
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidobjectexception' => 'Luminova\\Exceptions\\InvalidObjectException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
              'mysqli' => 'mysqli',
              'mysqli_stmt' => 'mysqli_stmt',
              'mysqli_result' => 'mysqli_result',
              'stdclass' => 'stdClass',
              'mysqli_sql_exception' => 'mysqli_sql_exception',
              'typeerror' => 'TypeError',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'config',
               'type' => 'Luminova\\Config\\Database',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getDriver',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get driver name
     * 
     * @return string Database driver name
    */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidobjectexception' => 'Luminova\\Exceptions\\InvalidObjectException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
              'mysqli' => 'mysqli',
              'mysqli_stmt' => 'mysqli_stmt',
              'mysqli_result' => 'mysqli_result',
              'stdclass' => 'stdClass',
              'mysqli_sql_exception' => 'mysqli_sql_exception',
              'typeerror' => 'TypeError',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setDebug',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Sets the debug mode.
     *
     * @param bool $debug The debug mode.
     * @return self The current instance of the MySqlDriver class.
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidobjectexception' => 'Luminova\\Exceptions\\InvalidObjectException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
              'mysqli' => 'mysqli',
              'mysqli_stmt' => 'mysqli_stmt',
              'mysqli_result' => 'mysqli_result',
              'stdclass' => 'stdClass',
              'mysqli_sql_exception' => 'mysqli_sql_exception',
              'typeerror' => 'TypeError',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'debug',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'error',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns the error information for the last statement execution.
     *
     * @return string The error information.
    */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidobjectexception' => 'Luminova\\Exceptions\\InvalidObjectException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
              'mysqli' => 'mysqli',
              'mysqli_stmt' => 'mysqli_stmt',
              'mysqli_result' => 'mysqli_result',
              'stdclass' => 'stdClass',
              'mysqli_sql_exception' => 'mysqli_sql_exception',
              'typeerror' => 'TypeError',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'errors',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns the error information 
     *
     * @return array The error information.
    */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidobjectexception' => 'Luminova\\Exceptions\\InvalidObjectException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
              'mysqli' => 'mysqli',
              'mysqli_stmt' => 'mysqli_stmt',
              'mysqli_result' => 'mysqli_result',
              'stdclass' => 'stdClass',
              'mysqli_sql_exception' => 'mysqli_sql_exception',
              'typeerror' => 'TypeError',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'info',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns the error information for the last statement execution.
     *
     * @return array $info The error information array.
    */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidobjectexception' => 'Luminova\\Exceptions\\InvalidObjectException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
              'mysqli' => 'mysqli',
              'mysqli_stmt' => 'mysqli_stmt',
              'mysqli_result' => 'mysqli_result',
              'stdclass' => 'stdClass',
              'mysqli_sql_exception' => 'mysqli_sql_exception',
              'typeerror' => 'TypeError',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'dumpDebug',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Dumps the debug information for the last statement execution.
     *
     * @return string $debug The debug information
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidobjectexception' => 'Luminova\\Exceptions\\InvalidObjectException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
              'mysqli' => 'mysqli',
              'mysqli_stmt' => 'mysqli_stmt',
              'mysqli_result' => 'mysqli_result',
              'stdclass' => 'stdClass',
              'mysqli_sql_exception' => 'mysqli_sql_exception',
              'typeerror' => 'TypeError',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'prepare',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Prepares a statement for execution.
     *
     * @param string $query The SQL query.
     *
     * @return self The current instance of the MySqlDriver class.
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidobjectexception' => 'Luminova\\Exceptions\\InvalidObjectException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
              'mysqli' => 'mysqli',
              'mysqli_stmt' => 'mysqli_stmt',
              'mysqli_result' => 'mysqli_result',
              'stdclass' => 'stdClass',
              'mysqli_sql_exception' => 'mysqli_sql_exception',
              'typeerror' => 'TypeError',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'query',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'query',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Executes a query.
     *
     * @param string $query The SQL query.
     *
     * @return self The current instance of the MySqlDriver class.
    */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidobjectexception' => 'Luminova\\Exceptions\\InvalidObjectException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
              'mysqli' => 'mysqli',
              'mysqli_stmt' => 'mysqli_stmt',
              'mysqli_result' => 'mysqli_result',
              'stdclass' => 'stdClass',
              'mysqli_sql_exception' => 'mysqli_sql_exception',
              'typeerror' => 'TypeError',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'query',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        9 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'exec',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Executes a query.
     *
     * @param string $query The SQL query.
     * @return int The affected row counts
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidobjectexception' => 'Luminova\\Exceptions\\InvalidObjectException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
              'mysqli' => 'mysqli',
              'mysqli_stmt' => 'mysqli_stmt',
              'mysqli_result' => 'mysqli_result',
              'stdclass' => 'stdClass',
              'mysqli_sql_exception' => 'mysqli_sql_exception',
              'typeerror' => 'TypeError',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'int',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'query',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        10 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'beginTransaction',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Begin transaction
     *
     * @return void 
    */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidobjectexception' => 'Luminova\\Exceptions\\InvalidObjectException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
              'mysqli' => 'mysqli',
              'mysqli_stmt' => 'mysqli_stmt',
              'mysqli_result' => 'mysqli_result',
              'stdclass' => 'stdClass',
              'mysqli_sql_exception' => 'mysqli_sql_exception',
              'typeerror' => 'TypeError',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        11 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'commit',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Commits transaction
     *
     * @return void 
    */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidobjectexception' => 'Luminova\\Exceptions\\InvalidObjectException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
              'mysqli' => 'mysqli',
              'mysqli_stmt' => 'mysqli_stmt',
              'mysqli_result' => 'mysqli_result',
              'stdclass' => 'stdClass',
              'mysqli_sql_exception' => 'mysqli_sql_exception',
              'typeerror' => 'TypeError',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        12 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'rollback',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Rollback transaction if fails
     *
     * @return void
    */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidobjectexception' => 'Luminova\\Exceptions\\InvalidObjectException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
              'mysqli' => 'mysqli',
              'mysqli_stmt' => 'mysqli_stmt',
              'mysqli_result' => 'mysqli_result',
              'stdclass' => 'stdClass',
              'mysqli_sql_exception' => 'mysqli_sql_exception',
              'typeerror' => 'TypeError',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        13 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getType',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns the appropriate parameter type based on the value and type.
     *
     * @param mixed       $value The parameter value.
     * @param null|int    $type  The parameter type.
     *
     * @return int The parameter type.
    */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidobjectexception' => 'Luminova\\Exceptions\\InvalidObjectException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
              'mysqli' => 'mysqli',
              'mysqli_stmt' => 'mysqli_stmt',
              'mysqli_result' => 'mysqli_result',
              'stdclass' => 'stdClass',
              'mysqli_sql_exception' => 'mysqli_sql_exception',
              'typeerror' => 'TypeError',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'value',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'type',
               'type' => '?int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        14 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'bind',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Binds a value to a parameter.
     *
     * @param string       $param The parameter identifier.
     * @param mixed       $value The parameter value.
     * @param int|null    $type  The parameter type.
     *
     * @return self The current instance of the MySqlDriver class.
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidobjectexception' => 'Luminova\\Exceptions\\InvalidObjectException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
              'mysqli' => 'mysqli',
              'mysqli_stmt' => 'mysqli_stmt',
              'mysqli_result' => 'mysqli_result',
              'stdclass' => 'stdClass',
              'mysqli_sql_exception' => 'mysqli_sql_exception',
              'typeerror' => 'TypeError',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'param',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'value',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'type',
               'type' => '?mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        15 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'param',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Binds a variable to a parameter.
     *
     * @param string       $param The parameter identifier.
     * @param mixed       $value The parameter value.
     * @param int|null    $type  The parameter type.
     *
     * @return self The current instance of the MySqlDriver class.
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidobjectexception' => 'Luminova\\Exceptions\\InvalidObjectException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
              'mysqli' => 'mysqli',
              'mysqli_stmt' => 'mysqli_stmt',
              'mysqli_result' => 'mysqli_result',
              'stdclass' => 'stdClass',
              'mysqli_sql_exception' => 'mysqli_sql_exception',
              'typeerror' => 'TypeError',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'param',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'value',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'type',
               'type' => '?mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        16 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'bindValues',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Binds an array of values to the query parameters.
     *
     * @param array $values An associative array of parameter names and their corresponding values.
     * 
     * @return self The current instance of the MySqlDriver class.
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidobjectexception' => 'Luminova\\Exceptions\\InvalidObjectException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
              'mysqli' => 'mysqli',
              'mysqli_stmt' => 'mysqli_stmt',
              'mysqli_result' => 'mysqli_result',
              'stdclass' => 'stdClass',
              'mysqli_sql_exception' => 'mysqli_sql_exception',
              'typeerror' => 'TypeError',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'values',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        17 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'execute',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Executes the prepared statement.
     * 
     * @param array $values execute statement with values
     * 
     * @throws DatabaseException 
     * @return void
    */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidobjectexception' => 'Luminova\\Exceptions\\InvalidObjectException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
              'mysqli' => 'mysqli',
              'mysqli_stmt' => 'mysqli_stmt',
              'mysqli_result' => 'mysqli_result',
              'stdclass' => 'stdClass',
              'mysqli_sql_exception' => 'mysqli_sql_exception',
              'typeerror' => 'TypeError',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'values',
               'type' => '?array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        18 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'rowCount',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns the number of rows affected by the last statement execution.
     *
     * @return int The number of rows.
    */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidobjectexception' => 'Luminova\\Exceptions\\InvalidObjectException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
              'mysqli' => 'mysqli',
              'mysqli_stmt' => 'mysqli_stmt',
              'mysqli_result' => 'mysqli_result',
              'stdclass' => 'stdClass',
              'mysqli_sql_exception' => 'mysqli_sql_exception',
              'typeerror' => 'TypeError',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'int',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        19 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getOne',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Fetches a single row as an object.
     * 
     * @return array|object|null The result object or false if no row is found.
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidobjectexception' => 'Luminova\\Exceptions\\InvalidObjectException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
              'mysqli' => 'mysqli',
              'mysqli_stmt' => 'mysqli_stmt',
              'mysqli_result' => 'mysqli_result',
              'stdclass' => 'stdClass',
              'mysqli_sql_exception' => 'mysqli_sql_exception',
              'typeerror' => 'TypeError',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        20 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getAll',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Fetches all rows as an array of objects.
     *
     * @return array|object|null The array of result objects.
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidobjectexception' => 'Luminova\\Exceptions\\InvalidObjectException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
              'mysqli' => 'mysqli',
              'mysqli_stmt' => 'mysqli_stmt',
              'mysqli_result' => 'mysqli_result',
              'stdclass' => 'stdClass',
              'mysqli_sql_exception' => 'mysqli_sql_exception',
              'typeerror' => 'TypeError',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        21 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getResult',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Fetches all rows as an array or stdClass object.
     *
     * @param string $type The type of result to fetch (\'object\' or \'array\').
     * 
     * @return array|stdClass The result containing the rows.
    */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidobjectexception' => 'Luminova\\Exceptions\\InvalidObjectException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
              'mysqli' => 'mysqli',
              'mysqli_stmt' => 'mysqli_stmt',
              'mysqli_result' => 'mysqli_result',
              'stdclass' => 'stdClass',
              'mysqli_sql_exception' => 'mysqli_sql_exception',
              'typeerror' => 'TypeError',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array|stdClass',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'type',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        22 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getObject',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Fetches all rows as a stdClass object.
     *
     * @return stdClass The stdClass object containing the result rows.
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidobjectexception' => 'Luminova\\Exceptions\\InvalidObjectException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
              'mysqli' => 'mysqli',
              'mysqli_stmt' => 'mysqli_stmt',
              'mysqli_result' => 'mysqli_result',
              'stdclass' => 'stdClass',
              'mysqli_sql_exception' => 'mysqli_sql_exception',
              'typeerror' => 'TypeError',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'stdClass',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        23 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getArray',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Fetches all rows as a array.
     *
     * @return array The array containing the result rows.
    */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidobjectexception' => 'Luminova\\Exceptions\\InvalidObjectException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
              'mysqli' => 'mysqli',
              'mysqli_stmt' => 'mysqli_stmt',
              'mysqli_result' => 'mysqli_result',
              'stdclass' => 'stdClass',
              'mysqli_sql_exception' => 'mysqli_sql_exception',
              'typeerror' => 'TypeError',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        24 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getInt',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Fetches all rows as a 2D array of integers.
     *
     * @return int $total
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidobjectexception' => 'Luminova\\Exceptions\\InvalidObjectException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
              'mysqli' => 'mysqli',
              'mysqli_stmt' => 'mysqli_stmt',
              'mysqli_result' => 'mysqli_result',
              'stdclass' => 'stdClass',
              'mysqli_sql_exception' => 'mysqli_sql_exception',
              'typeerror' => 'TypeError',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'int',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        25 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getLastInsertId',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns the ID of the last inserted row or sequence value.
     *
     * @return string The last insert ID.
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidobjectexception' => 'Luminova\\Exceptions\\InvalidObjectException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
              'mysqli' => 'mysqli',
              'mysqli_stmt' => 'mysqli_stmt',
              'mysqli_result' => 'mysqli_result',
              'stdclass' => 'stdClass',
              'mysqli_sql_exception' => 'mysqli_sql_exception',
              'typeerror' => 'TypeError',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        26 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'free',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Frees up the statement cursor and sets the statement object to null.
     * 
     * @return void 
    */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidobjectexception' => 'Luminova\\Exceptions\\InvalidObjectException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
              'mysqli' => 'mysqli',
              'mysqli_stmt' => 'mysqli_stmt',
              'mysqli_result' => 'mysqli_result',
              'stdclass' => 'stdClass',
              'mysqli_sql_exception' => 'mysqli_sql_exception',
              'typeerror' => 'TypeError',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        27 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'close',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Frees up the statement cursor and close database connection
     * 
     * @return void 
    */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidobjectexception' => 'Luminova\\Exceptions\\InvalidObjectException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
              'mysqli' => 'mysqli',
              'mysqli_stmt' => 'mysqli_stmt',
              'mysqli_result' => 'mysqli_result',
              'stdclass' => 'stdClass',
              'mysqli_sql_exception' => 'mysqli_sql_exception',
              'typeerror' => 'TypeError',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Drivers/PdoDriver.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Database\\Drivers\\PdoDriver',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
        0 => 'Luminova\\Database\\Drivers\\DriversInterface',
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'PARAM_INT',
               'value' => '\\PDO::PARAM_INT',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
    * @var int PARAM_INT Integer Parameter
    */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
              'invalidobjectexception' => 'Luminova\\Exceptions\\InvalidObjectException',
              'pdo' => 'PDO',
              'pdostatement' => 'PDOStatement',
              'pdoexception' => 'PDOException',
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'PARAM_BOOL',
               'value' => '\\PDO::PARAM_BOOL',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
    * @var bool PARAM_BOOL Boolean Parameter
    */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
              'invalidobjectexception' => 'Luminova\\Exceptions\\InvalidObjectException',
              'pdo' => 'PDO',
              'pdostatement' => 'PDOStatement',
              'pdoexception' => 'PDOException',
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'PARAM_NULL',
               'value' => '\\PDO::PARAM_NULL',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
    * @var null PARAM_NULL Null Parameter
    */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
              'invalidobjectexception' => 'Luminova\\Exceptions\\InvalidObjectException',
              'pdo' => 'PDO',
              'pdostatement' => 'PDOStatement',
              'pdoexception' => 'PDOException',
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'PARAM_STRING',
               'value' => '\\PDO::PARAM_STR',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
    * @var string PARAM_STRING String Parameter
    */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
              'invalidobjectexception' => 'Luminova\\Exceptions\\InvalidObjectException',
              'pdo' => 'PDO',
              'pdostatement' => 'PDOStatement',
              'pdoexception' => 'PDOException',
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Constructor.
     *
     * @param Database $config database configuration. array
     * @throws InvalidException|InvalidObjectException If a required configuration key is missing.
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
              'invalidobjectexception' => 'Luminova\\Exceptions\\InvalidObjectException',
              'pdo' => 'PDO',
              'pdostatement' => 'PDOStatement',
              'pdoexception' => 'PDOException',
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'config',
               'type' => 'Luminova\\Config\\Database',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getDriver',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get driver name
     * 
     * @return string Database driver name
    */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
              'invalidobjectexception' => 'Luminova\\Exceptions\\InvalidObjectException',
              'pdo' => 'PDO',
              'pdostatement' => 'PDOStatement',
              'pdoexception' => 'PDOException',
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setDebug',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Sets the debug mode.
     *
     * @param bool $debug The debug mode.
     * 
     * @return self The current class instance.
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
              'invalidobjectexception' => 'Luminova\\Exceptions\\InvalidObjectException',
              'pdo' => 'PDO',
              'pdostatement' => 'PDOStatement',
              'pdoexception' => 'PDOException',
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'debug',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'error',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns the error information for the last statement execution.
     *
     * @return string The error information.
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
              'invalidobjectexception' => 'Luminova\\Exceptions\\InvalidObjectException',
              'pdo' => 'PDO',
              'pdostatement' => 'PDOStatement',
              'pdoexception' => 'PDOException',
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'errors',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns the error information.
     *
     * @return array The error information.
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
              'invalidobjectexception' => 'Luminova\\Exceptions\\InvalidObjectException',
              'pdo' => 'PDO',
              'pdostatement' => 'PDOStatement',
              'pdoexception' => 'PDOException',
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        9 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'info',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns the error information for the last statement execution.
     *
     * @return array $info The error information array.
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
              'invalidobjectexception' => 'Luminova\\Exceptions\\InvalidObjectException',
              'pdo' => 'PDO',
              'pdostatement' => 'PDOStatement',
              'pdoexception' => 'PDOException',
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        10 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'dumpDebug',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Dumps the debug information for the last statement execution.
     *
     * @return string|null The debug information or null if debug mode is off.
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
              'invalidobjectexception' => 'Luminova\\Exceptions\\InvalidObjectException',
              'pdo' => 'PDO',
              'pdostatement' => 'PDOStatement',
              'pdoexception' => 'PDOException',
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        11 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'prepare',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Prepares a statement for execution.
     *
     * @param string $query The SQL query.
     * 
     * @return self The current class instance.
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
              'invalidobjectexception' => 'Luminova\\Exceptions\\InvalidObjectException',
              'pdo' => 'PDO',
              'pdostatement' => 'PDOStatement',
              'pdoexception' => 'PDOException',
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'query',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        12 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'query',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Executes a query.
     *
     * @param string $query The SQL query.
     * 
     * @return self The current class instance.
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
              'invalidobjectexception' => 'Luminova\\Exceptions\\InvalidObjectException',
              'pdo' => 'PDO',
              'pdostatement' => 'PDOStatement',
              'pdoexception' => 'PDOException',
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'query',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        13 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'exec',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Executes a query.
     *
     * @param string $query The SQL query.
     * @return int The affected row counts
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
              'invalidobjectexception' => 'Luminova\\Exceptions\\InvalidObjectException',
              'pdo' => 'PDO',
              'pdostatement' => 'PDOStatement',
              'pdoexception' => 'PDOException',
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'int',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'query',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        14 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'beginTransaction',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Begin transaction
     *
     * @return void 
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
              'invalidobjectexception' => 'Luminova\\Exceptions\\InvalidObjectException',
              'pdo' => 'PDO',
              'pdostatement' => 'PDOStatement',
              'pdoexception' => 'PDOException',
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        15 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'commit',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Commits transaction
     *
     * @return void 
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
              'invalidobjectexception' => 'Luminova\\Exceptions\\InvalidObjectException',
              'pdo' => 'PDO',
              'pdostatement' => 'PDOStatement',
              'pdoexception' => 'PDOException',
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        16 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'rollback',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Rollback transaction if fails
     *
     * @return void
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
              'invalidobjectexception' => 'Luminova\\Exceptions\\InvalidObjectException',
              'pdo' => 'PDO',
              'pdostatement' => 'PDOStatement',
              'pdoexception' => 'PDOException',
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        17 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getType',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns the appropriate parameter type based on the value and type.
     *
     * @param mixed       $value The parameter value.
     * @param null|int    $type  The parameter type.
     *
     * @return int The parameter type.
    */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
              'invalidobjectexception' => 'Luminova\\Exceptions\\InvalidObjectException',
              'pdo' => 'PDO',
              'pdostatement' => 'PDOStatement',
              'pdoexception' => 'PDOException',
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'value',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'type',
               'type' => '?int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        18 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'bind',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Binds a value to a parameter.
     *
     * @param string       $param The parameter identifier.
     * @param mixed       $value The parameter value.
     * @param null|int    $type  The parameter type.
     *
     * @return self The current class instance.
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
              'invalidobjectexception' => 'Luminova\\Exceptions\\InvalidObjectException',
              'pdo' => 'PDO',
              'pdostatement' => 'PDOStatement',
              'pdoexception' => 'PDOException',
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'param',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'value',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'type',
               'type' => '?mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        19 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'param',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Binds a variable to a parameter.
     *
     * @param string       $param The parameter identifier.
     * @param mixed       $value The parameter value.
     * @param null|int    $type  The parameter type.
     *
     * @return self The current class instance.
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
              'invalidobjectexception' => 'Luminova\\Exceptions\\InvalidObjectException',
              'pdo' => 'PDO',
              'pdostatement' => 'PDOStatement',
              'pdoexception' => 'PDOException',
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'param',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'value',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'type',
               'type' => '?mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        20 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'execute',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Executes the prepared statement.
     * @param array $values execute statement with values
     * @throws DatabaseException 
     * 
     * @return void
    */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
              'invalidobjectexception' => 'Luminova\\Exceptions\\InvalidObjectException',
              'pdo' => 'PDO',
              'pdostatement' => 'PDOStatement',
              'pdoexception' => 'PDOException',
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'values',
               'type' => '?array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        21 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'rowCount',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns the number of rows affected by the last statement execution.
     *
     * @return int The number of rows.
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
              'invalidobjectexception' => 'Luminova\\Exceptions\\InvalidObjectException',
              'pdo' => 'PDO',
              'pdostatement' => 'PDOStatement',
              'pdoexception' => 'PDOException',
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'int',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        22 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getOne',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Fetches a single row as an object.
     *
     * @return mixed The result object or false if no row is found.
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
              'invalidobjectexception' => 'Luminova\\Exceptions\\InvalidObjectException',
              'pdo' => 'PDO',
              'pdostatement' => 'PDOStatement',
              'pdoexception' => 'PDOException',
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        23 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getAll',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Fetches all rows as an array of objects.
     *
     * @return mixed The array of result objects.
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
              'invalidobjectexception' => 'Luminova\\Exceptions\\InvalidObjectException',
              'pdo' => 'PDO',
              'pdostatement' => 'PDOStatement',
              'pdoexception' => 'PDOException',
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        24 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getInt',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Fetches all rows as a 2D array of integers.
     *
     * @return array The 2D array of integers.
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
              'invalidobjectexception' => 'Luminova\\Exceptions\\InvalidObjectException',
              'pdo' => 'PDO',
              'pdostatement' => 'PDOStatement',
              'pdoexception' => 'PDOException',
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'int',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        25 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getResult',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Fetches all rows as an array or stdClass object.
     *
     * @param string $type The type of result to fetch (\'object\' or \'array\').
     * 
     * @return array|stdClass The result containing the rows.
    */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
              'invalidobjectexception' => 'Luminova\\Exceptions\\InvalidObjectException',
              'pdo' => 'PDO',
              'pdostatement' => 'PDOStatement',
              'pdoexception' => 'PDOException',
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array|stdClass',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'type',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        26 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getObject',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Fetches all rows as a stdClass object.
     *
     * @return stdClass The stdClass object containing the result rows.
    */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
              'invalidobjectexception' => 'Luminova\\Exceptions\\InvalidObjectException',
              'pdo' => 'PDO',
              'pdostatement' => 'PDOStatement',
              'pdoexception' => 'PDOException',
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'stdClass',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        27 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getArray',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Fetches all rows as a array.
     *
     * @return array The array containing the result rows.
    */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
              'invalidobjectexception' => 'Luminova\\Exceptions\\InvalidObjectException',
              'pdo' => 'PDO',
              'pdostatement' => 'PDOStatement',
              'pdoexception' => 'PDOException',
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        28 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getLastInsertId',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns the ID of the last inserted row or sequence value.
     *
     * @return string The last insert ID.
     */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
              'invalidobjectexception' => 'Luminova\\Exceptions\\InvalidObjectException',
              'pdo' => 'PDO',
              'pdostatement' => 'PDOStatement',
              'pdoexception' => 'PDOException',
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        29 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'free',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Frees up the statement cursor and sets the statement object to null.
     * 
     * @return void
    */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
              'invalidobjectexception' => 'Luminova\\Exceptions\\InvalidObjectException',
              'pdo' => 'PDO',
              'pdostatement' => 'PDOStatement',
              'pdoexception' => 'PDOException',
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        30 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'close',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Frees up the statement cursor and close database connection
     * 
     * @return void
    */',
             'namespace' => 'Luminova\\Database\\Drivers',
             'uses' => 
            array (
              'driversinterface' => 'Luminova\\Database\\Drivers\\DriversInterface',
              'database' => 'Luminova\\Config\\Database',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
              'invalidobjectexception' => 'Luminova\\Exceptions\\InvalidObjectException',
              'pdo' => 'PDO',
              'pdostatement' => 'PDOStatement',
              'pdoexception' => 'PDOException',
              'stdclass' => 'stdClass',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Query.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Database\\Query',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => 'Luminova\\Database\\Connection',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
    * Class Constructor
    */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__get',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get properties
     * 
     * @param string $key
     * 
     * @return mixed 
    */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__isset',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Check if property key is set
     * 
     * @param string $key
     * 
     * @return bool 
    */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__wakeup',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getConn',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get database connection
     * 
     * @return object 
    */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'object',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'closeConn',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Close database connection
     * 
     * @return void 
    */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getInstance',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
    * Class Singleton
    * @return self object $instance
    */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'self',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'table',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Sets table name
     *
     * @param string $table The table name
     * @param string $as table alias
     * 
     * @return self $this Class instance.
     */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'table',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'as',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'join',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Sets join table name and method
     * @param string $table The table name
     * @param string $type The join type
     * @param string $as join table alias
     * 
     * @return self $this Class instance.
     */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'table',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'type',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'as',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        9 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'on',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Sets join table on clause
     * 
     * @param array $selectors Join selectors [\'key = table_key\', \'u.key = u2.key\']
     * 
     * @return self $this Class instance.
     */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'selectors',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        10 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'innerJoin',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Sets join table inner
     * 
     * @param string $table The table name
     * @param string $as join table alias
     * 
     * @return self $this Class instance.
     */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'table',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'as',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        11 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'leftJoin',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Sets join table left
     * 
     * @param string $table The table name
     * @param string $as join table alias
     * 
     * @return self $this Class instance.
     */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'table',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'as',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        12 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'limit',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set query limit
     * 
     * @param int $limit limit threshold 
     * @param int $offset start offset query limit
     * 
     * @return self class instance.
     */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'limit',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'offset',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        13 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'order',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set query order
     * @param string $order uid ASC, name DESC
     * 
     * @return self class instance.
     */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'order',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        14 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'group',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set query grouping
     * 
     * @param string $group group by column name
     * 
     * @return self class instance.
     */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'group',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        15 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'where',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set query where
     * 
     * @param string $column column name
     * @param mixed $key column key value
     * 
     * @return self class instance.
     */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'column',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        16 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'and',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set query where and
     * 
     * @param string $column column name
     * @param mixed $key column key value
     * 
     * @return Query class instance.
     */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'Luminova\\Database\\Query',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'column',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        17 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'set',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set update columns and values
     * 
     * @param string $column column name
     * @param string|int $value column key value
     * 
     * @return self class instance.
     */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'column',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'value',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        18 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'or',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set query where or | and or
     * 
     * @param string $column column name
     * @param mixed $key column key value
     * 
     * @return self class instance.
     */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'column',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        19 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'andOr',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set query AND (? OR ?)
     * @param string $column column name
     * @param mixed $key column key value
     * @param string $columnOr column name
     * @param mixed $keyOr column key value
     * 
     * @return self class instance.
     */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'column',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'columnOr',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            3 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'keyOr',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        20 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'toArray',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Convert an object to an array.
     *
     * @param mixed $input The object to convert to an array.
     * @return mixed The resulting array representation of the object.
     * 
     * @return array Finalized array representation of the object
     */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'input',
               'type' => '?mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        21 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'in',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set query where IN () expression
     * @param string $column column name
     * @param array $list of values
     * 
     * @return self class instance.
     */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'column',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'list',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        22 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'inset',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set query where FIND_IN_SET () expression
     * @param string $search search value
     * @param array $list of values
     * @param string $method allow specifying the method for matching (e.g., > or =)
     * 
     * @return self class instance.
     */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'search',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'list',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'method',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        23 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'cache',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Cache the query result using a specified storage.
     *
     * @param string $key The storage cache key
     * @param string $storage Private storage name hash name (optional): but is recommended to void storing large data in one file.
     * @param int $expiry The cache expiry time in seconds (default: 7 days).
     * 
     * @return self $this class instance.
     */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'storage',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'expiry',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        24 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'insert',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Insert into table
     * @param array $values array of values to insert into table
     * @param bool $bind Use bind values and prepare statement instead of query
     * 
     * @return int returns affected row counts.
     */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'int',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'values',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'bind',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        25 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'select',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Select from table,
     * 
     * @param array $columns select columns
     * 
     * @return object|null|array returns selected rows.
     */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'columns',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        26 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'binds',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Bind placeholder values to builder
     * 
     * @param array $values
     * @deprecated Don\'t use this method anymore use execute instead
     * @return self
    */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'values',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        27 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'query',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Select on record from table using cache
     * 
     * @param string $query database query string
     * 
     * @return self $this 
     * @throws DatabaseException when query is empty
     */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'query',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        28 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'builder',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Bind placeholder values to builder
     * 
     * @param string $query SQL query string
     * 
     * @deprecated Don\'t use this method anymore use query instead
     * @return self
     * @throws DatabaseException when query is empty
    */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'query',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        29 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'execute',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Execute query
     * Execute does not support cache method
     * 
     * @param array $binds binds placeholder to query
     * @param string $type [all, one, object, total, lastId, count or stmt]  or \'stmt\' to return Statements
     * 
     * @return Statements|object|array|int|null Statements or null when failed
     * @throws DatabaseException 
    */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'binds',
               'type' => '?array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'type',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        30 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'find',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Select on record from table,
     * @param array $columns select columns
     * 
     * @return object|null returns selected row.
     */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'columns',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        31 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'total',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Select on record from table,
     * @param array $columns select columns
     * 
     * @return int returns selected row.
    */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'int',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'column',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        32 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'update',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Update table with columns and values
     * @param array $setValues associative array of columns and values to update
     * @param int $limit number of records to update 
     * 
     * @return int returns affected row counts.
     */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'int',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'setValues',
               'type' => '?array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'limit',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        33 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'delete',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Delete from table
     * @param int $limit row limit
     * 
     * @return int returns affected row counts.
     */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'int',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'limit',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        34 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'errors',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get errors 
     * 
     * @return array 
    */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        35 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'transaction',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Begin a transaction
     * 
     * @return self 
    */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        36 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'commit',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Commit a transaction
     * 
     * @return void 
    */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        37 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'rollback',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Rollback a transaction to default
     * 
     * @return void 
    */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        38 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'truncate',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Delete all records in a table 
     * And alter table auto increment to 1
     * 
     * @param bool $transaction row limit
     * 
     * @return bool returns true if completed
     * @throws DatabaseException
    */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'transaction',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        39 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'drop',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Drop table from database
     * @return int returns affected row counts.
     */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'int',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        40 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'createTable',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Create a new table if it doesn\'t exist
     * 
     * @param array $columns table columns and options
     * 
     * @return int returns affected row counts.
     */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'int',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'columns',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        41 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'create',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get table column instance 
     * 
     * @param Columns $column table column instance
     * 
     * @return int affected row count
     */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'int',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'column',
               'type' => 'Luminova\\Database\\Columns',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        42 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'withColumns',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get table column instance 
     * 
     * @return Columns column class instance
     */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'Luminova\\Database\\Columns',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        43 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'buildWhereConditions',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Build query conditions.
     *
     * @param string $query The SQL query string to which conditions are added.
    */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => false,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'query',
               'type' => 'string',
               'byRef' => true,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        44 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'buildSearchConditions',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Build query search conditions.
     *
     * @param string $query The SQL query string to which search conditions are added.
     */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => false,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'query',
               'type' => 'string',
               'byRef' => true,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        45 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'reset',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Reset query conditions and Free database resources
     * 
     * @return void 
    */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        46 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'free',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Free database resources
     * 
     * @return void 
    */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        47 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'close',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Close database connection
     * 
     * @return void 
    */',
             'namespace' => 'Luminova\\Database',
             'uses' => 
            array (
              'connection' => 'Luminova\\Database\\Connection',
              'databaseexception' => 'Luminova\\Exceptions\\DatabaseException',
              'filecache' => 'Luminova\\Cache\\FileCache',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'statements' => 'Luminova\\Database\\Results\\Statements',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Database/Results/Statements.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Database\\Results\\Statements',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Initialize with executed statement
     * 
     * @param object $statement
    */',
             'namespace' => 'Luminova\\Database\\Results',
             'uses' => 
            array (
              'stdclass' => 'stdClass',
              'queries' => 'Luminova\\Database\\Results\\Queries',
              'reflectionclass' => 'ReflectionClass',
              'reflectionexception' => 'ReflectionException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'statement',
               'type' => 'object',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getAll',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Fetches all rows as an array of objects.
     *
     * @return mixed The array of result objects.
     */',
             'namespace' => 'Luminova\\Database\\Results',
             'uses' => 
            array (
              'stdclass' => 'stdClass',
              'queries' => 'Luminova\\Database\\Results\\Queries',
              'reflectionclass' => 'ReflectionClass',
              'reflectionexception' => 'ReflectionException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getOne',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Fetches a single row as an object.
     *
     * @return mixed The result object or false if no row is found.
     */',
             'namespace' => 'Luminova\\Database\\Results',
             'uses' => 
            array (
              'stdclass' => 'stdClass',
              'queries' => 'Luminova\\Database\\Results\\Queries',
              'reflectionclass' => 'ReflectionClass',
              'reflectionexception' => 'ReflectionException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getInt',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Fetches all rows as a 2D array of integers.
     *
     * @return int integers.
    */',
             'namespace' => 'Luminova\\Database\\Results',
             'uses' => 
            array (
              'stdclass' => 'stdClass',
              'queries' => 'Luminova\\Database\\Results\\Queries',
              'reflectionclass' => 'ReflectionClass',
              'reflectionexception' => 'ReflectionException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'int',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getObject',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Fetches all rows as a stdClass object.
     *
     * @return stdClass The stdClass object containing the result rows.
     */',
             'namespace' => 'Luminova\\Database\\Results',
             'uses' => 
            array (
              'stdclass' => 'stdClass',
              'queries' => 'Luminova\\Database\\Results\\Queries',
              'reflectionclass' => 'ReflectionClass',
              'reflectionexception' => 'ReflectionException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'stdClass',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getArray',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Fetches all rows as a array.
     *
     * @return array The array containing the result rows.
     */',
             'namespace' => 'Luminova\\Database\\Results',
             'uses' => 
            array (
              'stdclass' => 'stdClass',
              'queries' => 'Luminova\\Database\\Results\\Queries',
              'reflectionclass' => 'ReflectionClass',
              'reflectionexception' => 'ReflectionException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getLastId',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns the ID of the last inserted row or sequence value.
     *
     * @return string The last insert ID.
     */',
             'namespace' => 'Luminova\\Database\\Results',
             'uses' => 
            array (
              'stdclass' => 'stdClass',
              'queries' => 'Luminova\\Database\\Results\\Queries',
              'reflectionclass' => 'ReflectionClass',
              'reflectionexception' => 'ReflectionException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getCount',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns the number of rows affected by the last statement execution.
     *
     * @return int The number of rows.
    */',
             'namespace' => 'Luminova\\Database\\Results',
             'uses' => 
            array (
              'stdclass' => 'stdClass',
              'queries' => 'Luminova\\Database\\Results\\Queries',
              'reflectionclass' => 'ReflectionClass',
              'reflectionexception' => 'ReflectionException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'int',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getResult',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get result 
     * 
     * @param string $type [object, array]
     * 
     * @return stdClass|array The result
    */',
             'namespace' => 'Luminova\\Database\\Results',
             'uses' => 
            array (
              'stdclass' => 'stdClass',
              'queries' => 'Luminova\\Database\\Results\\Queries',
              'reflectionclass' => 'ReflectionClass',
              'reflectionexception' => 'ReflectionException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'stdClass|array',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'type',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        9 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'get',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get result 
     * 
     * @param string $type [all, one, total, object, array, lastId, count or className]
     * 
     * @return mixed|Queries
    */',
             'namespace' => 'Luminova\\Database\\Results',
             'uses' => 
            array (
              'stdclass' => 'stdClass',
              'queries' => 'Luminova\\Database\\Results\\Queries',
              'reflectionclass' => 'ReflectionClass',
              'reflectionexception' => 'ReflectionException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'type',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Email/Clients/MailClientInterface.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedInterfaceNode::__set_state(array(
       'name' => 'Luminova\\Email\\Clients\\MailClientInterface',
       'phpDoc' => NULL,
       'extends' => 
      array (
      ),
       'statements' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Email/Clients/NovaMailer.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Email\\Clients\\NovaMailer',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
        0 => 'Luminova\\Email\\Clients\\MailClientInterface',
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'CONTENT_TYPE_PLAINTEXT',
               'value' => '\'text/plain\'',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'CONTENT_TYPE_TEXT_CALENDAR',
               'value' => '\'text/calendar\'',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'CONTENT_TYPE_TEXT_HTML',
               'value' => '\'text/html\'',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'CONTENT_TYPE_MULTIPART_ALTERNATIVE',
               'value' => '\'multipart/alternative\'',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'CONTENT_TYPE_MULTIPART_MIXED',
               'value' => '\'multipart/mixed\'',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'CONTENT_TYPE_MULTIPART_RELATED',
               'value' => '\'multipart/related\'',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'ENCODING_7BIT',
               'value' => '\'7bit\'',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'ENCODING_8BIT',
               'value' => '\'8bit\'',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'ENCODING_BASE64',
               'value' => '\'base64\'',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        9 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'ENCODING_BINARY',
               'value' => '\'binary\'',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        10 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'ENCODING_QUOTED_PRINTABLE',
               'value' => '\'quoted-printable\'',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        11 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'Subject',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $Subject 
    */',
             'namespace' => 'Luminova\\Email\\Clients',
             'uses' => 
            array (
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        12 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'Body',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $Body 
    */',
             'namespace' => 'Luminova\\Email\\Clients',
             'uses' => 
            array (
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        13 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'AltBody',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $AltBody 
    */',
             'namespace' => 'Luminova\\Email\\Clients',
             'uses' => 
            array (
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        14 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'XMailer',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $XMailer 
    */',
             'namespace' => 'Luminova\\Email\\Clients',
             'uses' => 
            array (
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        15 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'CharSet',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $CharSet 
    */',
             'namespace' => 'Luminova\\Email\\Clients',
             'uses' => 
            array (
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        16 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'SMTPDebug',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var int $SMTPDebug 
    */',
             'namespace' => 'Luminova\\Email\\Clients',
             'uses' => 
            array (
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'int',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        17 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'exceptions',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var bool $exceptions 
    */',
             'namespace' => 'Luminova\\Email\\Clients',
             'uses' => 
            array (
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'bool',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        18 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'Host',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $Host 
    */',
             'namespace' => 'Luminova\\Email\\Clients',
             'uses' => 
            array (
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        19 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'Port',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $Port 
    */',
             'namespace' => 'Luminova\\Email\\Clients',
             'uses' => 
            array (
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        20 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'SMTPAuth',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var bool $SMTPAuth 
    */',
             'namespace' => 'Luminova\\Email\\Clients',
             'uses' => 
            array (
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'bool',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        21 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'Username',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $Username 
    */',
             'namespace' => 'Luminova\\Email\\Clients',
             'uses' => 
            array (
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        22 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'Password',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $Password 
    */',
             'namespace' => 'Luminova\\Email\\Clients',
             'uses' => 
            array (
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        23 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'SMTPSecure',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $SMTPSecure 
    */',
             'namespace' => 'Luminova\\Email\\Clients',
             'uses' => 
            array (
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        24 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Constructor.
     *
     * @param bool $exceptions Should we throw external exceptions?
     */',
             'namespace' => 'Luminova\\Email\\Clients',
             'uses' => 
            array (
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'exceptions',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        25 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'addAddress',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Add an email address to the recipient list.
     *
     * @param string $address The email address.
     * @param string $name    The recipient\'s name (optional).
     *
     * @return bool True if the address was added successfully, false otherwise.
     */',
             'namespace' => 'Luminova\\Email\\Clients',
             'uses' => 
            array (
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'address',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'name',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        26 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'addCC',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Add an email address to the recipient list.
     *
     * @param string $address The email address.
     * @param string $name    The recipient\'s name (optional).
     *
     * @return bool True if the address was added successfully, false otherwise.
     */',
             'namespace' => 'Luminova\\Email\\Clients',
             'uses' => 
            array (
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'address',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'name',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        27 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'addBCC',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Add an email address to the recipient list.
     *
     * @param string $address The email address.
     * @param string $name    The recipient\'s name (optional).
     *
     * @return bool True if the address was added successfully, false otherwise.
     */',
             'namespace' => 'Luminova\\Email\\Clients',
             'uses' => 
            array (
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'address',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'name',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        28 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'addReplyTo',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Add a reply-to address.
     *
     * @param string $address The email address.
     * @param string $name    The recipient\'s name (optional).
     *
     * @return bool True if the reply-to address was added successfully, false otherwise.
     */',
             'namespace' => 'Luminova\\Email\\Clients',
             'uses' => 
            array (
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'address',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'name',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        29 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setFrom',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set the email sender\'s address.
     *
     * @param string $address The email address.
     * @param string $name    The sender\'s name (optional).
     * @param bool   $auto    Whether to automatically add the sender\'s name (optional).
     *
     * @return bool True if the sender\'s address was set successfully, false otherwise.
     */',
             'namespace' => 'Luminova\\Email\\Clients',
             'uses' => 
            array (
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'address',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'name',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'auto',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        30 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'addAttachment',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Add an attachment from a path on the filesystem.
     * Never use a user-supplied path to a file!
     * Returns false if the file could not be found or read.
     * Explicitly *does not* support passing URLs; PHPMailer is not an HTTP client.
     * If you need to do that, fetch the resource yourself and pass it in via a local file or string.
     *
     * @param string $path        Path to the attachment
     * @param string $name        Overrides the attachment name
     * @param string $encoding    File encoding (see $Encoding)
     * @param string $type        MIME type, e.g. `image/jpeg`; determined automatically from $path if not specified
     * @param string $disposition Disposition to use
     *
     * @throws Exception
     *
     * @return bool
     */',
             'namespace' => 'Luminova\\Email\\Clients',
             'uses' => 
            array (
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'path',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'name',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'encoding',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            3 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'type',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            4 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'disposition',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        31 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'send',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Send the email.
     *
     * @return bool True if the email was sent successfully, false otherwise.
    */',
             'namespace' => 'Luminova\\Email\\Clients',
             'uses' => 
            array (
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        32 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'isSMTP',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Send messages using SMTP.
     * 
     * @return void
     */',
             'namespace' => 'Luminova\\Email\\Clients',
             'uses' => 
            array (
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        33 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'isMail',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Send messages using PHP\'s mail() function.
     * 
     * @return void
     */',
             'namespace' => 'Luminova\\Email\\Clients',
             'uses' => 
            array (
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        34 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'isHTML',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Sets message type to HTML or plain.
     *
     * @param bool $isHtml True for HTML mode
     * 
     * @return void
     */',
             'namespace' => 'Luminova\\Email\\Clients',
             'uses' => 
            array (
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'isHtml',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        35 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'fileIsAccessible',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Check whether a file path is safe, accessible, and readable.
     *
     * @param string $path A relative or absolute path to a file
     *
     * @return bool
     */',
             'namespace' => 'Luminova\\Email\\Clients',
             'uses' => 
            array (
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => false,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'path',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        36 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'isPermittedPath',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Check whether a file path is of a permitted type.
     * Used to reject URLs and phar files from functions that access local file paths,
     * such as addAttachment.
     *
     * @param string $path A relative or absolute path to a file
     *
     * @return bool
     */',
             'namespace' => 'Luminova\\Email\\Clients',
             'uses' => 
            array (
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => false,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'path',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Email/Clients/PHPMailer.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Email\\Clients\\PHPMailer',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => 'PHPMailer\\PHPMailer\\PHPMailer',
       'implements' => 
      array (
        0 => 'Luminova\\Email\\Clients\\MailClientInterface',
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Constructor.
     *
     * @param bool $exceptions Should we throw external exceptions?
     */',
             'namespace' => 'Luminova\\Email\\Clients',
             'uses' => 
            array (
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'phpmailerclient' => 'PHPMailer\\PHPMailer\\PHPMailer',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'exceptions',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Email/Exceptions/MailerException.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Email\\Exceptions\\MailerException',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => 'Luminova\\Exceptions\\AppException',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'throwWith',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Thrown when a cookie-related error occurs.
     *
     * @param string $type The type of error.
     * @param mixed|null $name The cookie name associated with the error (if applicable).
     * @return static
     */',
             'namespace' => 'Luminova\\Email\\Exceptions',
             'uses' => 
            array (
              'appexception' => 'Luminova\\Exceptions\\AppException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'type',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'name',
               'type' => '?mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Email/Mailer.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Email\\Mailer',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'Subject',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Message subject
     * 
     * @var string $Subject
    */',
             'namespace' => 'Luminova\\Email',
             'uses' => 
            array (
              'exception' => 'Exception',
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'novamailer' => 'Luminova\\Email\\Clients\\NovaMailer',
              'phpmailer' => 'Luminova\\Email\\Clients\\PHPMailer',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'Body',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Message body
     * 
     * @var string $Body
    */',
             'namespace' => 'Luminova\\Email',
             'uses' => 
            array (
              'exception' => 'Exception',
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'novamailer' => 'Luminova\\Email\\Clients\\NovaMailer',
              'phpmailer' => 'Luminova\\Email\\Clients\\PHPMailer',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'AltBody',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Alternative message body
     * 
     * @var string $AltBody 
    */',
             'namespace' => 'Luminova\\Email',
             'uses' => 
            array (
              'exception' => 'Exception',
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'novamailer' => 'Luminova\\Email\\Clients\\NovaMailer',
              'phpmailer' => 'Luminova\\Email\\Clients\\PHPMailer',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getClient',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the Mailer client instance.
     * 
     * @return self::$client The Mailer client instance.
     */',
             'namespace' => 'Luminova\\Email',
             'uses' => 
            array (
              'exception' => 'Exception',
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'novamailer' => 'Luminova\\Email\\Clients\\NovaMailer',
              'phpmailer' => 'Luminova\\Email\\Clients\\PHPMailer',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'object',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getInstance',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the Mailer instance.
     *
     * @param MailClientInterface|string|null $client The mail client instance or class name.
     * 
     * @throws MailerException
    */',
             'namespace' => 'Luminova\\Email',
             'uses' => 
            array (
              'exception' => 'Exception',
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'novamailer' => 'Luminova\\Email\\Clients\\NovaMailer',
              'phpmailer' => 'Luminova\\Email\\Clients\\PHPMailer',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'client',
               'type' => 'Luminova\\Email\\Clients\\MailClientInterface|string|null|null',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'addAddress',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Add an email address to the recipient list.
     *
     * @param string $address The email address.
     * @param string $name    The recipient\'s name (optional).
     *
     * @return bool True if the address was added successfully, false otherwise.
     */',
             'namespace' => 'Luminova\\Email',
             'uses' => 
            array (
              'exception' => 'Exception',
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'novamailer' => 'Luminova\\Email\\Clients\\NovaMailer',
              'phpmailer' => 'Luminova\\Email\\Clients\\PHPMailer',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'address',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'name',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'addReplyTo',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Add a reply-to address.
     *
     * @param string $address The email address.
     * @param string $name    The recipient\'s name (optional).
     *
     * @return bool True if the reply-to address was added successfully, false otherwise.
     */',
             'namespace' => 'Luminova\\Email',
             'uses' => 
            array (
              'exception' => 'Exception',
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'novamailer' => 'Luminova\\Email\\Clients\\NovaMailer',
              'phpmailer' => 'Luminova\\Email\\Clients\\PHPMailer',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'address',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'name',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'addCC',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Add an email address to the recipient list.
     *
     * @param string $address The email address.
     * @param string $name    The recipient\'s name (optional).
     *
     * @return bool True if the address was added successfully, false otherwise.
     */',
             'namespace' => 'Luminova\\Email',
             'uses' => 
            array (
              'exception' => 'Exception',
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'novamailer' => 'Luminova\\Email\\Clients\\NovaMailer',
              'phpmailer' => 'Luminova\\Email\\Clients\\PHPMailer',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'address',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'name',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'addBCC',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Add an email address to the recipient list.
     *
     * @param string $address The email address.
     * @param string $name    The recipient\'s name (optional).
     *
     * @return bool True if the address was added successfully, false otherwise.
     */',
             'namespace' => 'Luminova\\Email',
             'uses' => 
            array (
              'exception' => 'Exception',
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'novamailer' => 'Luminova\\Email\\Clients\\NovaMailer',
              'phpmailer' => 'Luminova\\Email\\Clients\\PHPMailer',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'address',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'name',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        9 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setFrom',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set the email sender\'s address.
     *
     * @param string $address The email address.
     * @param string $name    The sender\'s name (optional).
     * @param bool   $auto    Whether to automatically add the sender\'s name (optional).
     *
     * @return bool True if the sender\'s address was set successfully, false otherwise.
     */',
             'namespace' => 'Luminova\\Email',
             'uses' => 
            array (
              'exception' => 'Exception',
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'novamailer' => 'Luminova\\Email\\Clients\\NovaMailer',
              'phpmailer' => 'Luminova\\Email\\Clients\\PHPMailer',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'address',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'name',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'auto',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        10 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setBody',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Sets the body of the email message.
     *
     * @param string $message The body content of the email.
     */',
             'namespace' => 'Luminova\\Email',
             'uses' => 
            array (
              'exception' => 'Exception',
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'novamailer' => 'Luminova\\Email\\Clients\\NovaMailer',
              'phpmailer' => 'Luminova\\Email\\Clients\\PHPMailer',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'message',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        11 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setAltBody',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Sets the alternative body of the email message.
     *
     * @param string $message The alternative body content of the email.
     */',
             'namespace' => 'Luminova\\Email',
             'uses' => 
            array (
              'exception' => 'Exception',
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'novamailer' => 'Luminova\\Email\\Clients\\NovaMailer',
              'phpmailer' => 'Luminova\\Email\\Clients\\PHPMailer',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'message',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        12 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setSubject',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Sets the subject of the email message.
     *
     * @param string $subject The subject of the email.
     */',
             'namespace' => 'Luminova\\Email',
             'uses' => 
            array (
              'exception' => 'Exception',
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'novamailer' => 'Luminova\\Email\\Clients\\NovaMailer',
              'phpmailer' => 'Luminova\\Email\\Clients\\PHPMailer',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'subject',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        13 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'addAttachment',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Add an attachment from a path on the filesystem.
     * Never use a user-supplied path to a file!
     * Returns false if the file could not be found or read.
     * Explicitly *does not* support passing URLs; PHPMailer is not an HTTP client.
     * If you need to do that, fetch the resource yourself and pass it in via a local file or string.
     *
     * @param string $path        Path to the attachment
     * @param string $name        Overrides the attachment name
     * @param string $encoding    File encoding (see $Encoding)
     * @param string $type        MIME type, e.g. `image/jpeg`; determined automatically from $path if not specified
     * @param string $disposition Disposition to use
     *
     * @throws Exception
     *
     * @return bool
     */',
             'namespace' => 'Luminova\\Email',
             'uses' => 
            array (
              'exception' => 'Exception',
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'novamailer' => 'Luminova\\Email\\Clients\\NovaMailer',
              'phpmailer' => 'Luminova\\Email\\Clients\\PHPMailer',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'path',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'name',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'encoding',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            3 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'type',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            4 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'disposition',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        14 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'send',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Send the email.
     *
     * @return bool True if the email was sent successfully, false otherwise.
     */',
             'namespace' => 'Luminova\\Email',
             'uses' => 
            array (
              'exception' => 'Exception',
              'mailclientinterface' => 'Luminova\\Email\\Clients\\MailClientInterface',
              'novamailer' => 'Luminova\\Email\\Clients\\NovaMailer',
              'phpmailer' => 'Luminova\\Email\\Clients\\PHPMailer',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'mailerexception' => 'Luminova\\Email\\Exceptions\\MailerException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Errors/Codes.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Errors\\Codes',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => true,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'ERROR_404',
               'value' => '404',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'ERROR_500',
               'value' => '500',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'ERROR_1001',
               'value' => '1001',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'ERROR_1002',
               'value' => '1002',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Errors/Error.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Errors\\Error',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getName',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get error type
     * 
     * @param int $errno error code
     * 
     * @return string
    */',
             'namespace' => 'Luminova\\Errors',
             'uses' => 
            array (
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'logger' => 'Luminova\\Logger\\Logger',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'errno',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'display',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Display error
     * 
     * @param string $message Error message
     * @param int $code error code
     * 
     * @return void
    */',
             'namespace' => 'Luminova\\Errors',
             'uses' => 
            array (
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'logger' => 'Luminova\\Logger\\Logger',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'message',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'code',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'handle',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Handle errors 
     * 
     * @param int $errno Error code
     * @param string $message Error message
     * @param string $errFile Error file
     * @param int $errLine
     * @param bool $shutdown handle shutdown
     * 
     * @return void
    */',
             'namespace' => 'Luminova\\Errors',
             'uses' => 
            array (
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'logger' => 'Luminova\\Logger\\Logger',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'errno',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'message',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'errFile',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            3 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'errLine',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            4 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'shutdown',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'shutdown',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Handle shutdown errors 
     * 
     * @return void
    */',
             'namespace' => 'Luminova\\Errors',
             'uses' => 
            array (
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'logger' => 'Luminova\\Logger\\Logger',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'log',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Log a message at a specified log level.
     * 
     * @param string $level The log level (e.g., "emergency," "error," "info").
     * @param string $message The message to log.
     * @param array $context Additional context data (optional).
     * 
     * @return void
     */',
             'namespace' => 'Luminova\\Errors',
             'uses' => 
            array (
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'logger' => 'Luminova\\Logger\\Logger',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'level',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'message',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'context',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Exceptions/AppException.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Exceptions\\AppException',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => 'Exception',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Constructor for AppException.
     *
     * @param string     $message   The exception message (default: \'Database error\').
     * @param int        $code      The exception code (default: 500).
     * @param Exception $previous  The previous exception if applicable (default: null).
     */',
             'namespace' => 'Luminova\\Exceptions',
             'uses' => 
            array (
              'exception' => 'Exception',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'logger' => 'Luminova\\Logger\\Logger',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'message',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'code',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'previous',
               'type' => '?Exception',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__toString',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get a string representation of the exception.
     *
     * @return string A formatted error message.
     */',
             'namespace' => 'Luminova\\Exceptions',
             'uses' => 
            array (
              'exception' => 'Exception',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'logger' => 'Luminova\\Logger\\Logger',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'handle',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Handle the exception based on the production environment.
     * 
     * @throws $this Exception
     */',
             'namespace' => 'Luminova\\Exceptions',
             'uses' => 
            array (
              'exception' => 'Exception',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'logger' => 'Luminova\\Logger\\Logger',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'logException',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Logs an exception
     *
     * 
     * @return void
     */',
             'namespace' => 'Luminova\\Exceptions',
             'uses' => 
            array (
              'exception' => 'Exception',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'logger' => 'Luminova\\Logger\\Logger',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'throwException',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Create and handle a Exception.
     *
     * @param string $message he exception message.
     * @param bool|null $production Indicates whether it\'s a production environment (default: false).
     * @param int $code The exception code (default: 500).
     * 
     * @return void 
     * @throws $this Exception
     */',
             'namespace' => 'Luminova\\Exceptions',
             'uses' => 
            array (
              'exception' => 'Exception',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'logger' => 'Luminova\\Logger\\Logger',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'message',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'production',
               'type' => '?bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'code',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'highlightFile',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Creates a syntax-highlighted version of a PHP file.
     *
     * @return bool|string
     */',
             'namespace' => 'Luminova\\Exceptions',
             'uses' => 
            array (
              'exception' => 'Exception',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'logger' => 'Luminova\\Logger\\Logger',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'file',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'lineNumber',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'lines',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Exceptions/ClassException.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Exceptions\\ClassException',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => 'Luminova\\Exceptions\\AppException',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Constructor for ClassException.
     *
     * @param string     $class   The exception class
     * @param int        $code      The exception code (default: 500).
     * @param Exception $previous  The previous exception if applicable (default: null).
     */',
             'namespace' => 'Luminova\\Exceptions',
             'uses' => 
            array (
              'appexception' => 'Luminova\\Exceptions\\AppException',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'class',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'code',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'previous',
               'type' => '?Exception',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Exceptions/DatabaseException.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Exceptions\\DatabaseException',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => 'Luminova\\Exceptions\\AppException',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Exceptions/ErrorException.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Exceptions\\ErrorException',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => 'Luminova\\Exceptions\\AppException',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Exceptions/FileException.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Exceptions\\FileException',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => 'Luminova\\Exceptions\\AppException',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Exceptions/InvalidException.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Exceptions\\InvalidException',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => 'Luminova\\Exceptions\\AppException',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Exceptions/InvalidObjectException.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Exceptions\\InvalidObjectException',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => 'Luminova\\Exceptions\\AppException',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Constructor for InvalidObjectException.
     *
     * @param string     $key   The exception key as message
     * @param int        $code      The exception code (default: 500).
     * @param Exception $previous  The previous exception if applicable (default: null).
     */',
             'namespace' => 'Luminova\\Exceptions',
             'uses' => 
            array (
              'appexception' => 'Luminova\\Exceptions\\AppException',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'code',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'previous',
               'type' => '?Exception',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Exceptions/LuminovaException.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Exceptions\\LuminovaException',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => 'Luminova\\Exceptions\\AppException',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Constructor for LuminovaException.
     *
     * @param string     $class   The exception class
     * @param int        $code      The exception code (default: 500).
     * @param Exception $previous  The previous exception if applicable (default: null).
     */',
             'namespace' => 'Luminova\\Exceptions',
             'uses' => 
            array (
              'appexception' => 'Luminova\\Exceptions\\AppException',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'class',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'code',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'previous',
               'type' => '?Exception',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Exceptions/NotFoundException.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Exceptions\\NotFoundException',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => 'Luminova\\Exceptions\\AppException',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Exceptions/RuntimeException.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Exceptions\\RuntimeException',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => 'Luminova\\Exceptions\\AppException',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Exceptions/ValidationException.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Exceptions\\ValidationException',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => 'Luminova\\Exceptions\\AppException',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Exceptions/ViewNotFoundException.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Exceptions\\ViewNotFoundException',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => 'Luminova\\Exceptions\\AppException',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Constructor for ViewNotFoundException.
     *
     * @param string     $view   The exception view
     * @param int        $code      The exception code (default: 500).
     * @param Exception $previous  The previous exception if applicable (default: null).
     */',
             'namespace' => 'Luminova\\Exceptions',
             'uses' => 
            array (
              'appexception' => 'Luminova\\Exceptions\\AppException',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'view',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'code',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'previous',
               'type' => '?Exception',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Functions/Document.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Functions\\Document',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'BADGE_LINK',
               'value' => '1',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'BADGE_SPAN',
               'value' => '2',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'badges',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
	 * Creates badges from an array of tags.
	 *
	 * @param array $tags List of tags [a, b, c] or [key => a, key => b, key => c].
	 * @param string $class CSS class for styling.
	 * @param int $type Badge type (self::BADGE_SPAN or self::BADGE_LINK).
	 * @param string $urlPrefix URL prefix to append if badge type is self::BADGE_LINK.
	 * 
	 * @deprecated this method is deprecated and will be removed in future
	 * @return string HTML span/link elements.
	 */',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'tags',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'class',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'type',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            3 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'urlPrefix',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'buttonBadges',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
	 * Creates button badges from an array of tags.
	 *
	 * @param array $tags List of tags [a, b, c] or [key => a, key => b, key => c].
	 * @param string $class CSS class for styling.
	 * @param bool $truncate Whether to truncate badges if they exceed the limit.
	 * @param int $limit Maximum number of badges to display before truncating.
	 * @param string|null $selected The active badge value.
	 * 
	 * @deprecated this method is deprecated and will be removed in future
	 * @return string HTML span/button elements.
	 */',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'tags',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'class',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'truncate',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            3 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'limit',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            4 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'selected',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Functions/Escaper.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Functions\\Escaper',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'encoding',
          ),
           'phpDoc' => NULL,
           'type' => 'string',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'encodingFlags',
          ),
           'phpDoc' => NULL,
           'type' => 'int',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'supportedEncodings',
          ),
           'phpDoc' => NULL,
           'type' => 'array',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Constructor.
     * 
     * @param string $encoding The character encoding to use. Defaults to \'utf-8\'.
     */',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
              'laminasescaper' => 'Laminas\\Escaper\\Escaper',
              'exception' => 'Exception',
              'runtimeexception' => 'RuntimeException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'encoding',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__call',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Magic method to handle method calls dynamically.
     * 
     * @param string $name The name of the method being called.
     * @param array $arguments The arguments passed to the method.
     * @return mixed The result of the method call.
     * @throws Exception When the called method does not exist.
     */',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
              'laminasescaper' => 'Laminas\\Escaper\\Escaper',
              'exception' => 'Exception',
              'runtimeexception' => 'RuntimeException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'name',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'arguments',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getEncoding',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the character encoding used by the escaper.
     * 
     * @return string The character encoding.
     */',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
              'laminasescaper' => 'Laminas\\Escaper\\Escaper',
              'exception' => 'Exception',
              'runtimeexception' => 'RuntimeException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => false,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'escapeHtml',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Escape HTML special characters.
     * 
     * @param string $string The string to be escaped.
     * @return string The escaped string.
     */',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
              'laminasescaper' => 'Laminas\\Escaper\\Escaper',
              'exception' => 'Exception',
              'runtimeexception' => 'RuntimeException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => false,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'string',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'escapeHtmlAttr',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Escape HTML attribute values.
     * 
     * @param string $string The string to be escaped.
     * @return string The escaped string.
     */',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
              'laminasescaper' => 'Laminas\\Escaper\\Escaper',
              'exception' => 'Exception',
              'runtimeexception' => 'RuntimeException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => false,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'string',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'escapeJs',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Escape JavaScript special characters.
     * 
     * @param array|string $string The string or array of strings to be escaped.
     * @return array|string The escaped string or array of strings.
     */',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
              'laminasescaper' => 'Laminas\\Escaper\\Escaper',
              'exception' => 'Exception',
              'runtimeexception' => 'RuntimeException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => false,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array|string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'string',
               'type' => 'array|string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        9 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'escapeCss',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Escape CSS special characters.
     * 
     * @param string $string The string to be escaped.
     * @return string The escaped string.
     */',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
              'laminasescaper' => 'Laminas\\Escaper\\Escaper',
              'exception' => 'Exception',
              'runtimeexception' => 'RuntimeException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => false,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'string',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        10 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'toUtf8',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Convert a string to UTF-8 encoding.
     * 
     * @param string $string The string to be converted.
     * @return string The converted string.
     * @throws RuntimeException When the string is not valid UTF-8 or cannot be converted.
     */',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
              'laminasescaper' => 'Laminas\\Escaper\\Escaper',
              'exception' => 'Exception',
              'runtimeexception' => 'RuntimeException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => false,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'string',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        11 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'fromUtf8',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Convert a string from UTF-8 encoding.
     * 
     * @param string $string The string to be converted.
     * @return string The converted string.
     */',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
              'laminasescaper' => 'Laminas\\Escaper\\Escaper',
              'exception' => 'Exception',
              'runtimeexception' => 'RuntimeException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => false,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'string',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        12 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'isUtf8',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Check if a string is UTF-8 encoded.
     * 
     * @param string $string The string to be checked.
     * @return bool True if the string is UTF-8 encoded, false otherwise.
     */',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
              'laminasescaper' => 'Laminas\\Escaper\\Escaper',
              'exception' => 'Exception',
              'runtimeexception' => 'RuntimeException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => false,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'string',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        13 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'convertEncoding',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Convert a string to a different character encoding.
     * 
     * @param array|string $string The string or array of strings to be converted.
     * @param string $to The target character encoding.
     * @param array|string|null $from The source character encoding. Defaults to null (auto-detection).
     * @return string The converted string.
     */',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
              'laminasescaper' => 'Laminas\\Escaper\\Escaper',
              'exception' => 'Exception',
              'runtimeexception' => 'RuntimeException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => false,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'string',
               'type' => 'array|string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'to',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'from',
               'type' => 'null|array|string|null',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Functions/Files.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Functions\\Files',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'copy',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
	 * Copy files and folders from the source directory to the destination directory.
	 *
	 * @param string $origin The source directory.
	 * @param string $dest The destination directory.
	 *
	 * @return bool True if the copy operation is successful, false otherwise.
	 */',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'origin',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'dest',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'download',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
	 * Download a file to the user\'s browser.
	 *
	 * @param string $file The full file path to download.
	 * @param string $name The filename as it will be shown in the download.
	 * @param bool $delete Whether to delete the file after download (default: false).
     * 
     * @return bool
	 */',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'file',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'name',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'delete',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'remove',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
	 * Deletes files and folders.
	 *
	 * @param string $dir   Directory to delete files.
	 * @param bool   $base  Remove the base directory once done (default is false).
     * 
	 * @return bool         Returns true once the function is called.
	 */',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'dir',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'base',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Functions/Functions.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Functions\\Functions',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'INT',
               'value' => '"int"',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'CHAR',
               'value' => '"char"',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'STR',
               'value' => '"str"',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'SALT',
               'value' => '"salt"',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'SID',
               'value' => '"sid"',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'UUI',
               'value' => '"uui"',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'PASS',
               'value' => '"pass"',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'toName',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
	 * Format input to person name
	 * 
	 * @param string $input input string
	 * @param string $replacement replacement unwanted string
	 * 
	 * @return string $format
	*/',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
              'escaper' => 'Luminova\\Functions\\Escaper',
              'invalidargumentexception' => 'InvalidArgumentException',
              'countable' => 'Countable',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'input',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'replacement',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'matchIn',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
	 * Check if variable matches any of the array values
	 * 
	 * @param string $needle input string
	 * @param array $haystack The array to search in
	 * 
	 * @return bool true or false
	*/',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
              'escaper' => 'Luminova\\Functions\\Escaper',
              'invalidargumentexception' => 'InvalidArgumentException',
              'countable' => 'Countable',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'needle',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'haystack',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        9 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'isNameBanned',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
	 * Check if variable matches any of the array values
	 * 
	 * @param string $needle input string
	 * @param array $haystack The array to search in
	 * 
	 * @deprecated this method is deprecated and will be removed in future use matchIn() method instead
	 * @return bool true or false
	*/',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
              'escaper' => 'Luminova\\Functions\\Escaper',
              'invalidargumentexception' => 'InvalidArgumentException',
              'countable' => 'Countable',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'nameToCheck',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'bannedNames',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        10 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'sanitizeText',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
	 * Format text before display or saving 
	 * By matching links, email, phone, hashtags and mentions with a link representation
	 * And replace multiple new lines
	 * 
	 * @param string $text
	 * @param string $target link target action
	 * @param string $blocked Replace blocked word with
	 * 
	 * @return string $text
	*/',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
              'escaper' => 'Luminova\\Functions\\Escaper',
              'invalidargumentexception' => 'InvalidArgumentException',
              'countable' => 'Countable',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'text',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'target',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'blocked',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        11 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'filterText',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
	 * Filter and sanitize text before saving to database 
	 * 
	 * @param string $text
	 * @param bool $all
	 * 
	 * @return string $text
	*/',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
              'escaper' => 'Luminova\\Functions\\Escaper',
              'invalidargumentexception' => 'InvalidArgumentException',
              'countable' => 'Countable',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'text',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'all',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        12 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'random',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
	 * Generate a random value.
	 *
	 * @param int $length The length of the random value.
	 * @param string $type The type of random value (e.g., self::INT, self::CHAR, self::STR).
	 * @param bool $upper Whether to make the value uppercase if it\'s a string.
	 * @return string The generated random value.
	 */',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
              'escaper' => 'Luminova\\Functions\\Escaper',
              'invalidargumentexception' => 'InvalidArgumentException',
              'countable' => 'Countable',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'length',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'type',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'upper',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        13 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'bigInteger',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
	 * Create a random integer based on minimum and maximum
	 * @param int $min number
	 * @param int $max number
	 * @return string 
	*/',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
              'escaper' => 'Luminova\\Functions\\Escaper',
              'invalidargumentexception' => 'InvalidArgumentException',
              'countable' => 'Countable',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'min',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'max',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        14 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'EAN',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
	 * Generate product EAN13 id
	 * 
	 * @param int $country start prefix country code
	 * @param int $length maximum length
	 * 
	 * @return int 
	*/',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
              'escaper' => 'Luminova\\Functions\\Escaper',
              'invalidargumentexception' => 'InvalidArgumentException',
              'countable' => 'Countable',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'int',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'country',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'length',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        15 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'UPC',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
	 * Generate a product UPC ID.
	 *
	 * @param int $prefix Start prefix number.
	 * @param int $length Maximum length.
	 * 
	 * @return string The generated UPC ID.
	 */',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
              'escaper' => 'Luminova\\Functions\\Escaper',
              'invalidargumentexception' => 'InvalidArgumentException',
              'countable' => 'Countable',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'prefix',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'length',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        16 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'timeSocial',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
	 * Converts a PHP timestamp to a social media-style time format (e.g., "2 hours ago").
	 *
	 * @param string|int $time The timestamp to convert.
	 * 
	 * @deprecated This method is deprecated and will be removed use Time::ago($time) instead
	 * @return string Time in a human-readable format.
	 */',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
              'escaper' => 'Luminova\\Functions\\Escaper',
              'invalidargumentexception' => 'InvalidArgumentException',
              'countable' => 'Countable',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'time',
               'type' => 'string|int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        17 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'timeHasPassed',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
	 * Check if a certain amount of minutes has passed since the given timestamp.
	 *
	 * @param int|string $timestamp Either a Unix timestamp or a string representing a date/time.
	 * @param int $minutes The number of minutes to check against.
	 *
	 * @return bool True if the specified minutes have passed, false otherwise.
	 */',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
              'escaper' => 'Luminova\\Functions\\Escaper',
              'invalidargumentexception' => 'InvalidArgumentException',
              'countable' => 'Countable',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'timestamp',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'minutes',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        18 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'daysSuffix',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
	 * Get the suffix for a given day (e.g., 1st, 2nd, 3rd, 4th).
	 *
	 * @param int $day The day for which to determine the suffix.
	 * 
	 * @deprecated This method is deprecated and will be removed use Time::daySuffix($day) instead
	 * @return string The day with its appropriate suffix.
	 */',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
              'escaper' => 'Luminova\\Functions\\Escaper',
              'invalidargumentexception' => 'InvalidArgumentException',
              'countable' => 'Countable',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'day',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        19 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'isEmpty',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
	 * Check if values are empty
	 * 
	 * @param mixed ...$values arguments
	 * 
	 * @return bool
	 */',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
              'escaper' => 'Luminova\\Functions\\Escaper',
              'invalidargumentexception' => 'InvalidArgumentException',
              'countable' => 'Countable',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'values',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => true,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        20 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'uuid',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
	* Generates uuid string version 4
	* @return string uuid
	*/',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
              'escaper' => 'Luminova\\Functions\\Escaper',
              'invalidargumentexception' => 'InvalidArgumentException',
              'countable' => 'Countable',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        21 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'is_uuid',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
	* Checks a valid uuid version 4
	* @param string $uuid 
	* @return bool true or false
	*/',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
              'escaper' => 'Luminova\\Functions\\Escaper',
              'invalidargumentexception' => 'InvalidArgumentException',
              'countable' => 'Countable',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'uuid',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        22 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'uuidToKey',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'uuid',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        23 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'is_email',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
	 * Checks if string is a valid email address
	 * 
	 * @param string $email email address to validate
	 * 
	 * @return bool true or false
	 */',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
              'escaper' => 'Luminova\\Functions\\Escaper',
              'invalidargumentexception' => 'InvalidArgumentException',
              'countable' => 'Countable',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'email',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        24 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'is_phone',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
	* Checks if string is a valid phone number
	*
	* @param mixed $phone phone address to validate
	*
	* @return bool true or false
	*/',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
              'escaper' => 'Luminova\\Functions\\Escaper',
              'invalidargumentexception' => 'InvalidArgumentException',
              'countable' => 'Countable',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'phone',
               'type' => 'string|int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        25 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'formatPhone',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
	* Formats a phone number as (xxx) xxx-xxxx or xxx-xxxx depending on the length.
	*
	* @param mixed $phone phone address to format
	*
	* @return string 
	*/',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
              'escaper' => 'Luminova\\Functions\\Escaper',
              'invalidargumentexception' => 'InvalidArgumentException',
              'countable' => 'Countable',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'phone',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        26 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'is_email_or_phone',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
	 * Checks if string is a valid email address or phone number
	 * 
	 * @param string $input email address or phone number to validate
	 * 
	 * @deprecated this method is deprecated and will be removed in future 
	 * @return bool true or false
	 */',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
              'escaper' => 'Luminova\\Functions\\Escaper',
              'invalidargumentexception' => 'InvalidArgumentException',
              'countable' => 'Countable',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'input',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        27 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'isPhoneNumber',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
	* Checks if string is a valid phone number
	*
	* @param mixed $phone phone address to validate
	*
	* @deprecated this method is deprecated and will be removed in future use is_phone() instead
	* @return bool true or false
	*/',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
              'escaper' => 'Luminova\\Functions\\Escaper',
              'invalidargumentexception' => 'InvalidArgumentException',
              'countable' => 'Countable',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'phone',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        28 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'strongPassword',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
	 * Determine password strength, if it meet all rules
	 * @param string $password password to check
	 * @param int $minLength minimum allowed password length
	 * @param int $maxLength maximum allowed password length
	 * @param int $complexity maximum complexity pass count
	 * @return boolean 
	*/',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
              'escaper' => 'Luminova\\Functions\\Escaper',
              'invalidargumentexception' => 'InvalidArgumentException',
              'countable' => 'Countable',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'password',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'minLength',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'maxLength',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            3 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'complexity',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        29 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'hashPassword',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
	* Hash password string to create a hash value
	*
	* @param string $password password string
	* @param int $cost 
	*
	* @return string 
	*/',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
              'escaper' => 'Luminova\\Functions\\Escaper',
              'invalidargumentexception' => 'InvalidArgumentException',
              'countable' => 'Countable',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'password',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'cost',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        30 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'verifyPassword',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
	* Verify a password hash and verify if it match
	*
	* @param string $password password string
	* @param string $hash password hash
	*
	* @return bool true or false
	*/',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
              'escaper' => 'Luminova\\Functions\\Escaper',
              'invalidargumentexception' => 'InvalidArgumentException',
              'countable' => 'Countable',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'password',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'hash',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        31 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'averageRating',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
	 * Calculate the average rating based on the number of reviews and total rating points.
	 *
	 * @param int $totalReviews Total number of reviews.
	 * @param float $totalRating Total sum of rating points.
	 * @param int $index i forgot why i has to use this index
	 * @param bool $round Whether to round the average to 2 decimal places.
	 * 
	 * @return float The average rating.
	 */',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
              'escaper' => 'Luminova\\Functions\\Escaper',
              'invalidargumentexception' => 'InvalidArgumentException',
              'countable' => 'Countable',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'float',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'totalReviews',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'totalRating',
               'type' => 'float',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'round',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        32 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'money',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
	 * Formats currency with decimal places and comma separation.
	 *
	 * @param mixed $number Amount you want to format.
	 * @param bool $fractional Whether to format fractional numbers.
	 * 
	 * @return string Formatted currency string.
	 */',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
              'escaper' => 'Luminova\\Functions\\Escaper',
              'invalidargumentexception' => 'InvalidArgumentException',
              'countable' => 'Countable',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'number',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'fractional',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        33 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'fixed',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
	 * Format a number with optional rounding.
	 *
	 * @param float|int|string $number The number you want to format.
	 * @param int|null $decimalPlaces The number of decimal places (null for no rounding).
	 * 
	 * @return string The formatted number.
	 */',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
              'escaper' => 'Luminova\\Functions\\Escaper',
              'invalidargumentexception' => 'InvalidArgumentException',
              'countable' => 'Countable',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'number',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'decimalPlaces',
               'type' => '?int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        34 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'discount',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
	 * Calculate the discounted amount.
	 *
	 * @param mixed|float|int|string $total The total amount you want to discount.
	 * @param int $rate The discount rate (percentage) as an integer.
	 * 
	 * @return float The discounted amount.
	 */',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
              'escaper' => 'Luminova\\Functions\\Escaper',
              'invalidargumentexception' => 'InvalidArgumentException',
              'countable' => 'Countable',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'float',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'total',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'rate',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        35 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'addInterest',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
	 * Calculate the total amount after adding interest.
	 *
	 * @param mixed|float|int|string $total The amount to which interest will be added.
	 * @param int $rate The interest rate as a percentage (float).
	 * 
	 * @return float The total amount after adding interest.
	 */',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
              'escaper' => 'Luminova\\Functions\\Escaper',
              'invalidargumentexception' => 'InvalidArgumentException',
              'countable' => 'Countable',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'float',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'total',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'rate',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        36 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'hoursRange',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
	 * Get a list of time hours in 12-hour format with 30-minute intervals.
	 *
	 * @return array An array of time hours.
	 */',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
              'escaper' => 'Luminova\\Functions\\Escaper',
              'invalidargumentexception' => 'InvalidArgumentException',
              'countable' => 'Countable',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        37 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'daysInMonth',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
	 * Get an array of dates for each day in a specific month.
	 *
	 * @param int $month The month (1-12).
	 * @param int $year The year.
	 * @param string $dateFormat The format for the returned dates (default is "d-M-Y").
	 * 
	 * @deprecated This method is deprecated and will be removed, use Time::days($month, $year, $format) instead
	 * @return array An array of dates within the specified month.
	 */',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
              'escaper' => 'Luminova\\Functions\\Escaper',
              'invalidargumentexception' => 'InvalidArgumentException',
              'countable' => 'Countable',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'array',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'month',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'year',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'dateFormat',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        38 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'sanitizeInput',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
	 * Sanitize user input to protect against cross-site scripting attacks.
	 *
	 * @param string $string The input string to be sanitized.
	 * @param string $type   The expected data type (e.g., \'int\', \'email\').
	 * @param string $symbol The symbol to replace disallowed characters with (optional).
	 *
	 * @return string The sanitized string.
	 */',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
              'escaper' => 'Luminova\\Functions\\Escaper',
              'invalidargumentexception' => 'InvalidArgumentException',
              'countable' => 'Countable',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'string',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'type',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'symbol',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        39 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'toHtmlentities',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
	 * Convert string characters to HTML entities with optional encoding.
	 *
	 * @param string $str The input string to be converted.
	 * @param string $encode Encoding
	 * 
	 * @return string The formatted string with HTML entities.
	 */',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
              'escaper' => 'Luminova\\Functions\\Escaper',
              'invalidargumentexception' => 'InvalidArgumentException',
              'countable' => 'Countable',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'str',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'encode',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        40 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'escape',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Escapes a string or array of strings based on the specified context.
     *
     * @param string|array $input The string or array of strings to be escaped.
     * @param string $context The context in which the escaping should be performed. Defaults to \'html\'.
     *                        Possible values: \'html\', \'js\', \'css\', \'url\', \'attr\', \'raw\'.
     * @param string|null $encoding The character encoding to use. Defaults to null.
     * @return mixed The escaped string or array of strings.
     * @throws InvalidArgumentException When an invalid escape context is provided.
     * @throws Exception;
     * @throws RuntimeException;
     */',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
              'escaper' => 'Luminova\\Functions\\Escaper',
              'invalidargumentexception' => 'InvalidArgumentException',
              'countable' => 'Countable',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'input',
               'type' => 'string|array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'context',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'encoding',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        41 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'removeSubdomain',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
	 * Remove subdomains from a URL.
	 * 
	 * @param string $url The input URL from which subdomains should be removed.
	 * 
	 * @return string The main domain extracted from the URL.
	 */',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
              'escaper' => 'Luminova\\Functions\\Escaper',
              'invalidargumentexception' => 'InvalidArgumentException',
              'countable' => 'Countable',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'url',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        42 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'removeMainDomain',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
	 * Remove main domain from a URL.
	 *
	 * @param string $url The input URL from which the domain should be extracted.
	 * @return string The extracted domain or an empty string if no domain is found.
	 */',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
              'escaper' => 'Luminova\\Functions\\Escaper',
              'invalidargumentexception' => 'InvalidArgumentException',
              'countable' => 'Countable',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'url',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        43 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'toKebabCase',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
	 * Convert a string to kebab case.
	 *
	 * @param string $string The input string to convert.
	 * 
	 * @return string The kebab-cased string.
	 */',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
              'escaper' => 'Luminova\\Functions\\Escaper',
              'invalidargumentexception' => 'InvalidArgumentException',
              'countable' => 'Countable',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'string',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        44 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'truncate',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
	 * Truncate a text string and add an ellipsis if it exceeds a specified length.
	 *
	 * This function truncates the input text to the specified length and adds an ellipsis
	 * at the end if the text is longer than the specified length.
	 *
	 * @param string $text The string to truncate.
	 * @param int $length The length to display before truncating.
	 * @param int $encoding Text encoding type
	 * @return string The truncated string.
	 */',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
              'escaper' => 'Luminova\\Functions\\Escaper',
              'invalidargumentexception' => 'InvalidArgumentException',
              'countable' => 'Countable',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'text',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'length',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'encoding',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        45 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'base64_url_encode',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
	 * Base64 encode string for URL passing
	 * @param string $input String to encode
	 * @return string Base64 encoded string
	 */',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
              'escaper' => 'Luminova\\Functions\\Escaper',
              'invalidargumentexception' => 'InvalidArgumentException',
              'countable' => 'Countable',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'input',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        46 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'base64_url_decode',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
	 * Base64 decode URL-encoded string
	 * @param string $input Encoded string to decode
	 * @return string Base64 decoded string
	 */',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
              'escaper' => 'Luminova\\Functions\\Escaper',
              'invalidargumentexception' => 'InvalidArgumentException',
              'countable' => 'Countable',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'input',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        47 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'stripText',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
	 * Strip unwanted characters from a string.
	 *
	 * @param string $string The input string to clean.
	 * @param array $rules An array of rules to replace.
	 * @param bool $textarea If true, strictly remove all markdown if displaying on a webpage, else format with new lines inside a textarea.
	 * @return string The cleaned text.
	 */',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
              'escaper' => 'Luminova\\Functions\\Escaper',
              'invalidargumentexception' => 'InvalidArgumentException',
              'countable' => 'Countable',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'string',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'rules',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'textarea',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        48 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'maskEmail',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
	 * Mask email address.
	 *
	 * @param string $email Email address to mask.
	 * @param string $with  Mask character (default is "*").
	 * @return string Masked email address or null.
	 */',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
              'escaper' => 'Luminova\\Functions\\Escaper',
              'invalidargumentexception' => 'InvalidArgumentException',
              'countable' => 'Countable',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'email',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'with',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        49 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'mask',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
	 * Mask string by position.
	 *
	 * @param string $string    String to mask.
	 * @param string $with      Mask character (default is "*").
	 * @param string $position  The position of the string to mask ("center", "left", or "right").
	 * @return string           Masked string.
	 */',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
              'escaper' => 'Luminova\\Functions\\Escaper',
              'invalidargumentexception' => 'InvalidArgumentException',
              'countable' => 'Countable',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'string',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'with',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'position',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Functions/IPAddress.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Functions\\IPAddress',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'get',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
	 * Get the client\'s IP address.
	 *
	 * @return string The client\'s IP address or \'PROXY\' if not found.
	*/',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'isValid',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
   * Check if an IP address is valid.
   *
   * @param string $address The IP address to validate.
   * @param int    $version   The IP version to validate (4 for IPv4, 6 for IPv6).
   *
   * @return bool True if the IP address is valid, false otherwise.
   */',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'address',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'version',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'toNumeric',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
   * Convert an IP address to its numeric representation (IPv4 or IPv6).
   *
   * @param string $address The IP address to convert.
   *
   * @return int|string Numeric IP address or empty string on error.
   */',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'address',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'toAddress',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
   * Convert a numeric IP address to its string representation (IPv4 or IPv6).
   *
   * @param int|string $numeric The numeric IP address to convert.
   *
   * @return string IP address in string format or empty string on error.
   */',
             'namespace' => 'Luminova\\Functions',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'numeric',
               'type' => 'int|string|null',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/AsyncClientInterface.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedInterfaceNode::__set_state(array(
       'name' => 'Luminova\\Http\\AsyncClientInterface',
       'phpDoc' => NULL,
       'extends' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'sendAsync',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'GuzzleHttp\\Promise\\PromiseInterface',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'request',
               'type' => 'GuzzleHttp\\Psr7\\Request',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/Client/Curl.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Http\\Client\\Curl',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
        0 => 'Luminova\\Http\\NetworkClientInterface',
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Curl client constructor.
     * @param array $config client configuration
     * 
    */',
             'namespace' => 'Luminova\\Http\\Client',
             'uses' => 
            array (
              'networkresponse' => 'Luminova\\Http\\NetworkResponse',
              'networkclientinterface' => 'Luminova\\Http\\NetworkClientInterface',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'config',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'request',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
      * Perform an HTTP request using cURL.
      *
      * @param string $method
      * @param string $url
      * @param array $data
      * @param array $headers
      *
      * @return NetworkResponse
      *
      * @throws Exception
    */',
             'namespace' => 'Luminova\\Http\\Client',
             'uses' => 
            array (
              'networkresponse' => 'Luminova\\Http\\NetworkResponse',
              'networkclientinterface' => 'Luminova\\Http\\NetworkClientInterface',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'Luminova\\Http\\NetworkResponse',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'method',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'url',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'data',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            3 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'headers',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/Client/Guzzle.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Http\\Client\\Guzzle',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
        0 => 'Luminova\\Http\\NetworkClientInterface',
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Guzzle client constructor.
     * @param array $config client configuration
     * 
    */',
             'namespace' => 'Luminova\\Http\\Client',
             'uses' => 
            array (
              'guzzlehttpclient' => 'GuzzleHttp\\Client',
              'networkclientinterface' => 'Luminova\\Http\\NetworkClientInterface',
              'networkresponse' => 'Luminova\\Http\\NetworkResponse',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'config',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'request',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Perform an HTTP request using Guzzle.
     *
     * @param string $method
     * @param string $url
     * @param array $data
     * @param array $headers
     *
     * @return NetworkResponse
     */',
             'namespace' => 'Luminova\\Http\\Client',
             'uses' => 
            array (
              'guzzlehttpclient' => 'GuzzleHttp\\Client',
              'networkclientinterface' => 'Luminova\\Http\\NetworkClientInterface',
              'networkresponse' => 'Luminova\\Http\\NetworkResponse',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'Luminova\\Http\\NetworkResponse',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'method',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'url',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'data',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            3 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'headers',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/CurlAsyncClient.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Http\\CurlAsyncClient',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
        0 => 'Luminova\\Http\\AsyncClientInterface',
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'sendAsync',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'GuzzleHttp\\Promise\\PromiseInterface',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'request',
               'type' => 'GuzzleHttp\\Psr7\\Request',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/GuzzleAsyncClient.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Http\\GuzzleAsyncClient',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
        0 => 'Luminova\\Http\\AsyncClientInterface',
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'sendAsync',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'GuzzleHttp\\Promise\\PromiseInterface',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'request',
               'type' => 'GuzzleHttp\\Psr7\\Request',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/Header.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Http\\Header',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'ERRORS',
               'value' => '[404 => \'404 Not Found\', 500 => \'500 Internal Server Error\']',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getHeaders',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get all request headers.
     *
     * @return array The request headers
    */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getServerVariable',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get server variables.
     *
     * @param string|null $name Optional name of the server variable
     *
     * @return mixed|array|string|null $_SERVER
    */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'name',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getMethod',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the request method.
     *
     * @return string The request method
    */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getSystemHeaders',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get system headers.
     *
     * @return array The system headers
     */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getContentType',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the content type based on file extension and charset.
     *
     * @param string $extension The file extension
     * @param string $charset The character set
     *
     * @return string The content type
     */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'extension',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'charset',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getRoutingMethod',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the request method for routing, considering overrides.
     *
     * @return string The request method for routing
    */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getAuthorization',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get request header authorization header
     *
     * @return string 
    */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/Network.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Http\\Network',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Network constructor with http client instance 
     *
     * @param NetworkClientInterface $client 
     */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'networkclientinterface' => 'Luminova\\Http\\NetworkClientInterface',
              'networkresponse' => 'Luminova\\Http\\NetworkResponse',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'client',
               'type' => 'Luminova\\Http\\NetworkClientInterface',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'send',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Send a request.
     *
     * @param string $method
     * @param string $url
     * @param array $data
     * @param array $headers
     *
     * @return NetworkResponse
     */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'networkclientinterface' => 'Luminova\\Http\\NetworkClientInterface',
              'networkresponse' => 'Luminova\\Http\\NetworkResponse',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'Luminova\\Http\\NetworkResponse',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'method',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'url',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'data',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            3 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'headers',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'get',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Perform a GET request.
     *
     * @param string $url
     * @param array $data
     * @param array $headers
     *
     * @return NetworkResponse
     */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'networkclientinterface' => 'Luminova\\Http\\NetworkClientInterface',
              'networkresponse' => 'Luminova\\Http\\NetworkResponse',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'Luminova\\Http\\NetworkResponse',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'url',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'data',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'headers',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'fetch',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Fetch data using a GET request.
     *
     * @param string $url
     * @param array $headers
     *
     * @return NetworkResponse
     */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'networkclientinterface' => 'Luminova\\Http\\NetworkClientInterface',
              'networkresponse' => 'Luminova\\Http\\NetworkResponse',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'Luminova\\Http\\NetworkResponse',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'url',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'headers',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'post',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Perform a POST request.
     *
     * @param string $url
     * @param array $data
     * @param array $headers
     *
     * @return NetworkResponse
     */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'networkclientinterface' => 'Luminova\\Http\\NetworkClientInterface',
              'networkresponse' => 'Luminova\\Http\\NetworkResponse',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'Luminova\\Http\\NetworkResponse',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'url',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'data',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'headers',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/NetworkAsync.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Http\\NetworkAsync',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'client',
               'type' => 'Luminova\\Http\\AsyncClientInterface',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'sendAsync',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'GuzzleHttp\\Promise\\PromiseInterface',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'request',
               'type' => 'Luminova\\Http\\NetworkRequest',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/NetworkClientInterface.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedInterfaceNode::__set_state(array(
       'name' => 'Luminova\\Http\\NetworkClientInterface',
       'phpDoc' => NULL,
       'extends' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'request',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Send an HTTP request.
     *
     * @param string $method
     * @param string $url
     * @param array $data
     * @param array $headers
     *
     * @return NetworkResponse
     */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'networkresponse' => 'Luminova\\Http\\NetworkResponse',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'Luminova\\Http\\NetworkResponse',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'method',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'url',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'data',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            3 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'headers',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/NetworkRequest.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Http\\NetworkRequest',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Initialize 
     * 
     * @param string $method
     * @param string $url
    */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'method',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'url',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getMethod',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get method  
     * @return string 
    */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getUrl',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get url 
     * @return string 
    */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/NetworkResponse.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Http\\NetworkResponse',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Initializes network response class instance
     * 
     * @param int $statusCode status code 
     * @param array $headers response headers 
     * @param mixed $body response body
     * @param mixed $contents response contents
     * 
    */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'statusCode',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'headers',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'body',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            3 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'contents',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getStatusCode',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get request response https status code
     * 
     * @return int status code
    */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'int',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getHeaders',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get request response headers
     * 
     * @return array response headers
    */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getBody',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get request response body
     * 
     * @return mixed response body
    */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getContents',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get request response contents
     * 
     * @return mixed response contents
    */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getInfos',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get request response infos
     * 
     * @return array response info
    */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Http/Request.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Http\\Request',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Initializes
    */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'invalidargumentexception' => 'InvalidArgumentException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'find',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get a value from the Specified request method.
     *
     * @param string $method
     * @param string $key
     * @param mixed $default
     * 
     * @return mixed
     */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'invalidargumentexception' => 'InvalidArgumentException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'method',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'default',
               'type' => '?mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'get',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get a value from the GET request.
     *
     * @param string $key
     * @param mixed $default
     * @return mixed
     */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'invalidargumentexception' => 'InvalidArgumentException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'default',
               'type' => '?mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getPost',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get a value from the POST request.
     *
     * @param string $key
     * @param mixed $default
     * @return mixed
     */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'invalidargumentexception' => 'InvalidArgumentException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'default',
               'type' => '?mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getArray',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get a value from the request context array.
     *
     * @param string $method request method context
     * @param string $key
     * @param string $index array index
     * @param mixed $default
     * 
     * @return mixed
     * @throws InvalidArgumentException
     */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'invalidargumentexception' => 'InvalidArgumentException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'method',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'index',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            3 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'default',
               'type' => '?mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getPut',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get a value from the PUT request.
     *
     * @param string $key
     * @param mixed $default
     * @return mixed
     */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'invalidargumentexception' => 'InvalidArgumentException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'default',
               'type' => '?mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getDelete',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get a value from the DELETE request.
     *
     * @param string $key
     * @param mixed $default
     * @return mixed
     */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'invalidargumentexception' => 'InvalidArgumentException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'default',
               'type' => '?mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getOption',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get a value from the OPTIONS request.
     *
     * @param string $key
     * @param mixed $default
     * @return mixed
     */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'invalidargumentexception' => 'InvalidArgumentException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'default',
               'type' => '?mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getPatch',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get a value from the PATCH request.
     *
     * @param string $key
     * @param mixed $default
     * @return mixed
     */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'invalidargumentexception' => 'InvalidArgumentException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'default',
               'type' => '?mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        9 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getHead',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get a value from the HEAD request.
     *
     * @param string $key
     * @param mixed $default
     * @return mixed
     */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'invalidargumentexception' => 'InvalidArgumentException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'default',
               'type' => '?mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        10 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getConnect',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get a value from the CONNECT request.
     *
     * @param string $key
     * @param mixed $default
     * @return mixed
     */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'invalidargumentexception' => 'InvalidArgumentException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'default',
               'type' => '?mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        11 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getTrace',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get a value from the TRACE request.
     *
     * @param string $key
     * @param mixed $default
     * @return mixed
     */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'invalidargumentexception' => 'InvalidArgumentException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'default',
               'type' => '?mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        12 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getPropfind',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get a value from the PROPFIND request.
     *
     * @param string $key
     * @param mixed $default
     * @return mixed
     */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'invalidargumentexception' => 'InvalidArgumentException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'default',
               'type' => '?mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        13 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getMkcol',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get a value from the MKCOL request.
     *
     * @param string $key
     * @param mixed $default
     * @return mixed
     */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'invalidargumentexception' => 'InvalidArgumentException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'default',
               'type' => '?mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        14 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getCopy',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get a value from the COPY request.
     *
     * @param string $key
     * @param mixed $default
     * @return mixed
     */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'invalidargumentexception' => 'InvalidArgumentException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'default',
               'type' => '?mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        15 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getMove',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get a value from the MOVE request.
     *
     * @param string $key
     * @param mixed $default
     * @return mixed
     */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'invalidargumentexception' => 'InvalidArgumentException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'default',
               'type' => '?mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        16 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getLock',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get a value from the LOCK request.
     *
     * @param string $key
     * @param mixed $default
     * @return mixed
     */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'invalidargumentexception' => 'InvalidArgumentException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'default',
               'type' => '?mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        17 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getUnlock',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get a value from the UNLOCK request.
     *
     * @param string $key
     * @param mixed $default
     * @return mixed
     */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'invalidargumentexception' => 'InvalidArgumentException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'default',
               'type' => '?mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        18 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getBody',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the request body as an array.
     *
     * @return array
     */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'invalidargumentexception' => 'InvalidArgumentException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        19 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getBodyAsObject',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the request body as an object.
     *
     * @return object
     */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'invalidargumentexception' => 'InvalidArgumentException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'object',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        20 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getFile',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the uploaded file information.
     * @param string $name file name
     * @return object|null
    */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'invalidargumentexception' => 'InvalidArgumentException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => '?object',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'name',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        21 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getFiles',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the uploaded files information.
     *
     * @return object|null
    */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'invalidargumentexception' => 'InvalidArgumentException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => '?object',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        22 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getMethod',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the request method 
     *
     * @return string The Request method
     */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'invalidargumentexception' => 'InvalidArgumentException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        23 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getContentType',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the request content type
     *
     * @return string The Request content type
     */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'invalidargumentexception' => 'InvalidArgumentException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        24 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getAuthorization',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
	 * Get authorization header
     * 
     * @return string
	*/',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'invalidargumentexception' => 'InvalidArgumentException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        25 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getAuthBearer',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
	 * get access token from header
     * 
     * @return string|null
	*/',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'invalidargumentexception' => 'InvalidArgumentException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => '?string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        26 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'isCommandLine',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Is CLI?
     *
     * Test to see if a request was made from the command line.
     *
     * @return bool
    */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'invalidargumentexception' => 'InvalidArgumentException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        27 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'isSecure',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Check if the current connection is secure
     * 
     * @return bool 
    */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'invalidargumentexception' => 'InvalidArgumentException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        28 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'isAJAX',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Check if request is ajax request
     * Test to see if a request contains the HTTP_X_REQUESTED_WITH header.
     * 
     * @return bool 
    */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'invalidargumentexception' => 'InvalidArgumentException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        29 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getUri',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get request url
     * 
     * @return string 
    */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'invalidargumentexception' => 'InvalidArgumentException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        30 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getBrowser',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get user browser info
     * 
     * @return array 
    */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'invalidargumentexception' => 'InvalidArgumentException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        31 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'parseUserAgent',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Pass user agent string browser info
     * 
     * @param ?string $userAgent
     * @param bool $returnObject If set to true, this function will return an array instead of an object.
     * 
     * @return array 
    */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'invalidargumentexception' => 'InvalidArgumentException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'array',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'userAgent',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'returnObject',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        32 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getUserAgent',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get user agent string
     * 
     * @return string 
    */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'invalidargumentexception' => 'InvalidArgumentException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        33 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'hasHeader',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Check if request header exist
     * 
     * @param string $headerName
     * 
     * @return bool 
    */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'invalidargumentexception' => 'InvalidArgumentException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        34 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'header',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get request header by key name.
     * 
     * @param string $key
     * 
     * @return Header|null header instance
    */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'invalidargumentexception' => 'InvalidArgumentException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => '?Luminova\\Http\\Header',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        35 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getHeaders',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get request headers.
     *
     * @return array The request headers
    */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'invalidargumentexception' => 'InvalidArgumentException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        36 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getHeader',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get request header.
     *
     * @return string The request headers
    */',
             'namespace' => 'Luminova\\Http',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'invalidargumentexception' => 'InvalidArgumentException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Languages/Translator.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Languages\\Translator',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Translate constructor.
     *
     * @param string $locale The language code (e.g., \'en\') for translations.
     */',
             'namespace' => 'Luminova\\Languages',
             'uses' => 
            array (
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'locale',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setLocale',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set locale 
     *
     * @param string $locale The locale
     * 
     * @return $this
     */',
             'namespace' => 'Luminova\\Languages',
             'uses' => 
            array (
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'locale',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getLocale',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get locale
     * 
     * @return string $this->locale
    */',
             'namespace' => 'Luminova\\Languages',
             'uses' => 
            array (
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'get',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the translation for the given language key.
     *
     * @param string $lang The language key (e.g., \'filename.key1.key2\').
     * @param string $default The fallback value to return if translation is not found.
     * 
     * @return string The translation text or the fallback value if any.
     * @throws Exception When translation file cannot be loaded.
     */',
             'namespace' => 'Luminova\\Languages',
             'uses' => 
            array (
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'lang',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'default',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'placeholders',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Library/Importer.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Library\\Importer',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'import',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Import a custom library into your project 
     * You must place your external libraries in libraries/libs/ directory
     * 
     * @param string $library the name of the library
     * @example Foo/Bar/Baz
     * @example Foo/Bar/Baz.php
     * @example Foo.php
     * @example Foo
     * 
     * @return bool true if the library was successfully imported
     * @throws RuntimeException if library could not be found
    */',
             'namespace' => 'Luminova\\Library',
             'uses' => 
            array (
              'runtimeexception' => 'RuntimeException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'library',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Logger/Logger.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Logger\\Logger',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
        0 => 'Psr\\Log\\LoggerInterface',
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setLogger',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set a logger instance on the object.
     *
     * @param LoggerInterface $logger The logger instance.
    */',
             'namespace' => 'Luminova\\Logger',
             'uses' => 
            array (
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'loglevel' => 'Psr\\Log\\LogLevel',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'logger',
               'type' => 'Psr\\Log\\LoggerInterface',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'emergency',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Log an emergency message.
     *
     * @param string $message The emergency message to log.
     * @param array $context Additional context data (optional).
     * 
     * @return void 
     */',
             'namespace' => 'Luminova\\Logger',
             'uses' => 
            array (
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'loglevel' => 'Psr\\Log\\LogLevel',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'message',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'context',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'alert',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Log an alert message.
     *
     * @param string $message The alert message to log.
     * @param array $context Additional context data (optional).
     * 
     * @return void 
     */',
             'namespace' => 'Luminova\\Logger',
             'uses' => 
            array (
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'loglevel' => 'Psr\\Log\\LogLevel',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'message',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'context',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'critical',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Log a critical message.
     *
     * @param string $message The critical message to log.
     * @param array $context Additional context data (optional).
     * 
     * @return void 
     */',
             'namespace' => 'Luminova\\Logger',
             'uses' => 
            array (
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'loglevel' => 'Psr\\Log\\LogLevel',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'message',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'context',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'error',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Log an error message.
     *
     * @param string $message The error message to log.
     * @param array $context Additional context data (optional).
     * 
     * @return void 
     */',
             'namespace' => 'Luminova\\Logger',
             'uses' => 
            array (
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'loglevel' => 'Psr\\Log\\LogLevel',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'message',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'context',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'warning',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Log a warning message.
     *
     * @param string $message The warning message to log.
     * @param array $context Additional context data (optional).
     * 
     * @return void 
     */',
             'namespace' => 'Luminova\\Logger',
             'uses' => 
            array (
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'loglevel' => 'Psr\\Log\\LogLevel',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'message',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'context',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'notice',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Log a notice message.
     *
     * @param string $message The notice message to log.
     * @param array $context Additional context data (optional).
     * 
     * @return void 
     */',
             'namespace' => 'Luminova\\Logger',
             'uses' => 
            array (
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'loglevel' => 'Psr\\Log\\LogLevel',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'message',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'context',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'info',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Log an info message.
     *
     * @param string $message The info message to log.
     * @param array $context Additional context data (optional).
     * 
     * @return void 
     */',
             'namespace' => 'Luminova\\Logger',
             'uses' => 
            array (
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'loglevel' => 'Psr\\Log\\LogLevel',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'message',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'context',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'debug',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Log a debug message.
     *
     * @param string $message The debug message to log.
     * @param array $context Additional context data (optional).
     * 
     * @return void 
     */',
             'namespace' => 'Luminova\\Logger',
             'uses' => 
            array (
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'loglevel' => 'Psr\\Log\\LogLevel',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'message',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'context',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        9 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'log',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Log a message.
     *
     * @param string $level The log level.
     * @param string $message The log message.
     * @param array $context Additional context data (optional).
     *
     * @return void
     */',
             'namespace' => 'Luminova\\Logger',
             'uses' => 
            array (
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'loglevel' => 'Psr\\Log\\LogLevel',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'level',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'message',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'context',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Logger/LoggerAware.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Logger\\LoggerAware',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
        0 => 'Psr\\Log\\LoggerInterface',
        1 => 'Psr\\Log\\LoggerAwareInterface',
      ),
       'usedTraits' => 
      array (
        0 => 'Psr\\Log\\LoggerAwareTrait',
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setLogger',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set a logger instance on the object.
     *
     * @param LoggerInterface $logger The logger instance.
    */',
             'namespace' => 'Luminova\\Logger',
             'uses' => 
            array (
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'loggerawareinterface' => 'Psr\\Log\\LoggerAwareInterface',
              'loggerawaretrait' => 'Psr\\Log\\LoggerAwareTrait',
              'loglevel' => 'Psr\\Log\\LogLevel',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'logger',
               'type' => 'Psr\\Log\\LoggerInterface',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'emergency',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Log an emergency message.
     *
     * @param string $message The emergency message to log.
     * @param array $context Additional context data (optional).
     */',
             'namespace' => 'Luminova\\Logger',
             'uses' => 
            array (
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'loggerawareinterface' => 'Psr\\Log\\LoggerAwareInterface',
              'loggerawaretrait' => 'Psr\\Log\\LoggerAwareTrait',
              'loglevel' => 'Psr\\Log\\LogLevel',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'message',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'context',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'alert',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Log an alert message.
     *
     * @param string $message The alert message to log.
     * @param array $context Additional context data (optional).
     */',
             'namespace' => 'Luminova\\Logger',
             'uses' => 
            array (
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'loggerawareinterface' => 'Psr\\Log\\LoggerAwareInterface',
              'loggerawaretrait' => 'Psr\\Log\\LoggerAwareTrait',
              'loglevel' => 'Psr\\Log\\LogLevel',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'message',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'context',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'critical',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Log a critical message.
     *
     * @param string $message The critical message to log.
     * @param array $context Additional context data (optional).
     */',
             'namespace' => 'Luminova\\Logger',
             'uses' => 
            array (
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'loggerawareinterface' => 'Psr\\Log\\LoggerAwareInterface',
              'loggerawaretrait' => 'Psr\\Log\\LoggerAwareTrait',
              'loglevel' => 'Psr\\Log\\LogLevel',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'message',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'context',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'error',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Log an error message.
     *
     * @param string $message The error message to log.
     * @param array $context Additional context data (optional).
     */',
             'namespace' => 'Luminova\\Logger',
             'uses' => 
            array (
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'loggerawareinterface' => 'Psr\\Log\\LoggerAwareInterface',
              'loggerawaretrait' => 'Psr\\Log\\LoggerAwareTrait',
              'loglevel' => 'Psr\\Log\\LogLevel',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'message',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'context',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'warning',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Log a warning message.
     *
     * @param string $message The warning message to log.
     * @param array $context Additional context data (optional).
     */',
             'namespace' => 'Luminova\\Logger',
             'uses' => 
            array (
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'loggerawareinterface' => 'Psr\\Log\\LoggerAwareInterface',
              'loggerawaretrait' => 'Psr\\Log\\LoggerAwareTrait',
              'loglevel' => 'Psr\\Log\\LogLevel',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'message',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'context',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'notice',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Log a notice message.
     *
     * @param string $message The notice message to log.
     * @param array $context Additional context data (optional).
     */',
             'namespace' => 'Luminova\\Logger',
             'uses' => 
            array (
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'loggerawareinterface' => 'Psr\\Log\\LoggerAwareInterface',
              'loggerawaretrait' => 'Psr\\Log\\LoggerAwareTrait',
              'loglevel' => 'Psr\\Log\\LogLevel',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'message',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'context',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'info',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Log an info message.
     *
     * @param string $message The info message to log.
     * @param array $context Additional context data (optional).
     */',
             'namespace' => 'Luminova\\Logger',
             'uses' => 
            array (
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'loggerawareinterface' => 'Psr\\Log\\LoggerAwareInterface',
              'loggerawaretrait' => 'Psr\\Log\\LoggerAwareTrait',
              'loglevel' => 'Psr\\Log\\LogLevel',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'message',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'context',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'debug',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Log a debug message.
     *
     * @param string $message The debug message to log.
     * @param array $context Additional context data (optional).
     */',
             'namespace' => 'Luminova\\Logger',
             'uses' => 
            array (
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'loggerawareinterface' => 'Psr\\Log\\LoggerAwareInterface',
              'loggerawaretrait' => 'Psr\\Log\\LoggerAwareTrait',
              'loglevel' => 'Psr\\Log\\LogLevel',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'message',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'context',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        9 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'log',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Log a message at a specified log level.
     *
     * @param string $level The log level (e.g., "emergency," "error," "info").
     * @param string $message The message to log.
     * @param array $context Additional context data (optional).
     */',
             'namespace' => 'Luminova\\Logger',
             'uses' => 
            array (
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'loggerawareinterface' => 'Psr\\Log\\LoggerAwareInterface',
              'loggerawaretrait' => 'Psr\\Log\\LoggerAwareTrait',
              'loglevel' => 'Psr\\Log\\LogLevel',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'level',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'message',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'context',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Logger/NovaLogger.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Logger\\NovaLogger',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => 'Psr\\Log\\AbstractLogger',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'EXCEPTION',
               'value' => '\'exception\'',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'PHP',
               'value' => '\'php_errors\'',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Initialize NovaLogger
     * 
     * @param string $path log file path
     * @param string $extension log file dot file extension
    */',
             'namespace' => 'Luminova\\Logger',
             'uses' => 
            array (
              'loglevel' => 'Psr\\Log\\LogLevel',
              'abstractlogger' => 'Psr\\Log\\AbstractLogger',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'datetime' => 'DateTime',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'path',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'extension',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'exception',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Log an exception message.
     *
     * @param string $message The EXCEPTION message to log.
     * @param array $context Additional context data (optional).
     */',
             'namespace' => 'Luminova\\Logger',
             'uses' => 
            array (
              'loglevel' => 'Psr\\Log\\LogLevel',
              'abstractlogger' => 'Psr\\Log\\AbstractLogger',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'datetime' => 'DateTime',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'message',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'context',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'php',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Log an php message.
     *
     * @param string $message The php message to log.
     * @param array $context Additional context data (optional).
     */',
             'namespace' => 'Luminova\\Logger',
             'uses' => 
            array (
              'loglevel' => 'Psr\\Log\\LogLevel',
              'abstractlogger' => 'Psr\\Log\\AbstractLogger',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'datetime' => 'DateTime',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'message',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'context',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'log',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Log a message at the given level.
     *
     * @param string $level The log level.
     * @param string $message The log message.
     * @param array $context Additional context data (optional).
     *
     * @return void
     */',
             'namespace' => 'Luminova\\Logger',
             'uses' => 
            array (
              'loglevel' => 'Psr\\Log\\LogLevel',
              'abstractlogger' => 'Psr\\Log\\AbstractLogger',
              'baseconfig' => 'Luminova\\Base\\BaseConfig',
              'datetime' => 'DateTime',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'level',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'message',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'context',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Models/Model.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Models\\Model',
       'phpDoc' => NULL,
       'abstract' => true,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'table',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     *  Table name should be specified in child models.
     * @var string $table
    */',
             'namespace' => 'Luminova\\Models',
             'uses' => 
            array (
              'query' => 'Luminova\\Database\\Query',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'primaryKey',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     *  Default primary key column.
     * @var string $primaryKey
    */',
             'namespace' => 'Luminova\\Models',
             'uses' => 
            array (
              'query' => 'Luminova\\Database\\Query',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'allowedFields',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Fields that can be inserted or updated.
     * @var array $allowedFields
    */',
             'namespace' => 'Luminova\\Models',
             'uses' => 
            array (
              'query' => 'Luminova\\Database\\Query',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'array',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'validationRules',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Input validation rules for
     * @var array $validationRules
    */',
             'namespace' => 'Luminova\\Models',
             'uses' => 
            array (
              'query' => 'Luminova\\Database\\Query',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'array',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'validationMessages',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Input validation message for rules
     * @var array $validationMessages
    */',
             'namespace' => 'Luminova\\Models',
             'uses' => 
            array (
              'query' => 'Luminova\\Database\\Query',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'array',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'query',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Database query class instance
     * @var Query $query
    */',
             'namespace' => 'Luminova\\Models',
             'uses' => 
            array (
              'query' => 'Luminova\\Database\\Query',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => NULL,
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Constructor for the Model class.
     */',
             'namespace' => 'Luminova\\Models',
             'uses' => 
            array (
              'query' => 'Luminova\\Database\\Query',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'insertRecord',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Insert a new record into the database.
     *
     * @param array $data The data to be inserted.
     * @return bool True if the insertion was successful, false otherwise.
     */',
             'namespace' => 'Luminova\\Models',
             'uses' => 
            array (
              'query' => 'Luminova\\Database\\Query',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'data',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'updateRecord',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Update a record in the database.
     *
     * @param string $key The primary key value for the record to be updated.
     * @param array $data The data to be updated.
     * @return bool True if the update was successful, false otherwise.
     */',
             'namespace' => 'Luminova\\Models',
             'uses' => 
            array (
              'query' => 'Luminova\\Database\\Query',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'data',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        9 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getRecord',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get a record from the database.
     *
     * @param string $key The primary key value for the record to retrieve.
     * @param array $fields The fields to retrieve (default is all).
     * @return mixed An associative array representing the record, or null if not found.
     */',
             'namespace' => 'Luminova\\Models',
             'uses' => 
            array (
              'query' => 'Luminova\\Database\\Query',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'fields',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        10 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'selectRecords',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Select records from the database.
     *
     * @param string $key The primary key value for the record to start the selection from.
     * @param array $fields Additional selection criteria.
     * @return mixed An array of records matching the criteria.
     */',
             'namespace' => 'Luminova\\Models',
             'uses' => 
            array (
              'query' => 'Luminova\\Database\\Query',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'fields',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        11 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'deleteRecord',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Delete a record from the database.
     *
     * @param string $key The primary key value for the record to be deleted.
     * @return bool True if the deletion was successful, false otherwise.
     */',
             'namespace' => 'Luminova\\Models',
             'uses' => 
            array (
              'query' => 'Luminova\\Database\\Query',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        12 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getTable',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the name of the database table associated with this model.
     *
     * @return string The name of the database table.
     */',
             'namespace' => 'Luminova\\Models',
             'uses' => 
            array (
              'query' => 'Luminova\\Database\\Query',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        13 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getKey',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the primary key field name for this model.
     *
     * @return string The primary key field name.
     */',
             'namespace' => 'Luminova\\Models',
             'uses' => 
            array (
              'query' => 'Luminova\\Database\\Query',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Models/PushMessage.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Models\\PushMessage',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * PushMessage constructor.
     *
     * @param string $type (Optional) The type of push message.
     */',
             'namespace' => 'Luminova\\Models',
             'uses' => 
            array (
              'query' => 'Luminova\\Database\\Query',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'type',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setTitle',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set the title of the notification.
     *
     * @param string $title
     * @return self
     */',
             'namespace' => 'Luminova\\Models',
             'uses' => 
            array (
              'query' => 'Luminova\\Database\\Query',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'title',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setBody',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set the body of the notification.
     *
     * @param string $body
     * @return self
     */',
             'namespace' => 'Luminova\\Models',
             'uses' => 
            array (
              'query' => 'Luminova\\Database\\Query',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'body',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setIcon',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set the icon for the notification.
     *
     * @param string $icon
     * @return self
     */',
             'namespace' => 'Luminova\\Models',
             'uses' => 
            array (
              'query' => 'Luminova\\Database\\Query',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'icon',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setSound',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set the sound for the notification.
     *
     * @param string $sound
     * @return self
     */',
             'namespace' => 'Luminova\\Models',
             'uses' => 
            array (
              'query' => 'Luminova\\Database\\Query',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'sound',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setVibrate',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set the vibrate pattern for the notification.
     *
     * @param array $vibrate
     * @return self
     */',
             'namespace' => 'Luminova\\Models',
             'uses' => 
            array (
              'query' => 'Luminova\\Database\\Query',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'vibrate',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setClickAction',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set the click action for the notification.
     *
     * @param string $click_action
     * @return self
     */',
             'namespace' => 'Luminova\\Models',
             'uses' => 
            array (
              'query' => 'Luminova\\Database\\Query',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'click_action',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setTag',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set a tag for the notification.
     *
     * @param string $tag
     * @return self
     */',
             'namespace' => 'Luminova\\Models',
             'uses' => 
            array (
              'query' => 'Luminova\\Database\\Query',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'tag',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setColor',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set the color for the notification.
     *
     * @param string $color
     * @return self
     */',
             'namespace' => 'Luminova\\Models',
             'uses' => 
            array (
              'query' => 'Luminova\\Database\\Query',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'color',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        9 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'addData',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Add custom data to the notification.
     *
     * @param string $key
     * @param string $value
     * @return self
     */',
             'namespace' => 'Luminova\\Models',
             'uses' => 
            array (
              'query' => 'Luminova\\Database\\Query',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'value',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        10 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setTokens',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set an array of tokens to send the push message to.
     *
     * @param array $tokens
     * @return self
     */',
             'namespace' => 'Luminova\\Models',
             'uses' => 
            array (
              'query' => 'Luminova\\Database\\Query',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'tokens',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        11 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getTokens',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the array of tokens to send the push message to.
     *
     * @return array
     */',
             'namespace' => 'Luminova\\Models',
             'uses' => 
            array (
              'query' => 'Luminova\\Database\\Query',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        12 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getTitle',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the title of the notification.
     *
     * @return string
     */',
             'namespace' => 'Luminova\\Models',
             'uses' => 
            array (
              'query' => 'Luminova\\Database\\Query',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        13 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getBody',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the body of the notification.
     *
     * @return string
     */',
             'namespace' => 'Luminova\\Models',
             'uses' => 
            array (
              'query' => 'Luminova\\Database\\Query',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        14 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getData',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the data of the notification.
     *
     * @return array
     */',
             'namespace' => 'Luminova\\Models',
             'uses' => 
            array (
              'query' => 'Luminova\\Database\\Query',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        15 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'toArray',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Convert the PushMessage instance to an array.
     *
     * @return array
     */',
             'namespace' => 'Luminova\\Models',
             'uses' => 
            array (
              'query' => 'Luminova\\Database\\Query',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Notifications/FirebasePusher.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Notifications\\FirebasePusher',
       'phpDoc' => 
      \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
         'phpDocString' => '/**
 * Firebase Pusher
 *
 * This class handles sending push notifications using Firebase Cloud Messaging.
 */',
         'namespace' => 'Luminova\\Notifications',
         'uses' => 
        array (
          'factory' => 'Kreait\\Firebase\\Factory',
          'cloudmessage' => 'Kreait\\Firebase\\Messaging\\CloudMessage',
          'notification' => 'Kreait\\Firebase\\Messaging\\Notification',
          'configuration' => 'Luminova\\Config\\Configuration',
          'errorexception' => 'Luminova\\Exceptions\\ErrorException',
          'pushmessage' => 'Luminova\\Models\\PushMessage',
          'exception' => 'Exception',
        ),
         'constUses' => 
        array (
        ),
      )),
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'factory',
          ),
           'phpDoc' => NULL,
           'type' => NULL,
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'TO_ID',
               'value' => '"id"',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'TO_IDS',
               'value' => '"ids"',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'TO_TOPIC',
               'value' => '"topic"',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => NULL,
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Constructor
     *
     * @param string $filename The filename of the service account JSON file.
     * @param string $dir      The directory where the service account file is located.
     */',
             'namespace' => 'Luminova\\Notifications',
             'uses' => 
            array (
              'factory' => 'Kreait\\Firebase\\Factory',
              'cloudmessage' => 'Kreait\\Firebase\\Messaging\\CloudMessage',
              'notification' => 'Kreait\\Firebase\\Messaging\\Notification',
              'configuration' => 'Luminova\\Config\\Configuration',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'pushmessage' => 'Luminova\\Models\\PushMessage',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'filename',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'dir',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'messaging',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the Firebase messaging instance.
     *
     * @return object The Firebase messaging instance.
     */',
             'namespace' => 'Luminova\\Notifications',
             'uses' => 
            array (
              'factory' => 'Kreait\\Firebase\\Factory',
              'cloudmessage' => 'Kreait\\Firebase\\Messaging\\CloudMessage',
              'notification' => 'Kreait\\Firebase\\Messaging\\Notification',
              'configuration' => 'Luminova\\Config\\Configuration',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'pushmessage' => 'Luminova\\Models\\PushMessage',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'object',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'sendToId',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Send a notification to a specific device by token.
     *
     * @param array $data The notification data.
     *
     * @return mixed The response from Firebase Cloud Messaging.
     */',
             'namespace' => 'Luminova\\Notifications',
             'uses' => 
            array (
              'factory' => 'Kreait\\Firebase\\Factory',
              'cloudmessage' => 'Kreait\\Firebase\\Messaging\\CloudMessage',
              'notification' => 'Kreait\\Firebase\\Messaging\\Notification',
              'configuration' => 'Luminova\\Config\\Configuration',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'pushmessage' => 'Luminova\\Models\\PushMessage',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'data',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'channel',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Send a notification to a topic.
     *
     * @param array $data The notification data.
     *
     * @return mixed The response from Firebase Cloud Messaging.
    */',
             'namespace' => 'Luminova\\Notifications',
             'uses' => 
            array (
              'factory' => 'Kreait\\Firebase\\Factory',
              'cloudmessage' => 'Kreait\\Firebase\\Messaging\\CloudMessage',
              'notification' => 'Kreait\\Firebase\\Messaging\\Notification',
              'configuration' => 'Luminova\\Config\\Configuration',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'pushmessage' => 'Luminova\\Models\\PushMessage',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'data',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'cast',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Send notifications to multiple devices.
     *
     * @param array $data The notification data.
     *
     * @return mixed The response from Firebase Cloud Messaging.
     */',
             'namespace' => 'Luminova\\Notifications',
             'uses' => 
            array (
              'factory' => 'Kreait\\Firebase\\Factory',
              'cloudmessage' => 'Kreait\\Firebase\\Messaging\\CloudMessage',
              'notification' => 'Kreait\\Firebase\\Messaging\\Notification',
              'configuration' => 'Luminova\\Config\\Configuration',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'pushmessage' => 'Luminova\\Models\\PushMessage',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'data',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        9 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'push',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Send notifications using a PushMessage object.
     *
     * @param PushMessage $message The PushMessage instance.
     *
     * @return mixed The response from Firebase Cloud Messaging.
     */',
             'namespace' => 'Luminova\\Notifications',
             'uses' => 
            array (
              'factory' => 'Kreait\\Firebase\\Factory',
              'cloudmessage' => 'Kreait\\Firebase\\Messaging\\CloudMessage',
              'notification' => 'Kreait\\Firebase\\Messaging\\Notification',
              'configuration' => 'Luminova\\Config\\Configuration',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'pushmessage' => 'Luminova\\Models\\PushMessage',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'message',
               'type' => 'Luminova\\Models\\PushMessage',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        10 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'device',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'message',
               'type' => 'Luminova\\Models\\PushMessage',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        11 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'subscribe',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'token',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'topic',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        12 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'send',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Send notifications based on the type (to ID, to IDs, to topic).
     *
     * @param array  $data The notification data.
     * @param string $type The type of notification (TO_ID, TO_IDS, TO_TOPIC).
     *
     * @return mixed The response from Firebase Cloud Messaging.
     */',
             'namespace' => 'Luminova\\Notifications',
             'uses' => 
            array (
              'factory' => 'Kreait\\Firebase\\Factory',
              'cloudmessage' => 'Kreait\\Firebase\\Messaging\\CloudMessage',
              'notification' => 'Kreait\\Firebase\\Messaging\\Notification',
              'configuration' => 'Luminova\\Config\\Configuration',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'pushmessage' => 'Luminova\\Models\\PushMessage',
              'exception' => 'Exception',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'data',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'type',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Notifications/FirebaseRealtime.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Notifications\\FirebaseRealtime',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'database',
          ),
           'phpDoc' => NULL,
           'type' => NULL,
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'tableName',
          ),
           'phpDoc' => NULL,
           'type' => NULL,
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'projectId',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'databaseUri',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setTable',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'table',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getTable',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'get',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'child',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'insert',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'rowId',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'data',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'update',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'rowId',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'data',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'delete',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'rowId',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'columnId',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Bootstrap.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Routing\\Bootstrap',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => true,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'WEB',
               'value' => '\'web\'',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Default WEB controller type
     * 
     * @var string WEB
    */',
             'namespace' => 'Luminova\\Routing',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'API',
               'value' => '\'api\'',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Default API controller type
     * 
     * @var string API
    */',
             'namespace' => 'Luminova\\Routing',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'CLI',
               'value' => '\'cli\'',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Default CLI controller type
     * 
     * @var string CLI
    */',
             'namespace' => 'Luminova\\Routing',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'CONSOLE',
               'value' => '\'console\'',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Default CONSOLE controller type
     * 
     * @var string CONSOLE
    */',
             'namespace' => 'Luminova\\Routing',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedClassConstantsNode::__set_state(array(
           'constants' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedClassConstantNode::__set_state(array(
               'name' => 'WEBHOOK',
               'value' => '\'webhook\'',
               'attributes' => 
              array (
              ),
            )),
          ),
           'public' => true,
           'private' => false,
           'final' => false,
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Default WEBHOOK controller type
     * 
     * @var string WEBHOOK
    */',
             'namespace' => 'Luminova\\Routing',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Initialize Constructor
     * 
     * @param string  $name  Bootstrap route name
     * @param ?callable $onError Bootstrap Callback function to execute
     */',
             'namespace' => 'Luminova\\Routing',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'name',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'onError',
               'type' => '?callable',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getName',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get bootstrap route name
     * 
     * @return string $this->name route instance type
    */',
             'namespace' => 'Luminova\\Routing',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getErrorHandler',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get bootstrap controller error callback handler
     * 
     * @return ?callable $this->onError 
    */',
             'namespace' => 'Luminova\\Routing',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => '?callable',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getInstances',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get bootstrap registered custom instance
     * 
     * @return array static::$instances 
    */',
             'namespace' => 'Luminova\\Routing',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Routing/Router.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Routing\\Router',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => true,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'before',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Before middleware route, executes the callback function before other routing will be executed
     *
     * @param string  $methods  Allowed methods, can be serrated with | pipe symbol
     * @param string  $pattern A route pattern or template view name
     * @param callable|string $callback Callback function to execute
     * 
     * @return void
     */',
             'namespace' => 'Luminova\\Routing',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'bootstrap' => 'Luminova\\Routing\\Bootstrap',
              'reflectionmethod' => 'ReflectionMethod',
              'reflectionexception' => 'ReflectionException',
              'reflectionclass' => 'ReflectionClass',
              'terminal' => 'Luminova\\Command\\Terminal',
              'basecommand' => 'Luminova\\Base\\BaseCommand',
              'viewcontroller' => 'Luminova\\Controllers\\ViewController',
              'baseapplication' => 'Luminova\\Base\\BaseApplication',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'methods',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'pattern',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'callback',
               'type' => 'callable|string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'after',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * After middleware route, executes the callback function after before and controller routing has executed
     *
     * @param string  $methods  Allowed methods, can be serrated with | pipe symbol
     * @param string  $pattern A route pattern or template view name
     * @param callable|string $callback Callback function to execute
     * 
     * @return void
     */',
             'namespace' => 'Luminova\\Routing',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'bootstrap' => 'Luminova\\Routing\\Bootstrap',
              'reflectionmethod' => 'ReflectionMethod',
              'reflectionexception' => 'ReflectionException',
              'reflectionclass' => 'ReflectionClass',
              'terminal' => 'Luminova\\Command\\Terminal',
              'basecommand' => 'Luminova\\Base\\BaseCommand',
              'viewcontroller' => 'Luminova\\Controllers\\ViewController',
              'baseapplication' => 'Luminova\\Base\\BaseApplication',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'methods',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'pattern',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'callback',
               'type' => 'callable|string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'capture',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Capture front controller request method and pattern and execute callback
     *
     * @param string  $methods Allowed methods, can be serrated with | pipe symbol
     * @param string  $pattern A route pattern or template view name
     * @param callable|string $callback Callback function to execute
     * 
     * @return void
     */',
             'namespace' => 'Luminova\\Routing',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'bootstrap' => 'Luminova\\Routing\\Bootstrap',
              'reflectionmethod' => 'ReflectionMethod',
              'reflectionexception' => 'ReflectionException',
              'reflectionclass' => 'ReflectionClass',
              'terminal' => 'Luminova\\Command\\Terminal',
              'basecommand' => 'Luminova\\Base\\BaseCommand',
              'viewcontroller' => 'Luminova\\Controllers\\ViewController',
              'baseapplication' => 'Luminova\\Base\\BaseApplication',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'methods',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'pattern',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'callback',
               'type' => 'callable|string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'authenticate',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Capture front controller command middleware security and execute callback
     *
     * @param callable|string $pattern Allowed command pattern, script name or callback function
     * @param callable|string $callback Callback function to execute
     * @param array $options Optional options
     * 
     * @return void
    */',
             'namespace' => 'Luminova\\Routing',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'bootstrap' => 'Luminova\\Routing\\Bootstrap',
              'reflectionmethod' => 'ReflectionMethod',
              'reflectionexception' => 'ReflectionException',
              'reflectionclass' => 'ReflectionClass',
              'terminal' => 'Luminova\\Command\\Terminal',
              'basecommand' => 'Luminova\\Base\\BaseCommand',
              'viewcontroller' => 'Luminova\\Controllers\\ViewController',
              'baseapplication' => 'Luminova\\Base\\BaseApplication',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'pattern',
               'type' => 'callable|string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'callback',
               'type' => 'callable|string|null',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'options',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'command',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Capture front controller command request names and execute callback
     *
     * @param string $pattern Allowed command pattern or script name
     * @param callable|string $callback Callback function to execute
     * @param array $options Optional options
     * 
     * @return void
    */',
             'namespace' => 'Luminova\\Routing',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'bootstrap' => 'Luminova\\Routing\\Bootstrap',
              'reflectionmethod' => 'ReflectionMethod',
              'reflectionexception' => 'ReflectionException',
              'reflectionclass' => 'ReflectionClass',
              'terminal' => 'Luminova\\Command\\Terminal',
              'basecommand' => 'Luminova\\Base\\BaseCommand',
              'viewcontroller' => 'Luminova\\Controllers\\ViewController',
              'baseapplication' => 'Luminova\\Base\\BaseApplication',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'pattern',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'callback',
               'type' => 'callable|string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'options',
               'type' => '?array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'any',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Capture any method
     *
     * @param string $pattern A route pattern or template view name
     * @param callable|string $callback Handle callback for router
     * 
     * @return void
     */',
             'namespace' => 'Luminova\\Routing',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'bootstrap' => 'Luminova\\Routing\\Bootstrap',
              'reflectionmethod' => 'ReflectionMethod',
              'reflectionexception' => 'ReflectionException',
              'reflectionclass' => 'ReflectionClass',
              'terminal' => 'Luminova\\Command\\Terminal',
              'basecommand' => 'Luminova\\Base\\BaseCommand',
              'viewcontroller' => 'Luminova\\Controllers\\ViewController',
              'baseapplication' => 'Luminova\\Base\\BaseApplication',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'pattern',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'callback',
               'type' => 'callable|string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'get',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Shorthand for a route accessed using GET.
     *
     * @param string pattern A route pattern or template view name
     * @param callable|string $callback  Handle callback for router
     * 
     * @return void
     */',
             'namespace' => 'Luminova\\Routing',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'bootstrap' => 'Luminova\\Routing\\Bootstrap',
              'reflectionmethod' => 'ReflectionMethod',
              'reflectionexception' => 'ReflectionException',
              'reflectionclass' => 'ReflectionClass',
              'terminal' => 'Luminova\\Command\\Terminal',
              'basecommand' => 'Luminova\\Base\\BaseCommand',
              'viewcontroller' => 'Luminova\\Controllers\\ViewController',
              'baseapplication' => 'Luminova\\Base\\BaseApplication',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'pattern',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'callback',
               'type' => 'callable|string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'post',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Post shorthand for a route capture
     *
     * @param string  $pattern A route pattern or template view name
     * @param callable|string $callback Callback function to execute
     * 
     * @return void
     */',
             'namespace' => 'Luminova\\Routing',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'bootstrap' => 'Luminova\\Routing\\Bootstrap',
              'reflectionmethod' => 'ReflectionMethod',
              'reflectionexception' => 'ReflectionException',
              'reflectionclass' => 'ReflectionClass',
              'terminal' => 'Luminova\\Command\\Terminal',
              'basecommand' => 'Luminova\\Base\\BaseCommand',
              'viewcontroller' => 'Luminova\\Controllers\\ViewController',
              'baseapplication' => 'Luminova\\Base\\BaseApplication',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'pattern',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'callback',
               'type' => 'callable|string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'patch',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Patch shorthand for a route capture
     *
     * @param string  $pattern A route pattern or template view name
     * @param callable|string $callback Handle callback for router
     * 
     * @return void
     */',
             'namespace' => 'Luminova\\Routing',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'bootstrap' => 'Luminova\\Routing\\Bootstrap',
              'reflectionmethod' => 'ReflectionMethod',
              'reflectionexception' => 'ReflectionException',
              'reflectionclass' => 'ReflectionClass',
              'terminal' => 'Luminova\\Command\\Terminal',
              'basecommand' => 'Luminova\\Base\\BaseCommand',
              'viewcontroller' => 'Luminova\\Controllers\\ViewController',
              'baseapplication' => 'Luminova\\Base\\BaseApplication',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'pattern',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'callback',
               'type' => 'callable|string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        9 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'delete',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Delete shorthand for a route capture
     *
     * @param string $pattern A route pattern or template view name
     * @param callable|string $callback Callback function to execute
     * 
     * @return void
     */',
             'namespace' => 'Luminova\\Routing',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'bootstrap' => 'Luminova\\Routing\\Bootstrap',
              'reflectionmethod' => 'ReflectionMethod',
              'reflectionexception' => 'ReflectionException',
              'reflectionclass' => 'ReflectionClass',
              'terminal' => 'Luminova\\Command\\Terminal',
              'basecommand' => 'Luminova\\Base\\BaseCommand',
              'viewcontroller' => 'Luminova\\Controllers\\ViewController',
              'baseapplication' => 'Luminova\\Base\\BaseApplication',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'pattern',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'callback',
               'type' => 'callable|string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        10 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'put',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Put shorthand for a route capture
     *
     * @param string $pattern A route pattern or template view name
     * @param callable|string $callback Callback function to execute
     * 
     * @return void
     */',
             'namespace' => 'Luminova\\Routing',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'bootstrap' => 'Luminova\\Routing\\Bootstrap',
              'reflectionmethod' => 'ReflectionMethod',
              'reflectionexception' => 'ReflectionException',
              'reflectionclass' => 'ReflectionClass',
              'terminal' => 'Luminova\\Command\\Terminal',
              'basecommand' => 'Luminova\\Base\\BaseCommand',
              'viewcontroller' => 'Luminova\\Controllers\\ViewController',
              'baseapplication' => 'Luminova\\Base\\BaseApplication',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'pattern',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'callback',
               'type' => 'callable|string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        11 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'options',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Options shorthand for a route capture
     *
     * @param string $pattern A route pattern or template view name
     * @param callable|string $callback Callback function to execute
     * 
     * @return void
     */',
             'namespace' => 'Luminova\\Routing',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'bootstrap' => 'Luminova\\Routing\\Bootstrap',
              'reflectionmethod' => 'ReflectionMethod',
              'reflectionexception' => 'ReflectionException',
              'reflectionclass' => 'ReflectionClass',
              'terminal' => 'Luminova\\Command\\Terminal',
              'basecommand' => 'Luminova\\Base\\BaseCommand',
              'viewcontroller' => 'Luminova\\Controllers\\ViewController',
              'baseapplication' => 'Luminova\\Base\\BaseApplication',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'pattern',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'callback',
               'type' => 'callable|string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        12 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'bind',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Binds a collection of routes in a single base route.
     *
     * @param string   $baseRoute The route sub pattern to bind the callbacks on
     * @param callable $callback Callback function to execute
     * 
     * @return void
     */',
             'namespace' => 'Luminova\\Routing',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'bootstrap' => 'Luminova\\Routing\\Bootstrap',
              'reflectionmethod' => 'ReflectionMethod',
              'reflectionexception' => 'ReflectionException',
              'reflectionclass' => 'ReflectionClass',
              'terminal' => 'Luminova\\Command\\Terminal',
              'basecommand' => 'Luminova\\Base\\BaseCommand',
              'viewcontroller' => 'Luminova\\Controllers\\ViewController',
              'baseapplication' => 'Luminova\\Base\\BaseApplication',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'baseRoute',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'callback',
               'type' => 'callable',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        13 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'bootstraps',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Bootstrap a group 
     *
     * @param Bootstrap $callbacks callable arguments
     * 
     * @return void
    */',
             'namespace' => 'Luminova\\Routing',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'bootstrap' => 'Luminova\\Routing\\Bootstrap',
              'reflectionmethod' => 'ReflectionMethod',
              'reflectionexception' => 'ReflectionException',
              'reflectionclass' => 'ReflectionClass',
              'terminal' => 'Luminova\\Command\\Terminal',
              'basecommand' => 'Luminova\\Base\\BaseCommand',
              'viewcontroller' => 'Luminova\\Controllers\\ViewController',
              'baseapplication' => 'Luminova\\Base\\BaseApplication',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'application',
               'type' => 'Luminova\\Base\\BaseApplication',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'callbacks',
               'type' => 'Luminova\\Routing\\Bootstrap',
               'byRef' => false,
               'variadic' => true,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        14 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'addNamespace',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Register a class namespace to use across the application
     *
     * @param string $namespace Class namespace
     * 
     * @return void
     * @throws ErrorException
     */',
             'namespace' => 'Luminova\\Routing',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'bootstrap' => 'Luminova\\Routing\\Bootstrap',
              'reflectionmethod' => 'ReflectionMethod',
              'reflectionexception' => 'ReflectionException',
              'reflectionclass' => 'ReflectionClass',
              'terminal' => 'Luminova\\Command\\Terminal',
              'basecommand' => 'Luminova\\Base\\BaseCommand',
              'viewcontroller' => 'Luminova\\Controllers\\ViewController',
              'baseapplication' => 'Luminova\\Base\\BaseApplication',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'namespace',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        15 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'run',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Run the router and application: 
     * Loop all defined CLI and HTTP before middleware\'s, after routes and command routes
     * Execute callback function if method matches view  or command name.
     *
     * @param ?callable $callback Optional final callback function to execute after run
     * 
     * @return void
    */',
             'namespace' => 'Luminova\\Routing',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'bootstrap' => 'Luminova\\Routing\\Bootstrap',
              'reflectionmethod' => 'ReflectionMethod',
              'reflectionexception' => 'ReflectionException',
              'reflectionclass' => 'ReflectionClass',
              'terminal' => 'Luminova\\Command\\Terminal',
              'basecommand' => 'Luminova\\Base\\BaseCommand',
              'viewcontroller' => 'Luminova\\Controllers\\ViewController',
              'baseapplication' => 'Luminova\\Base\\BaseApplication',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'callback',
               'type' => '?callable',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        16 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setErrorHandler',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set the error handling function.
     *
     * @param callable $match_callback Matching callback function to be executed
     * @param callable $callback The function to be executed
     * 
     * @return void
     */',
             'namespace' => 'Luminova\\Routing',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'bootstrap' => 'Luminova\\Routing\\Bootstrap',
              'reflectionmethod' => 'ReflectionMethod',
              'reflectionexception' => 'ReflectionException',
              'reflectionclass' => 'ReflectionClass',
              'terminal' => 'Luminova\\Command\\Terminal',
              'basecommand' => 'Luminova\\Base\\BaseCommand',
              'viewcontroller' => 'Luminova\\Controllers\\ViewController',
              'baseapplication' => 'Luminova\\Base\\BaseApplication',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'match_callback',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'callback',
               'type' => '?mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        17 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'triggerError',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Triggers error response
     *
     * @param string $match A route pattern or template view name
     * 
     * @return void
     */',
             'namespace' => 'Luminova\\Routing',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'bootstrap' => 'Luminova\\Routing\\Bootstrap',
              'reflectionmethod' => 'ReflectionMethod',
              'reflectionexception' => 'ReflectionException',
              'reflectionclass' => 'ReflectionClass',
              'terminal' => 'Luminova\\Command\\Terminal',
              'basecommand' => 'Luminova\\Base\\BaseCommand',
              'viewcontroller' => 'Luminova\\Controllers\\ViewController',
              'baseapplication' => 'Luminova\\Base\\BaseApplication',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'match',
               'type' => '?array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'code',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        18 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getNamespaces',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get list of registered namespace
     *
     * @return array List of registered namespaces
    */',
             'namespace' => 'Luminova\\Routing',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'bootstrap' => 'Luminova\\Routing\\Bootstrap',
              'reflectionmethod' => 'ReflectionMethod',
              'reflectionexception' => 'ReflectionException',
              'reflectionclass' => 'ReflectionClass',
              'terminal' => 'Luminova\\Command\\Terminal',
              'basecommand' => 'Luminova\\Base\\BaseCommand',
              'viewcontroller' => 'Luminova\\Controllers\\ViewController',
              'baseapplication' => 'Luminova\\Base\\BaseApplication',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        19 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getBasePath',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Return server base Path, and define it if isn\'t defined.
     *
     * @return string
    */',
             'namespace' => 'Luminova\\Routing',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'bootstrap' => 'Luminova\\Routing\\Bootstrap',
              'reflectionmethod' => 'ReflectionMethod',
              'reflectionexception' => 'ReflectionException',
              'reflectionclass' => 'ReflectionClass',
              'terminal' => 'Luminova\\Command\\Terminal',
              'basecommand' => 'Luminova\\Base\\BaseCommand',
              'viewcontroller' => 'Luminova\\Controllers\\ViewController',
              'baseapplication' => 'Luminova\\Base\\BaseApplication',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        20 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getView',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the current view relative URI.
     * 
     * @return string
     */',
             'namespace' => 'Luminova\\Routing',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'bootstrap' => 'Luminova\\Routing\\Bootstrap',
              'reflectionmethod' => 'ReflectionMethod',
              'reflectionexception' => 'ReflectionException',
              'reflectionclass' => 'ReflectionClass',
              'terminal' => 'Luminova\\Command\\Terminal',
              'basecommand' => 'Luminova\\Base\\BaseCommand',
              'viewcontroller' => 'Luminova\\Controllers\\ViewController',
              'baseapplication' => 'Luminova\\Base\\BaseApplication',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        21 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getViewUri',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the current view relative URI.
     * @alias getView Aliases to getView
     * 
     * @return string
    */',
             'namespace' => 'Luminova\\Routing',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'bootstrap' => 'Luminova\\Routing\\Bootstrap',
              'reflectionmethod' => 'ReflectionMethod',
              'reflectionexception' => 'ReflectionException',
              'reflectionclass' => 'ReflectionClass',
              'terminal' => 'Luminova\\Command\\Terminal',
              'basecommand' => 'Luminova\\Base\\BaseCommand',
              'viewcontroller' => 'Luminova\\Controllers\\ViewController',
              'baseapplication' => 'Luminova\\Base\\BaseApplication',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        22 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getArrayViews',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the current view array of segment.
     * 
     * @return array
    */',
             'namespace' => 'Luminova\\Routing',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'bootstrap' => 'Luminova\\Routing\\Bootstrap',
              'reflectionmethod' => 'ReflectionMethod',
              'reflectionexception' => 'ReflectionException',
              'reflectionclass' => 'ReflectionClass',
              'terminal' => 'Luminova\\Command\\Terminal',
              'basecommand' => 'Luminova\\Base\\BaseCommand',
              'viewcontroller' => 'Luminova\\Controllers\\ViewController',
              'baseapplication' => 'Luminova\\Base\\BaseApplication',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        23 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getViewPosition',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the current view segment by position index.
     * 
     * @param int $index position index
     * 
     * @return string view segment
    */',
             'namespace' => 'Luminova\\Routing',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'bootstrap' => 'Luminova\\Routing\\Bootstrap',
              'reflectionmethod' => 'ReflectionMethod',
              'reflectionexception' => 'ReflectionException',
              'reflectionclass' => 'ReflectionClass',
              'terminal' => 'Luminova\\Command\\Terminal',
              'basecommand' => 'Luminova\\Base\\BaseCommand',
              'viewcontroller' => 'Luminova\\Controllers\\ViewController',
              'baseapplication' => 'Luminova\\Base\\BaseApplication',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'index',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        24 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getFirstView',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the current view first segment.
     * 
     * @return string
    */',
             'namespace' => 'Luminova\\Routing',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'bootstrap' => 'Luminova\\Routing\\Bootstrap',
              'reflectionmethod' => 'ReflectionMethod',
              'reflectionexception' => 'ReflectionException',
              'reflectionclass' => 'ReflectionClass',
              'terminal' => 'Luminova\\Command\\Terminal',
              'basecommand' => 'Luminova\\Base\\BaseCommand',
              'viewcontroller' => 'Luminova\\Controllers\\ViewController',
              'baseapplication' => 'Luminova\\Base\\BaseApplication',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        25 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getLastView',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the current view last segment.
     * 
     * @return string
    */',
             'namespace' => 'Luminova\\Routing',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'bootstrap' => 'Luminova\\Routing\\Bootstrap',
              'reflectionmethod' => 'ReflectionMethod',
              'reflectionexception' => 'ReflectionException',
              'reflectionclass' => 'ReflectionClass',
              'terminal' => 'Luminova\\Command\\Terminal',
              'basecommand' => 'Luminova\\Base\\BaseCommand',
              'viewcontroller' => 'Luminova\\Controllers\\ViewController',
              'baseapplication' => 'Luminova\\Base\\BaseApplication',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        26 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getSecondToLastView',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the current view segment before last segment.
     * 
     * @return string
    */',
             'namespace' => 'Luminova\\Routing',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'bootstrap' => 'Luminova\\Routing\\Bootstrap',
              'reflectionmethod' => 'ReflectionMethod',
              'reflectionexception' => 'ReflectionException',
              'reflectionclass' => 'ReflectionClass',
              'terminal' => 'Luminova\\Command\\Terminal',
              'basecommand' => 'Luminova\\Base\\BaseCommand',
              'viewcontroller' => 'Luminova\\Controllers\\ViewController',
              'baseapplication' => 'Luminova\\Base\\BaseApplication',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        27 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setBasePath',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set application router base path
     * 
     * @param string $base
     * 
     * @return void
     */',
             'namespace' => 'Luminova\\Routing',
             'uses' => 
            array (
              'header' => 'Luminova\\Http\\Header',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'bootstrap' => 'Luminova\\Routing\\Bootstrap',
              'reflectionmethod' => 'ReflectionMethod',
              'reflectionexception' => 'ReflectionException',
              'reflectionclass' => 'ReflectionClass',
              'terminal' => 'Luminova\\Command\\Terminal',
              'basecommand' => 'Luminova\\Base\\BaseCommand',
              'viewcontroller' => 'Luminova\\Controllers\\ViewController',
              'baseapplication' => 'Luminova\\Base\\BaseApplication',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'base',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Security/Csrf.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Security\\Csrf',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'generateToken',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Generates a CSRF token.
     *
     * @return string The generated CSRF token.
    */',
             'namespace' => 'Luminova\\Security',
             'uses' => 
            array (
              'badmethodcallexception' => 'BadMethodCallException',
              'cookieconfig' => 'App\\Controllers\\Config\\Session',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'refreshToken',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Generate and Stores the CSRF token in the session.
     * After it has been validated 
     * 
     * @return void 
     */',
             'namespace' => 'Luminova\\Security',
             'uses' => 
            array (
              'badmethodcallexception' => 'BadMethodCallException',
              'cookieconfig' => 'App\\Controllers\\Config\\Session',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getToken',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Retrieves the CSRF token from the session or generates a new one if not available.
     *
     * @return string The CSRF token.
     */',
             'namespace' => 'Luminova\\Security',
             'uses' => 
            array (
              'badmethodcallexception' => 'BadMethodCallException',
              'cookieconfig' => 'App\\Controllers\\Config\\Session',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'inputToken',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Generates an HTML input field for the CSRF token.
     * 
     * @return void echo input field with generated CSRF token
     */',
             'namespace' => 'Luminova\\Security',
             'uses' => 
            array (
              'badmethodcallexception' => 'BadMethodCallException',
              'cookieconfig' => 'App\\Controllers\\Config\\Session',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'metaToken',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Generates an HTML meta tag for the CSRF token.
     * 
     * @return void echo input meta tag with generated CSRF token
     */',
             'namespace' => 'Luminova\\Security',
             'uses' => 
            array (
              'badmethodcallexception' => 'BadMethodCallException',
              'cookieconfig' => 'App\\Controllers\\Config\\Session',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'validateToken',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Validates a submitted CSRF token.
     *
     * @param string $token The token submitted by the user.
     *
     * @return bool True if the submitted token is valid, false otherwise.
     */',
             'namespace' => 'Luminova\\Security',
             'uses' => 
            array (
              'badmethodcallexception' => 'BadMethodCallException',
              'cookieconfig' => 'App\\Controllers\\Config\\Session',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'token',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__call',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Call static method as none static 
     * 
     * @param string $name method name 
     * @param array $arguments method arguments
     * 
     * @return mixed 
     * @throws BadMethodCallException
    */',
             'namespace' => 'Luminova\\Security',
             'uses' => 
            array (
              'badmethodcallexception' => 'BadMethodCallException',
              'cookieconfig' => 'App\\Controllers\\Config\\Session',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'name',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'arguments',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Security/Encryption/AES.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Security\\Encryption\\AES',
       'phpDoc' => 
      \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
         'phpDocString' => '/**
 * AES encryption class.
 */',
         'namespace' => 'Luminova\\Security\\Encryption',
         'uses' => 
        array (
          'encryptioninterface' => 'Luminova\\Security\\Encryption\\EncryptionInterface',
          'errorexception' => 'Luminova\\Exceptions\\ErrorException',
          'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
        ),
         'constUses' => 
        array (
        ),
      )),
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
        0 => 'Luminova\\Security\\Encryption\\EncryptionInterface',
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'key',
          ),
           'phpDoc' => NULL,
           'type' => 'string',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'data',
          ),
           'phpDoc' => NULL,
           'type' => 'string',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'method',
          ),
           'phpDoc' => NULL,
           'type' => 'string',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'iv',
          ),
           'phpDoc' => NULL,
           'type' => '?string',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'ivLength',
          ),
           'phpDoc' => NULL,
           'type' => 'int',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'options',
          ),
           'phpDoc' => NULL,
           'type' => 'int',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Constructor.
     *
     * @param string|null $data
     * @param string|null $key
     * @param int|null $blockSize
     * @param string $mode
     */',
             'namespace' => 'Luminova\\Security\\Encryption',
             'uses' => 
            array (
              'encryptioninterface' => 'Luminova\\Security\\Encryption\\EncryptionInterface',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'blockSize',
               'type' => '?int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'mode',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setData',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set data to encrypt/decrypt.
     *
     * @param string|null $data
     */',
             'namespace' => 'Luminova\\Security\\Encryption',
             'uses' => 
            array (
              'encryptioninterface' => 'Luminova\\Security\\Encryption\\EncryptionInterface',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'data',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setKey',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set encryption key.
     *
     * @param string|null $key
     */',
             'namespace' => 'Luminova\\Security\\Encryption',
             'uses' => 
            array (
              'encryptioninterface' => 'Luminova\\Security\\Encryption\\EncryptionInterface',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        9 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setInitializationVector',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set initialization vector (IV).
     *
     * @param string|null $iv
     */',
             'namespace' => 'Luminova\\Security\\Encryption',
             'uses' => 
            array (
              'encryptioninterface' => 'Luminova\\Security\\Encryption\\EncryptionInterface',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'iv',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        10 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setIvLength',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set IV length based on the encryption method.
     */',
             'namespace' => 'Luminova\\Security\\Encryption',
             'uses' => 
            array (
              'encryptioninterface' => 'Luminova\\Security\\Encryption\\EncryptionInterface',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        11 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setMethod',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @param int|null $blockSize
     * @param string $mode
     * @throws ErrorException
     */',
             'namespace' => 'Luminova\\Security\\Encryption',
             'uses' => 
            array (
              'encryptioninterface' => 'Luminova\\Security\\Encryption\\EncryptionInterface',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'blockSize',
               'type' => '?int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'mode',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        12 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'validateParams',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Validate encryption parameters.
     *
     * @return bool
     */',
             'namespace' => 'Luminova\\Security\\Encryption',
             'uses' => 
            array (
              'encryptioninterface' => 'Luminova\\Security\\Encryption\\EncryptionInterface',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        13 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'randomInitializationVector',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Generate a random initialization vector (IV).
     *
     * @return string
     */',
             'namespace' => 'Luminova\\Security\\Encryption',
             'uses' => 
            array (
              'encryptioninterface' => 'Luminova\\Security\\Encryption\\EncryptionInterface',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        14 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getInitializationVectorFrom',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get IV from a string.
     *
     * @param string $string
     * @return string
     */',
             'namespace' => 'Luminova\\Security\\Encryption',
             'uses' => 
            array (
              'encryptioninterface' => 'Luminova\\Security\\Encryption\\EncryptionInterface',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'string',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        15 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'encrypt',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Encrypt data.
     *
     * @return string
     * @throws InvalidException
     */',
             'namespace' => 'Luminova\\Security\\Encryption',
             'uses' => 
            array (
              'encryptioninterface' => 'Luminova\\Security\\Encryption\\EncryptionInterface',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        16 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'decrypt',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Decrypt data.
     *
     * @return string|null
     * @throws InvalidException
     */',
             'namespace' => 'Luminova\\Security\\Encryption',
             'uses' => 
            array (
              'encryptioninterface' => 'Luminova\\Security\\Encryption\\EncryptionInterface',
              'errorexception' => 'Luminova\\Exceptions\\ErrorException',
              'invalidexception' => 'Luminova\\Exceptions\\InvalidException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => '?string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Security/Encryption/EncryptionInterface.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedInterfaceNode::__set_state(array(
       'name' => 'Luminova\\Security\\Encryption\\EncryptionInterface',
       'phpDoc' => NULL,
       'extends' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setData',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set data to encrypt/decrypt.
     *
     * @param string|null $data
     */',
             'namespace' => 'Luminova\\Security\\Encryption',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'data',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setKey',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set encryption key.
     *
     * @param string|null $key
     */',
             'namespace' => 'Luminova\\Security\\Encryption',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setInitializationVector',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set initialization vector (IV).
     *
     * @param string|null $iv
     */',
             'namespace' => 'Luminova\\Security\\Encryption',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'iv',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setIvLength',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set IV length based on the encryption method.
     */',
             'namespace' => 'Luminova\\Security\\Encryption',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setMethod',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @param int|null $blockSize
     * @param string $mode
     * @throws ErrorException
     */',
             'namespace' => 'Luminova\\Security\\Encryption',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'blockSize',
               'type' => '?int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'mode',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'validateParams',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Validate encryption parameters.
     *
     * @return bool
     */',
             'namespace' => 'Luminova\\Security\\Encryption',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'randomInitializationVector',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Generate a random initialization vector (IV).
     *
     * @return string
     */',
             'namespace' => 'Luminova\\Security\\Encryption',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getInitializationVectorFrom',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get IV from a string.
     *
     * @param string $string
     * @return string
     */',
             'namespace' => 'Luminova\\Security\\Encryption',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'string',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'encrypt',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Encrypt data.
     *
     * @return string
     * @throws InvalidException
     */',
             'namespace' => 'Luminova\\Security\\Encryption',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        9 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'decrypt',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Decrypt data.
     *
     * @return string|null
     * @throws InvalidException
     */',
             'namespace' => 'Luminova\\Security\\Encryption',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => '?string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Security/InputValidator.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Security\\InputValidator',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
        0 => 'Luminova\\Security\\ValidatorInterface',
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'errors',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var array $errors validated errors messages
    */',
             'namespace' => 'Luminova\\Security',
             'uses' => 
            array (
              'validatorinterface' => 'Luminova\\Security\\ValidatorInterface',
              'functions' => 'Luminova\\Functions\\Functions',
              'ipaddress' => 'Luminova\\Functions\\IPAddress',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'array',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'validationRules',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var array $validationRules validation rules
    */',
             'namespace' => 'Luminova\\Security',
             'uses' => 
            array (
              'validatorinterface' => 'Luminova\\Security\\ValidatorInterface',
              'functions' => 'Luminova\\Functions\\Functions',
              'ipaddress' => 'Luminova\\Functions\\IPAddress',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'array',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'errorMessages',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var array $errorMessages validation error messages
    */',
             'namespace' => 'Luminova\\Security',
             'uses' => 
            array (
              'validatorinterface' => 'Luminova\\Security\\ValidatorInterface',
              'functions' => 'Luminova\\Functions\\Functions',
              'ipaddress' => 'Luminova\\Functions\\IPAddress',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'array',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'validateEntries',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Validate entries
     * @param array $input array input to validate it fields
     * @param array $rules Optional passed rules as array
     * @return boolean true if the rule passed else false
    */',
             'namespace' => 'Luminova\\Security',
             'uses' => 
            array (
              'validatorinterface' => 'Luminova\\Security\\ValidatorInterface',
              'functions' => 'Luminova\\Functions\\Functions',
              'ipaddress' => 'Luminova\\Functions\\IPAddress',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'input',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'rules',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'validateField',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Validate fields 
     * 
     * @param string $ruleName The name of the rule to validate
     * @param mixed $value The value to validate
     * @param string $rule The rule line
     * @param string $param additional validation parameters
     * 
     * @return boolean true if the rule passed else false
    */',
             'namespace' => 'Luminova\\Security',
             'uses' => 
            array (
              'validatorinterface' => 'Luminova\\Security\\ValidatorInterface',
              'functions' => 'Luminova\\Functions\\Functions',
              'ipaddress' => 'Luminova\\Functions\\IPAddress',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'ruleName',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'value',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'rule',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            3 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'param',
               'type' => '?mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'listToArray',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Convert string list to array 
     * 
     * @example listToArray(\'a,b,c\') => [\'a\', \'b\', \'c\']
     * @example listToArray(\'"a","b","c"\') => [\'a\', \'b\', \'c\']
     * 
     * @param string $list string list
     * @return array $matches
    */',
             'namespace' => 'Luminova\\Security',
             'uses' => 
            array (
              'validatorinterface' => 'Luminova\\Security\\ValidatorInterface',
              'functions' => 'Luminova\\Functions\\Functions',
              'ipaddress' => 'Luminova\\Functions\\IPAddress',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'array',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'list',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'listInArray',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Check if string list exist in array 
     * If any of the list doesn\'t exist in array it will return false
     * First it will have to convert the list to array using
     * listToArray()
     * 
     * @param string $list string list
     * @param array $map Array to map list to
     * 
     * @return bool exist or not
    */',
             'namespace' => 'Luminova\\Security',
             'uses' => 
            array (
              'validatorinterface' => 'Luminova\\Security\\ValidatorInterface',
              'functions' => 'Luminova\\Functions\\Functions',
              'ipaddress' => 'Luminova\\Functions\\IPAddress',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'list',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'map',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getErrors',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Gets validation error
     * @return array validation error message
    */',
             'namespace' => 'Luminova\\Security',
             'uses' => 
            array (
              'validatorinterface' => 'Luminova\\Security\\ValidatorInterface',
              'functions' => 'Luminova\\Functions\\Functions',
              'ipaddress' => 'Luminova\\Functions\\IPAddress',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getError',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get validation error messages
     * 
     * @param string $field messages input field name
     * 
     * @return string Error message
    */',
             'namespace' => 'Luminova\\Security',
             'uses' => 
            array (
              'validatorinterface' => 'Luminova\\Security\\ValidatorInterface',
              'functions' => 'Luminova\\Functions\\Functions',
              'ipaddress' => 'Luminova\\Functions\\IPAddress',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'field',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        9 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getErrorField',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get validation error filed
     * 
     * @param string $field messages input field name
     * 
     * @return string Error field
    */',
             'namespace' => 'Luminova\\Security',
             'uses' => 
            array (
              'validatorinterface' => 'Luminova\\Security\\ValidatorInterface',
              'functions' => 'Luminova\\Functions\\Functions',
              'ipaddress' => 'Luminova\\Functions\\IPAddress',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'field',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        10 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getErrorLine',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get validation error messages
     * 
     * @param int $fieldIndex field index
     * @param int $errorsIndex error index
     * 
     * @return string Error message
    */',
             'namespace' => 'Luminova\\Security',
             'uses' => 
            array (
              'validatorinterface' => 'Luminova\\Security\\ValidatorInterface',
              'functions' => 'Luminova\\Functions\\Functions',
              'ipaddress' => 'Luminova\\Functions\\IPAddress',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'fieldIndex',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'errorsIndex',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        11 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getCurrentErrorInfo',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get validation error information
     * 
     * @param int $fieldIndex field index
     * 
     * @return array Error information
    */',
             'namespace' => 'Luminova\\Security',
             'uses' => 
            array (
              'validatorinterface' => 'Luminova\\Security\\ValidatorInterface',
              'functions' => 'Luminova\\Functions\\Functions',
              'ipaddress' => 'Luminova\\Functions\\IPAddress',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'fieldIndex',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        12 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getCurrentErrorField',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get validation current error field
     * 
     * @param string $prefix prefix
     * 
     * @return string $errorField
    */',
             'namespace' => 'Luminova\\Security',
             'uses' => 
            array (
              'validatorinterface' => 'Luminova\\Security\\ValidatorInterface',
              'functions' => 'Luminova\\Functions\\Functions',
              'ipaddress' => 'Luminova\\Functions\\IPAddress',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'prefix',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        13 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getErrorByIndices',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get validation error messages
     * @param int $indexField field index
     * @param int $indexErrors error index
     * 
     * @deprecated This method will be removed in a future release use getErrorLine instead
     * @return string Error message
    */',
             'namespace' => 'Luminova\\Security',
             'uses' => 
            array (
              'validatorinterface' => 'Luminova\\Security\\ValidatorInterface',
              'functions' => 'Luminova\\Functions\\Functions',
              'ipaddress' => 'Luminova\\Functions\\IPAddress',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'indexField',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'indexErrors',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        14 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'addError',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Add validation error message
     * 
     * @param string $field input field name
     * @param string $ruleName Rule name
     * @param string $message Error message
     * 
     * @return void 
    */',
             'namespace' => 'Luminova\\Security',
             'uses' => 
            array (
              'validatorinterface' => 'Luminova\\Security\\ValidatorInterface',
              'functions' => 'Luminova\\Functions\\Functions',
              'ipaddress' => 'Luminova\\Functions\\IPAddress',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'field',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'ruleName',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'message',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        15 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setRules',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set rules array array with optional messages
     * @param array $rules validation rules
     * @param array $message optional pass response message for validation
     * @return self InputValidator instance 
    */',
             'namespace' => 'Luminova\\Security',
             'uses' => 
            array (
              'validatorinterface' => 'Luminova\\Security\\ValidatorInterface',
              'functions' => 'Luminova\\Functions\\Functions',
              'ipaddress' => 'Luminova\\Functions\\IPAddress',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'rules',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'messages',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        16 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'addRule',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Add single rule with optional message
     * @param string $field validation rule input field name
     * @param array $messages optional pass response message for rule validation
     * @return self InputValidator instance 
    */',
             'namespace' => 'Luminova\\Security',
             'uses' => 
            array (
              'validatorinterface' => 'Luminova\\Security\\ValidatorInterface',
              'functions' => 'Luminova\\Functions\\Functions',
              'ipaddress' => 'Luminova\\Functions\\IPAddress',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'field',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'rules',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'messages',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        17 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setMessages',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set array list rule messages
     * @param array $messages messages to set
     * @return self InputValidator instance 
    */',
             'namespace' => 'Luminova\\Security',
             'uses' => 
            array (
              'validatorinterface' => 'Luminova\\Security\\ValidatorInterface',
              'functions' => 'Luminova\\Functions\\Functions',
              'ipaddress' => 'Luminova\\Functions\\IPAddress',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'messages',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        18 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'addMessage',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set a single validation rule messages
     * @param string $field messages input field name
     * @param array $messages messages to set
     * @return self InputValidator instance 
    */',
             'namespace' => 'Luminova\\Security',
             'uses' => 
            array (
              'validatorinterface' => 'Luminova\\Security\\ValidatorInterface',
              'functions' => 'Luminova\\Functions\\Functions',
              'ipaddress' => 'Luminova\\Functions\\IPAddress',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'field',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'messages',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Security/ValidatorInterface.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedInterfaceNode::__set_state(array(
       'name' => 'Luminova\\Security\\ValidatorInterface',
       'phpDoc' => NULL,
       'extends' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'validateEntries',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Validate entries
     * @param array $input array input to validate it fields
     * @param array $rules Optional passed rules as array
     * @return boolean true if the rule passed else false
    */',
             'namespace' => 'Luminova\\Security',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'input',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'rules',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'validateField',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Validate fields 
     * @param string $ruleName The name of the rule to validate
     * @param string $value The value to validate
     * @param string $rule The rule line
     * @param string $param additional validation parameters
     * @return boolean true if the rule passed else false
    */',
             'namespace' => 'Luminova\\Security',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'ruleName',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'value',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'rule',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            3 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'param',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getErrors',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Gets validation error
     * @return array validation error message
    */',
             'namespace' => 'Luminova\\Security',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getError',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get validation error messages
     * @param string $field messages input field name
     * @return string Error message
    */',
             'namespace' => 'Luminova\\Security',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'field',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'addError',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Add validation error message
     * 
     * @param string $field input field name
     * @param string $ruleName Rule name
     * @param string $message Error message
     * 
     * @return void 
    */',
             'namespace' => 'Luminova\\Security',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'field',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'ruleName',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'message',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setRules',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set rules array array with optional messages
     * @param array $rules validation rules
     * @param array $message optional pass response message for validation
     * @return self InputValidator instance 
    */',
             'namespace' => 'Luminova\\Security',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'rules',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'messages',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'addRule',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Add single rule with optional message
     * @param string $field validation rule input field name
     * @param array $messages optional pass response message for rule validation
     * @return self InputValidator instance 
    */',
             'namespace' => 'Luminova\\Security',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'field',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'rules',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'messages',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setMessages',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set array list rule messages
     * @param array $messages messages to set
     * @return self InputValidator instance 
    */',
             'namespace' => 'Luminova\\Security',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'messages',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'addMessage',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set a single validation rule messages
     * @param string $field messages input field name
     * @param array $messages messages to set
     * @return self InputValidator instance 
    */',
             'namespace' => 'Luminova\\Security',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'field',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'messages',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        9 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getErrorLine',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get validation error messages
     * @param int $indexField field index
     * @param int $indexErrors error index
     * 
     * @return string Error message
    */',
             'namespace' => 'Luminova\\Security',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'indexField',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'indexErrors',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Seo/Meta.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Seo\\Meta',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Meta constructor.
    */',
             'namespace' => 'Luminova\\Seo',
             'uses' => 
            array (
              'datetime' => 'DateTime',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getInstance',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Singleton class
     * @return static $instance 
     */',
             'namespace' => 'Luminova\\Seo',
             'uses' => 
            array (
              'datetime' => 'DateTime',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'static',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'create',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Create object
     *
     * @param string $appName The name of the application.
     * @param string $rootDir The root directory of the application.
     * @param string $baseUrl The base URL of the application.
     */',
             'namespace' => 'Luminova\\Seo',
             'uses' => 
            array (
              'datetime' => 'DateTime',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'appName',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'rootDir',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'baseUrl',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setLink',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Sets the link URL for the web page.
     *
     * @param string $link The link URL.
     * @return self
     */',
             'namespace' => 'Luminova\\Seo',
             'uses' => 
            array (
              'datetime' => 'DateTime',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'link',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setConfig',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Sets the configuration for the Meta instance.
     *
     * @param array $config The extended configuration.
     * @return void
     */',
             'namespace' => 'Luminova\\Seo',
             'uses' => 
            array (
              'datetime' => 'DateTime',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'config',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setTitle',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Sets the page title for SEO purposes.
     *
     * @param string $title The page title.
     * @return void
     */',
             'namespace' => 'Luminova\\Seo',
             'uses' => 
            array (
              'datetime' => 'DateTime',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'title',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setCanonical',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Sets the canonical URL for SEO purposes.
     *
     * @param string $canonical The canonical URL.
     * @return void
     */',
             'namespace' => 'Luminova\\Seo',
             'uses' => 
            array (
              'datetime' => 'DateTime',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'canonical',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setCanonicalVersion',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Sets the canonical version of the URL for SEO purposes.
     *
     * @param string $link The link URL.
     * @param string $view The view URL.
     * @return void
     */',
             'namespace' => 'Luminova\\Seo',
             'uses' => 
            array (
              'datetime' => 'DateTime',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'link',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'view',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setPageTitle',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Sets the page title for SEO purposes.
     *
     * @param string $title The page title.
     * @return void
     */',
             'namespace' => 'Luminova\\Seo',
             'uses' => 
            array (
              'datetime' => 'DateTime',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'title',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        9 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'toJson',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Converts the schema data to JSON format.
     *
     * @return string The JSON representation of the schema data.
     */',
             'namespace' => 'Luminova\\Seo',
             'uses' => 
            array (
              'datetime' => 'DateTime',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        10 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'generateScheme',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Generate structured data schema for SEO purposes.
     *
     * @return array The structured data schema.
     */',
             'namespace' => 'Luminova\\Seo',
             'uses' => 
            array (
              'datetime' => 'DateTime',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        11 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getMetaTags',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Generates HTML meta tags for SEO purposes.
     *
     * @return string The HTML meta tags.
     */',
             'namespace' => 'Luminova\\Seo',
             'uses' => 
            array (
              'datetime' => 'DateTime',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        12 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getObjectGraph',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Gets the HTML code for embedding the schema in a web page.
     *
     * @return string The HTML code for embedding the schema.
     */',
             'namespace' => 'Luminova\\Seo',
             'uses' => 
            array (
              'datetime' => 'DateTime',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Sessions/CookieManager.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Sessions\\CookieManager',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
        0 => 'Luminova\\Sessions\\SessionInterface',
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'storage',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $storage
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'cookieconfig' => 'App\\Controllers\\Config\\Session',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Session constructor.
     *
     * @param string $storage The session storage key.
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'cookieconfig' => 'App\\Controllers\\Config\\Session',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'storage',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setConfig',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Set cookie options 
     * 
     * @param string $config CookieConfig class name
     * 
     * @return void
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'cookieconfig' => 'App\\Controllers\\Config\\Session',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'config',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setStorage',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set storage key
     *
     * @param string $storage The session storage key.
     * 
     * @return self
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'cookieconfig' => 'App\\Controllers\\Config\\Session',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'storage',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getStorage',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get storage key
     * 
     * @return string
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'cookieconfig' => 'App\\Controllers\\Config\\Session',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'add',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Add a key-value pair to the session data.
     *
     * @param string $key The key.
     * @param mixed $value The value.
     * 
     * @return self
     */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'cookieconfig' => 'App\\Controllers\\Config\\Session',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'value',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'set',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Set key and value to session
     * 
     * @param string $key key to set
     * @param mixed $value value to set
     * 
     * @return self
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'cookieconfig' => 'App\\Controllers\\Config\\Session',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'value',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'get',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * get data from session
     * 
     * @param string $index key to get
     * @param mixed $default default value 
     * 
     * @return mixed
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'cookieconfig' => 'App\\Controllers\\Config\\Session',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'index',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'default',
               'type' => '?mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getFrom',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get data from specified storage instance
     * 
     * @param string $index value key to get
     * @param string $storage Storage key name
     * 
     * @return mixed
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'cookieconfig' => 'App\\Controllers\\Config\\Session',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'index',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'storage',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        9 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setTo',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get data from specified storage instance
     * 
     * @param string $index value key to get
     * @param mixed $value data to set
     * @param string $storage Storage key name
     * 
     * @return self
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'cookieconfig' => 'App\\Controllers\\Config\\Session',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'index',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'value',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'storage',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        10 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'online',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Check if session user is online from any storage instance
     * 
     * @param string $storage Optional storage key 
     * 
     * @return bool
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'cookieconfig' => 'App\\Controllers\\Config\\Session',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'storage',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        11 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'clear',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Clear all data from a specific session storage by passing the storage key.
     *
     * @param string $storage Storage key to unset.
     * 
     * @return self
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'cookieconfig' => 'App\\Controllers\\Config\\Session',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'storage',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        12 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'remove',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Remove key from the current session storage by passing the key.
     *
     * @param string $index Key index to unset.
     * 
     * @return self
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'cookieconfig' => 'App\\Controllers\\Config\\Session',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'index',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        13 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'hasKey',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Check if key exists in session
     * 
     * @param string $key
     * 
     * @return bool
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'cookieconfig' => 'App\\Controllers\\Config\\Session',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        14 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'hasStorage',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Check if storage key exists in session
     * 
     * @param string $storage
     * 
     * @return bool
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'cookieconfig' => 'App\\Controllers\\Config\\Session',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'storage',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        15 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getResult',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get all stored session as array
     * 
     * @return array
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'cookieconfig' => 'App\\Controllers\\Config\\Session',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        16 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'toArray',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get data as array from current session storage 
     * 
     * @param string $index optional key to get
     * 
     * @return array
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'cookieconfig' => 'App\\Controllers\\Config\\Session',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'index',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        17 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'toObject',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get data as object from current session storage
     * 
     * @param string $index optional key to get
     * 
     * @return object
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'cookieconfig' => 'App\\Controllers\\Config\\Session',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'object',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'index',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        18 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getContents',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get data as array from storage 
     * 
     * @param string $storage optional storage key 
     * 
     * @return array
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'cookieconfig' => 'App\\Controllers\\Config\\Session',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'storage',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Sessions/Session.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Sessions\\Session',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'manager',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * session interface
     * @var SessionInterface $manager
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'sessionconfig' => 'App\\Controllers\\Config\\Session',
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
              'sessionmanager' => 'Luminova\\Sessions\\SessionManager',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => '?Luminova\\Sessions\\SessionInterface',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'logger',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * logger interface
     * @var LoggerInterface $logger
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'sessionconfig' => 'App\\Controllers\\Config\\Session',
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
              'sessionmanager' => 'Luminova\\Sessions\\SessionManager',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => '?Psr\\Log\\LoggerInterface',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'instance',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * static class instance
     * @var static $instance 
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'sessionconfig' => 'App\\Controllers\\Config\\Session',
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
              'sessionmanager' => 'Luminova\\Sessions\\SessionManager',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => '?self',
           'public' => false,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'config',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * session config instance
     * @var string $config 
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'sessionconfig' => 'App\\Controllers\\Config\\Session',
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
              'sessionmanager' => 'Luminova\\Sessions\\SessionManager',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Initializes session constructor
     *
     * @param SessionInterface $manager The session manager.
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'sessionconfig' => 'App\\Controllers\\Config\\Session',
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
              'sessionmanager' => 'Luminova\\Sessions\\SessionManager',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'manager',
               'type' => '?Luminova\\Sessions\\SessionInterface',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getInstance',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get an instance of the Session class.
     *
     * @param SessionInterface $manager The session manager.
     * 
     * @return static self instance
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'sessionconfig' => 'App\\Controllers\\Config\\Session',
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
              'sessionmanager' => 'Luminova\\Sessions\\SessionManager',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'static',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'manager',
               'type' => 'Luminova\\Sessions\\SessionInterface',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setLogger',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set the logger for this session.
     *
     * @param LoggerInterface $logger The logger to set.
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'sessionconfig' => 'App\\Controllers\\Config\\Session',
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
              'sessionmanager' => 'Luminova\\Sessions\\SessionManager',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'logger',
               'type' => 'Psr\\Log\\LoggerInterface',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'toArray',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get data as array from current session storage 
     * @param string $index optional key to get
     * @return array
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'sessionconfig' => 'App\\Controllers\\Config\\Session',
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
              'sessionmanager' => 'Luminova\\Sessions\\SessionManager',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'index',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'toObject',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get data as object from current session storage
     * 
     * @param string $index optional key to get
     * 
     * @return object
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'sessionconfig' => 'App\\Controllers\\Config\\Session',
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
              'sessionmanager' => 'Luminova\\Sessions\\SessionManager',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'object',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'index',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        9 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'toExport',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get all storage data as array 
     * 
     * @return object
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'sessionconfig' => 'App\\Controllers\\Config\\Session',
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
              'sessionmanager' => 'Luminova\\Sessions\\SessionManager',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        10 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setManager',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set the session manager.
     *
     * @param SessionInterface $manager The session manager to set.
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'sessionconfig' => 'App\\Controllers\\Config\\Session',
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
              'sessionmanager' => 'Luminova\\Sessions\\SessionManager',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'manager',
               'type' => 'Luminova\\Sessions\\SessionInterface',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        11 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getManager',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the session manager.
     *
     * @return SessionInterface $this->manager 
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'sessionconfig' => 'App\\Controllers\\Config\\Session',
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
              'sessionmanager' => 'Luminova\\Sessions\\SessionManager',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => '?Luminova\\Sessions\\SessionInterface',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        12 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setStorage',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set the storage key for the session.
     *
     * @param string $storage The storage key to set.
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'sessionconfig' => 'App\\Controllers\\Config\\Session',
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
              'sessionmanager' => 'Luminova\\Sessions\\SessionManager',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'storage',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        13 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'get',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the value from the session by key.
     *
     * @param string $key The key to retrieve.
     * @param mixed $default default value 
     * 
     * @return mixed
     */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'sessionconfig' => 'App\\Controllers\\Config\\Session',
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
              'sessionmanager' => 'Luminova\\Sessions\\SessionManager',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'default',
               'type' => '?mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        14 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getFrom',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get data from specified storage instance
     * 
     * @param string $index value key to get
     * @param string $storage Storage key name
     * 
     * @return mixed
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'sessionconfig' => 'App\\Controllers\\Config\\Session',
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
              'sessionmanager' => 'Luminova\\Sessions\\SessionManager',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'index',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'storage',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        15 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setTo',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get data from specified storage instance
     * 
     * @param string $index value key to get
     * @param mixed $data data to set
     * @param string $storage Storage key name
     * 
     * @return self
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'sessionconfig' => 'App\\Controllers\\Config\\Session',
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
              'sessionmanager' => 'Luminova\\Sessions\\SessionManager',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'index',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'data',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'storage',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        16 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'online',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Check if session user is online from any storage instance
     * 
     * @param string $storage optional storage instance key
     * 
     * @return bool
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'sessionconfig' => 'App\\Controllers\\Config\\Session',
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
              'sessionmanager' => 'Luminova\\Sessions\\SessionManager',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'storage',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        17 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'set',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set the value in the session by key.
     *
     * @param string $key The key to set.
     * @param mixed $value The value to set.
     * 
     * @return self
     */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'sessionconfig' => 'App\\Controllers\\Config\\Session',
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
              'sessionmanager' => 'Luminova\\Sessions\\SessionManager',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'value',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        18 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'add',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Add a value to the session by key.
     *
     * @param string $key The key to set.
     * @param mixed $value The value to set.
     * 
     * @return self
     */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'sessionconfig' => 'App\\Controllers\\Config\\Session',
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
              'sessionmanager' => 'Luminova\\Sessions\\SessionManager',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'value',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        19 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'remove',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Remove a value from the session by key.
     *
     * @param string $key The key to remove.
     * 
     * @return self
     */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'sessionconfig' => 'App\\Controllers\\Config\\Session',
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
              'sessionmanager' => 'Luminova\\Sessions\\SessionManager',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        20 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'clear',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Clear the session storage.
     *
     * @param string $storage The storage key to clear.
     * 
     * @return self
     */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'sessionconfig' => 'App\\Controllers\\Config\\Session',
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
              'sessionmanager' => 'Luminova\\Sessions\\SessionManager',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'storage',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        21 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'has',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Check if key exists in session
     * @param string $key
     * 
     * @return bool
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'sessionconfig' => 'App\\Controllers\\Config\\Session',
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
              'sessionmanager' => 'Luminova\\Sessions\\SessionManager',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        22 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'start',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
    * Initialize and start session manager.
    *
    * @return void
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'sessionconfig' => 'App\\Controllers\\Config\\Session',
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
              'sessionmanager' => 'Luminova\\Sessions\\SessionManager',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        23 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'synchronize',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Start an online session with an optional IP address.
     *
     * @param string $ip The IP address.
     * 
     * @return self
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'sessionconfig' => 'App\\Controllers\\Config\\Session',
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
              'sessionmanager' => 'Luminova\\Sessions\\SessionManager',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'ip',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        24 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'goOnline',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @deprecated Use synchronize() method instead.
     *
     * Start an online session with an optional IP address.
     *
     * @param string $ip The IP address.
     * 
     * @return self
     */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'sessionconfig' => 'App\\Controllers\\Config\\Session',
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
              'sessionmanager' => 'Luminova\\Sessions\\SessionManager',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'ip',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        25 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'ipChanged',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Check if user ip address match with session login ip
     *
     * @param string $ip Current session ip address
     * @param string $storage Optional storage location
     * 
     * @return bool
     */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'sessionconfig' => 'App\\Controllers\\Config\\Session',
              'loggerinterface' => 'Psr\\Log\\LoggerInterface',
              'novalogger' => 'Luminova\\Logger\\NovaLogger',
              'sessionmanager' => 'Luminova\\Sessions\\SessionManager',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'ip',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'storage',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Sessions/SessionInterface.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedInterfaceNode::__set_state(array(
       'name' => 'Luminova\\Sessions\\SessionInterface',
       'phpDoc' => NULL,
       'extends' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setStorage',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set storage key
     *
     * @param string $storage The session storage key.
     * @return self
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'storage',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getStorage',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get storage key
     * @return string
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'add',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Add a key-value pair to the session data.
     *
     * @param string $key The key.
     * @param mixed $value The value.
     * @return self
     */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'value',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'set',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Set key and value to session
     * @param string $key key to set
     * @param mixed $value value to set
     * @return self
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'value',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'get',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * get data from session
     * @param string $index key to het
     * @param mixed $default default value 
     * 
     * @return mixed
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'index',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'default',
               'type' => '?mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getFrom',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get data from specified storage instance
     * @param string $index value key to get
     * @param string $storage Storage key name
     * @return mixed
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'index',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'storage',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setTo',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get data from specified storage instance
     * @param string $index value key to get
     * @param mixed $data data to set
     * @param string $storage Storage key name
     * @return self
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'index',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'data',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'storage',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'online',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Check if session user is online from any storage instance
     * @param string $online optional storage instance key
     * @return bool
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'storage',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'clear',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Clear all data from specific session storage by passing the storage key
     * @param string $storage storage key to unset
     * @return self
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'storage',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        9 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'remove',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Remove key from current session storage by passing the key
     * @param string $index key index to unset
     * @return self
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'index',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        10 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getContents',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get data as array from storage 
     * 
     * @param string $storage optional storage key 
     * 
     * @return array
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'storage',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        11 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getResult',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
    *Get all stored session as array
    * @return array
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        12 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'hasKey',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Check if key exists in session
     * @param string $key
     * @return bool
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        13 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'hasStorage',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Check if storage key exists in session
     * 
     * @param string $storage
     * 
     * @return bool
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'storage',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        14 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'toArray',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get data as array from current session storage 
     * @param string $index optional key to get
     * @return array
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'index',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        15 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'toObject',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get data as object from current session storage
     * @param string $index optional key to get
     * @return object
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'object',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'index',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        16 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setConfig',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Set cookie options 
     * 
     * @param string $config SessionConfig class name
     * 
     * @return void
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'config',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Sessions/SessionManager.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Sessions\\SessionManager',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
        0 => 'Luminova\\Sessions\\SessionInterface',
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'storage',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $storage
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'sessionconfig' => 'App\\Controllers\\Config\\Session',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Session constructor.
     *
     * @param string $storage The session storage key.
     * @param array $config Session configuration
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'sessionconfig' => 'App\\Controllers\\Config\\Session',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'storage',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setConfig',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Set cookie options 
     * 
     * @param string $config SessionConfig class name
     * 
     * @return void
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'sessionconfig' => 'App\\Controllers\\Config\\Session',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'config',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setStorage',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set storage key
     *
     * @param string $storage The session storage key.
     * 
     * @return self
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'sessionconfig' => 'App\\Controllers\\Config\\Session',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'storage',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getStorage',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get storage key
     * 
     * @return string
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'sessionconfig' => 'App\\Controllers\\Config\\Session',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'add',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Add a key-value pair to the session data.
     *
     * @param string $key The key.
     * @param mixed $value The value.
     * 
     * @return self
     */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'sessionconfig' => 'App\\Controllers\\Config\\Session',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'value',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'set',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Set key and value to session
     * 
     * @param string $key key to set
     * @param mixed $value value to set
     * 
     * @return self
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'sessionconfig' => 'App\\Controllers\\Config\\Session',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'value',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'get',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * get data from session
     * 
     * @param string $index key to het
     * @param mixed $default default value 
     * 
     * @return mixed
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'sessionconfig' => 'App\\Controllers\\Config\\Session',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'index',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'default',
               'type' => '?mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getFrom',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get data from specified storage instance
     * 
     * @param string $index value key to get
     * @param string $storage Storage key name
     * 
     * @return mixed
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'sessionconfig' => 'App\\Controllers\\Config\\Session',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'index',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'storage',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        9 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setTo',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get data from specified storage instance
     * 
     * @param string $index value key to get
     * @param mixed $data data to set
     * @param string $storage Storage key name
     * 
     * @return self
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'sessionconfig' => 'App\\Controllers\\Config\\Session',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'index',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'data',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'storage',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        10 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'online',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Check if session user is online from any storage instance
     * 
     * @param string $storage Optional storage key 
     * 
     * @return bool
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'sessionconfig' => 'App\\Controllers\\Config\\Session',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'storage',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        11 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'clear',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Clear all data from specific session storage by passing the storage key
     * 
     * @param string $storage storage key to unset
     * 
     * @return self
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'sessionconfig' => 'App\\Controllers\\Config\\Session',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'storage',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        12 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'remove',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Remove key from current session storage by passing the key
     * 
     * @param string $index key index to unset
     * 
     * @return self
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'sessionconfig' => 'App\\Controllers\\Config\\Session',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'index',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        13 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'hasKey',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Check if key exists in session storage
     * 
     * @param string $key
     * 
     * @return bool
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'sessionconfig' => 'App\\Controllers\\Config\\Session',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        14 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'hasStorage',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Check if storage key exists in session
     * 
     * @param string $storage
     * 
     * @return bool
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'sessionconfig' => 'App\\Controllers\\Config\\Session',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'storage',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        15 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getResult',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get all stored session as array
     * 
     * @return array
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'sessionconfig' => 'App\\Controllers\\Config\\Session',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        16 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'toArray',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get data as array from current session storage 
     * 
     * @param string $index optional key to get
     * 
     * @return array
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'sessionconfig' => 'App\\Controllers\\Config\\Session',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'index',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        17 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'toObject',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get data as object from current session storage
     * 
     * @param string $index optional key to get
     * 
     * @return object
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'sessionconfig' => 'App\\Controllers\\Config\\Session',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'object',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'index',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        18 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getContents',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/** 
     * Get data as array from storage 
     * 
     * @param string $storage optional storage key 
     * 
     * @return array
    */',
             'namespace' => 'Luminova\\Sessions',
             'uses' => 
            array (
              'sessioninterface' => 'Luminova\\Sessions\\SessionInterface',
              'sessionconfig' => 'App\\Controllers\\Config\\Session',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'array',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'storage',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Template/Smarty.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Template\\Smarty',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'smarty',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var SmartyTemplate $smarty
    */',
             'namespace' => 'Luminova\\Template',
             'uses' => 
            array (
              'smartytemplate' => 'Smarty',
              'exception' => 'Exception',
              'smartyexception' => 'SmartyException',
              'appexception' => 'Luminova\\Exceptions\\AppException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => '?Smarty',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'instance',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var SmartyTemplate $instance static instance 
    */',
             'namespace' => 'Luminova\\Template',
             'uses' => 
            array (
              'smartytemplate' => 'Smarty',
              'exception' => 'Exception',
              'smartyexception' => 'SmartyException',
              'appexception' => 'Luminova\\Exceptions\\AppException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => NULL,
           'public' => true,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'root',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var string $root framework root directory
    */',
             'namespace' => 'Luminova\\Template',
             'uses' => 
            array (
              'smartytemplate' => 'Smarty',
              'exception' => 'Exception',
              'smartyexception' => 'SmartyException',
              'appexception' => 'Luminova\\Exceptions\\AppException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => true,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Initializes the Smarty
     * 
     * @param string $root framework root directory
     * 
     * @throws AppException
    */',
             'namespace' => 'Luminova\\Template',
             'uses' => 
            array (
              'smartytemplate' => 'Smarty',
              'exception' => 'Exception',
              'smartyexception' => 'SmartyException',
              'appexception' => 'Luminova\\Exceptions\\AppException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'root',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getInstance',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get Smarty singleton instance
     * 
     * @return SmartyTemplate static::$instance static instance 
     * @throws AppException
    */',
             'namespace' => 'Luminova\\Template',
             'uses' => 
            array (
              'smartytemplate' => 'Smarty',
              'exception' => 'Exception',
              'smartyexception' => 'SmartyException',
              'appexception' => 'Luminova\\Exceptions\\AppException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'Smarty',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getSmarty',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get smarty instance 
     * 
     * @return SmartyTemplate new instance 
     * @throws AppException
    */',
             'namespace' => 'Luminova\\Template',
             'uses' => 
            array (
              'smartytemplate' => 'Smarty',
              'exception' => 'Exception',
              'smartyexception' => 'SmartyException',
              'appexception' => 'Luminova\\Exceptions\\AppException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'Smarty',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setDirectories',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Initialize smarty template directories
     * 
     * @param string $templateFolder smarty template directory
     * @param string $compileFolder smarty template complied directory
     * @param string $configFolder smarty template config directory
     * @param string $cacheFolder smarty template cache directory
     * 
     * @return self $this Luminova smarty class instance
    */',
             'namespace' => 'Luminova\\Template',
             'uses' => 
            array (
              'smartytemplate' => 'Smarty',
              'exception' => 'Exception',
              'smartyexception' => 'SmartyException',
              'appexception' => 'Luminova\\Exceptions\\AppException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'templateFolder',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'compileFolder',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'configFolder',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            3 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'cacheFolder',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'assignOptions',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Initialize smarty template directories
     * 
     * @param array $options assign options to smarty
     * @param bool $nocache if true any output of this variable will be not cached
     * 
     * @return void 
    */',
             'namespace' => 'Luminova\\Template',
             'uses' => 
            array (
              'smartytemplate' => 'Smarty',
              'exception' => 'Exception',
              'smartyexception' => 'SmartyException',
              'appexception' => 'Luminova\\Exceptions\\AppException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'options',
               'type' => 'array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'nocache',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'caching',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Initialize smarty template directories
     * 
     * @param bool $cache allow caching template
     * @param int $mode Caching modes
     * 
     * @return void 
    */',
             'namespace' => 'Luminova\\Template',
             'uses' => 
            array (
              'smartytemplate' => 'Smarty',
              'exception' => 'Exception',
              'smartyexception' => 'SmartyException',
              'appexception' => 'Luminova\\Exceptions\\AppException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'cache',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'mode',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        9 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'testInstall',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Test install
     *
     * @param array $errors — array to push results into rather than outputting them
     * 
     * @return void
    */',
             'namespace' => 'Luminova\\Template',
             'uses' => 
            array (
              'smartytemplate' => 'Smarty',
              'exception' => 'Exception',
              'smartyexception' => 'SmartyException',
              'appexception' => 'Luminova\\Exceptions\\AppException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'errors',
               'type' => NULL,
               'byRef' => true,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        10 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'compileCheck',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Check template for modifications?
     *
     * @param int $mode compile check mode
     * 
     * @return void
    */',
             'namespace' => 'Luminova\\Template',
             'uses' => 
            array (
              'smartytemplate' => 'Smarty',
              'exception' => 'Exception',
              'smartyexception' => 'SmartyException',
              'appexception' => 'Luminova\\Exceptions\\AppException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'mode',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        11 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'display',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * displays a Smarty template
     *
     * @param string $template   the resource handle of the template file or template object
     * @param mixed  $cache_id   cache id to be used with this template
     * @param mixed  $compile_id compile id to be used with this template
     * @param object $parent     next higher level of Smarty variables
     *
     * @return void 
     * @throws AppException
     */',
             'namespace' => 'Luminova\\Template',
             'uses' => 
            array (
              'smartytemplate' => 'Smarty',
              'exception' => 'Exception',
              'smartyexception' => 'SmartyException',
              'appexception' => 'Luminova\\Exceptions\\AppException',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'template',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'cache_id',
               'type' => '?mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'compile_id',
               'type' => '?mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            3 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'parent',
               'type' => '?object',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Template/Template.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Template\\Template',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
        0 => 'Luminova\\Template\\TemplateTrait',
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'dir',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Template/TemplateTrait.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedTraitNode::__set_state(array(
       'traitName' => 'Luminova\\Template\\TemplateTrait',
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Task.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Time\\Task',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'create',
           'phpDoc' => NULL,
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'timeDate',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'timezone',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'isActive',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Function responsible for corn-job deal opening.
     *
     * @param string $startDate 2023-09-25
     * @param string $startTime 17:00PM
     * @param string $timezone
     *
     * @return bool
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'time' => 'Luminova\\Time\\Time',
              'datetimezone' => 'DateTimeZone',
              'dateinterval' => 'DateInterval',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'startDate',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'startTime',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'timezone',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'isOpen',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Check between opening and closing time has passed
     * 
     * @param string $open 2023-09-25 08:00AM
     * @param string $close 2023-09-25 17:00PM
     * @param string $timezone
     *
     * @return bool
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'time' => 'Luminova\\Time\\Time',
              'datetimezone' => 'DateTimeZone',
              'dateinterval' => 'DateInterval',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'open',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'close',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'timezone',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'expired',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Function to check if a given expiry date and time has passed.
     *
     * @param string $expiryDateTime
     * @param string $timezone
     *
     * @return bool
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'time' => 'Luminova\\Time\\Time',
              'datetimezone' => 'DateTimeZone',
              'dateinterval' => 'DateInterval',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'expiryDateTime',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'timezone',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'campaignExpired',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Function to check if a campaign has expired.
     *
     * @param string $open
     * @param string $timezone
     *
     * @return bool
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'time' => 'Luminova\\Time\\Time',
              'datetimezone' => 'DateTimeZone',
              'dateinterval' => 'DateInterval',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'open',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'timezone',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'hasExpired',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Function to check if an event has expired.
     *
     * @param string $start
     * @param string $timezone
     * @param bool $format
     *
     * @return bool
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'time' => 'Luminova\\Time\\Time',
              'datetimezone' => 'DateTimeZone',
              'dateinterval' => 'DateInterval',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'start',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'timezone',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'format',
               'type' => 'bool',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'hasPassed',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Check if a certain amount of minutes has passed since the given timestamp.
     *
     * @param int|string $timestamp Either a Unix timestamp or a string representing a date/time.
     * @param int $minutes The number of minutes to check against.
     * @param null|DateTimeZone|string $timezone Optional timezone. If null, the default timezone is used.
     *
     * @return bool True if the specified minutes have passed, false otherwise.
    */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'time' => 'Luminova\\Time\\Time',
              'datetimezone' => 'DateTimeZone',
              'dateinterval' => 'DateInterval',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'timestamp',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'minutes',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'timezone',
               'type' => 'null|DateTimeZone|string|null',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'format',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Function to format date and time.
     *
     * @param string $date
     * @param string $time
     *
     * @return string|false
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'time' => 'Luminova\\Time\\Time',
              'datetimezone' => 'DateTimeZone',
              'dateinterval' => 'DateInterval',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'date',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'time',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'toDateTime',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Function to convert a string to a formatted date and time.
     *
     * @param string $string
     *
     * @return string
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'time' => 'Luminova\\Time\\Time',
              'datetimezone' => 'DateTimeZone',
              'dateinterval' => 'DateInterval',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'string',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Time/Time.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Time\\Time',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => 'DateTimeImmutable',
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'timezone',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var DateTimeZone
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => '?DateTimeZone',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'locale',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * @var ?string
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => '?string',
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'toStringFormat',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Format to use when displaying datetime through __toString
     *
     * @var string
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => NULL,
           'public' => false,
           'private' => false,
           'static' => false,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'defaultFormat',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Default Format to use w
     *
     * @var string $defaultFormat
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => NULL,
           'public' => false,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedPropertiesNode::__set_state(array(
           'names' => 
          array (
            0 => 'relativePattern',
          ),
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     *
     * @var string $relativePattern relative time keywords pattern
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'type' => 'string',
           'public' => false,
           'private' => false,
           'static' => true,
           'readonly' => false,
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Time constructor.
     *
     * @param ?string $time
     * @param DateTimeZone|string|null $timezone
     * @param ?string $local 
     *
     * @throws Exception
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'time',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'timezone',
               'type' => 'DateTimeZone|string|null|null',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'locale',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'setTimezone',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Set the TimeZone associated with the DateTime
     * And Returns a new instance with the revised timezone.
     *
     * @param DateTimeZone|string $timezone
     *
     * @return self
     * @throws Exception
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'timezone',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedAttributeNode::__set_state(array(
               'name' => 'ReturnTypeWillChange',
               'args' => 
              array (
              ),
            )),
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'now',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns current Time instance with the timezone set.
     *
     * @param DateTimeZone|string|null $timezone
     * @param ?string $local 
     *
     * @return self
     *
     * @throws Exception
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'timezone',
               'type' => 'DateTimeZone|string|null|null',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'locale',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'parse',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns a new Time instance while parsing a datetime string.
     *
     * Example:
     *  $time = Time::parse(\'first day of December 2008\');
     *
     * @param string $datetime 
     * @param DateTimeZone|string|null $timezone
     * @param ?string $local 
     *
     * @return self
     *
     * @throws Exception
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'datetime',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'timezone',
               'type' => 'DateTimeZone|string|null|null',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'locale',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        9 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'today',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Return a new time with the time set to midnight.
     *
     * @param DateTimeZone|string|null $timezone
     * @param ?string $local 
     *
     * @return self
     *
     * @throws Exception
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'timezone',
               'type' => 'DateTimeZone|string|null|null',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'locale',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        10 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'yesterday',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns an instance set to midnight yesterday morning.
     *
     * @param DateTimeZone|string|null $timezone
     * @param ?string $local 
     *
     * @return self
     *
     * @throws Exception
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'timezone',
               'type' => 'DateTimeZone|string|null|null',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'locale',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        11 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getYear',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns the localized Year
     *
     * @throws Exception
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        12 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getMonth',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns the localized Month
     *
     * @throws Exception
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        13 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getDay',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Return the localized day of the month.
     *
     * @throws Exception
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        14 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getHour',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Return the localized hour (in 24-hour format).
     *
     * @throws Exception
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        15 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getMinute',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Return the localized minutes in the hour.
     *
     * @throws Exception
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        16 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getSecond',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Return the localized seconds
     *
     * @throws Exception
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        17 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getDayOfYear',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Return the index of the day of the year
     *
     * @throws Exception
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        18 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getWeekOfMonth',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Return the index of the week in the month
     *
     * @throws Exception
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        19 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getWeekOfYear',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Return the index of the week in the year
     *
     * @throws Exception
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        20 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getDayOfWeek',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Return the index of the day of the week
     *
     * @throws Exception
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        21 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getQuarter',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns the number of the current quarter for the year.
     *
     * @throws Exception
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        22 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'isDaylightSaving',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Are we in daylight savings time currently?
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        23 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'isSameLocal',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns boolean whether the passed timezone is the same as
     * the local timezone.
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        24 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getUtc',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns boolean whether object is in UTC.
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        25 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getTimezoneName',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns the name of the current timezone.
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'string',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        26 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getUTCObject',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns a Time instance with the timezone converted to UTC.
     *
     * @param DateTimeInterface|self|string $time
     *
     * @return DateTime|static
     *
     * @throws Exception
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'time',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'timezone',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        27 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'toLocalizedString',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns the localized value of this instance in $format.
     *
     * @return false|string
     *
     * @throws Exception
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'format',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        28 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'toDateTime',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Converts the current instance to a mutable DateTime object.
     *
     * @return DateTime
     *
     * @throws Exception
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        29 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'fromInstance',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Takes an instance of DateTimeInterface and returns an instance of Time with it\'s same values.
     *
     * @return self
     *
     * @throws Exception
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'dateTime',
               'type' => 'DateTimeInterface',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'locale',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        30 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'fromTimestamp',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns a new instance with the datetime set based on the provided UNIX timestamp.
     *
     * @param DateTimeZone|string|null $timezone
     *
     * @return self
     *
     * @throws Exception
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'timestamp',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'timezone',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'locale',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        31 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'fromDate',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns a new instance based on the year, month and day. If any of those three
     * are left empty, will default to the current value.
     *
     * @param DateTimeZone|string|null $timezone
     *
     * @return self
     *
     * @throws Exception
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'year',
               'type' => '?int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'month',
               'type' => '?int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'day',
               'type' => '?int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            3 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'timezone',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            4 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'locale',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        32 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'fromTime',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns a new instance with the date set to today, and the time set to the values passed in.
     *
     * @param DateTimeZone|string|null $timezone
     *
     * @return self
     *
     * @throws Exception
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'hour',
               'type' => '?int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'minutes',
               'type' => '?int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'seconds',
               'type' => '?int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            3 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'timezone',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            4 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'locale',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        33 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'createFrom',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns a new instance with the date time values individually set.
     *
     * @param DateTimeZone|string|null $timezone
     *
     * @return self
     *
     * @throws Exception
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'year',
               'type' => '?int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'month',
               'type' => '?int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'day',
               'type' => '?int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            3 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'hour',
               'type' => '?int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            4 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'minutes',
               'type' => '?int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            5 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'seconds',
               'type' => '?int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            6 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'timezone',
               'type' => NULL,
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            7 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'locale',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        34 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'tomorrow',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns an instance set to midnight tomorrow morning.
     *
     * @param DateTimeZone|string|null $timezone
     * @param ?string $local 
     *
     * @return self
     *
     * @throws Exception
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'timezone',
               'type' => 'DateTimeZone|string|null|null',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'locale',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        35 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'fromFormat',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Provides a replacement for DateTime\'s own createFromFormat function, that provides
     * more flexible timeZone handling
     *
     * @param string                   $format
     * @param string                   $datetime
     * @param DateTimeZone|string|null $timezone
     *
     * @return self
     *
     * @throws Exception
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'self',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'format',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'time',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'timezone',
               'type' => 'DateTimeZone|string|null|null',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedAttributeNode::__set_state(array(
               'name' => 'ReturnTypeWillChange',
               'args' => 
              array (
              ),
            )),
          ),
        )),
        36 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'calendar',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Returns an array representation of the given calendar month.
     * The array values are timestamps which allow you to easily format
     * 
     * @param ?string $month date(\'n)
     * @param ?string $year date(\'y\')
     * 
     * @return array $calendar
    */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'array',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'month',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'year',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'timezone',
               'type' => 'DateTimeZone|string|null|null',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            3 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'locale',
               'type' => '?string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        37 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'days',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
	 * Get an array of dates for each day in a specific month.
	 *
	 * @param string|int|null $month The month (1-12).
	 * @param string|int|null $year The year.
	 * @param string $format The format for the returned dates (default is "d-M-Y").
	 * 
	 * @return array An array of dates within the specified month.
	 */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'array',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'month',
               'type' => 'string|int|null|null',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            1 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'year',
               'type' => 'string|int|null|null',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
            2 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'format',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        38 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'ago',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
	 * Converts a PHP timestamp to a social media-style time format (e.g., "2 hours ago").
	 *
	 * @param string|int $time The timestamp to convert.
     * 
	 * @return string Time in a human-readable format.
	 */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'time',
               'type' => 'string|int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        39 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'daySuffix',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the suffix for a given day (e.g., 1st, 2nd, 3rd, 4th).
     *
     * @param string|int $day The day for which to determine the suffix.
     * 
     * @return string The day with its appropriate suffix.
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'string',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'day',
               'type' => 'string|int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        40 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'isRelative',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Used to check time string to determine if it has relative time keywords
     * 
     * @param string $time 
     * 
     * @return bool
     */',
             'namespace' => 'Luminova\\Time',
             'uses' => 
            array (
              'datetimeimmutable' => 'DateTimeImmutable',
              'datetimezone' => 'DateTimeZone',
              'locale' => 'Locale',
              'datetime' => 'DateTime',
              'intldateformatter' => 'IntlDateFormatter',
              'returntypewillchange' => 'ReturnTypeWillChange',
              'datetimeinterface' => 'DateTimeInterface',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => true,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'time',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
  '/Applications/XAMPP/xamppfiles/htdocs/luminova.com/system/Utils/Queue.php' => 
  array (
    0 => 
    \PHPStan\Dependency\ExportedNode\ExportedClassNode::__set_state(array(
       'name' => 'Luminova\\Utils\\Queue',
       'phpDoc' => NULL,
       'abstract' => false,
       'final' => false,
       'extends' => NULL,
       'implements' => 
      array (
      ),
       'usedTraits' => 
      array (
      ),
       'traitUseAdaptations' => 
      array (
      ),
       'statements' => 
      array (
        0 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__construct',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Constructor to initialize the queue with jobs if provided.
     * 
     * @param array|null $jobs Array of jobs to initialize the queue.
     */',
             'namespace' => 'Luminova\\Utils',
             'uses' => 
            array (
              'closure' => 'Closure',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => NULL,
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'jobs',
               'type' => '?array',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        1 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__get',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Magic method to get a property.
     *
     * @param string $key The property key.
     *
     * @return mixed|null The property value.
     */',
             'namespace' => 'Luminova\\Utils',
             'uses' => 
            array (
              'closure' => 'Closure',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'mixed',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        2 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => '__isset',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Magic method to check if a property is set.
     *
     * @param string $key The property key.
     *
     * @return bool True if the property is set, otherwise false.
     */',
             'namespace' => 'Luminova\\Utils',
             'uses' => 
            array (
              'closure' => 'Closure',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'key',
               'type' => 'string',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        3 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'push',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Push a closure or item to the queue.
     *
     * @param Closure|string|callable $item The item to enqueue.
     *
     * @return void
     */',
             'namespace' => 'Luminova\\Utils',
             'uses' => 
            array (
              'closure' => 'Closure',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'item',
               'type' => 'Closure|string|callable',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        4 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'run',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Run the queue by executing all jobs.
     * And execute a callback function
     *
     * @param callable|null $callback Optional Callback function to execute after running the queue.
     * 
     * @return void
     */',
             'namespace' => 'Luminova\\Utils',
             'uses' => 
            array (
              'closure' => 'Closure',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'callback',
               'type' => '?callable',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => true,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        5 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'isEmpty',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Check if the queue is empty.
     *
     * @return bool True if the queue is empty, otherwise false.
     */',
             'namespace' => 'Luminova\\Utils',
             'uses' => 
            array (
              'closure' => 'Closure',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        6 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'hasQueue',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Check if the queue has registered callable jobs.
     *
     * @return bool True if the queue has registered callable jobs.
     */',
             'namespace' => 'Luminova\\Utils',
             'uses' => 
            array (
              'closure' => 'Closure',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'bool',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        7 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'size',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the size of the queue.
     *
     * @return int The size of the queue.
     */',
             'namespace' => 'Luminova\\Utils',
             'uses' => 
            array (
              'closure' => 'Closure',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'int',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        8 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'delete',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Delete the queue.
     *
     * @return void
     */',
             'namespace' => 'Luminova\\Utils',
             'uses' => 
            array (
              'closure' => 'Closure',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        9 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'remove',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Remove an job from the queue.
     *
     * @param mixed $job The job name to remove.
     *
     * @return void
     */',
             'namespace' => 'Luminova\\Utils',
             'uses' => 
            array (
              'closure' => 'Closure',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'job',
               'type' => 'mixed',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        10 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'free',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Free resources
     *
     * @return void
     */',
             'namespace' => 'Luminova\\Utils',
             'uses' => 
            array (
              'closure' => 'Closure',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'void',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        11 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'getInstance',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the current job from queue and return a new instance.
     *
     * @param int $index Current job index.
     *
     * @return Queue A new Queue instance.
     */',
             'namespace' => 'Luminova\\Utils',
             'uses' => 
            array (
              'closure' => 'Closure',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'Luminova\\Utils\\Queue',
           'parameters' => 
          array (
            0 => 
            \PHPStan\Dependency\ExportedNode\ExportedParameterNode::__set_state(array(
               'name' => 'index',
               'type' => 'int',
               'byRef' => false,
               'variadic' => false,
               'hasDefault' => false,
               'attributes' => 
              array (
              ),
            )),
          ),
           'attributes' => 
          array (
          ),
        )),
        12 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'current',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the current job from queue and return a new instance.
     * 
     * @return Queue A new Queue instance.
     */',
             'namespace' => 'Luminova\\Utils',
             'uses' => 
            array (
              'closure' => 'Closure',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'Luminova\\Utils\\Queue',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        13 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'next',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the next job from queue and return a new instance.
     * 
     * @return Queue A new Queue instance.
     */',
             'namespace' => 'Luminova\\Utils',
             'uses' => 
            array (
              'closure' => 'Closure',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'Luminova\\Utils\\Queue',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
        14 => 
        \PHPStan\Dependency\ExportedNode\ExportedMethodNode::__set_state(array(
           'name' => 'last',
           'phpDoc' => 
          \PHPStan\Dependency\ExportedNode\ExportedPhpDocNode::__set_state(array(
             'phpDocString' => '/**
     * Get the last job from queue and return a new instance.
     * 
     * @return Queue A new Queue instance.
     */',
             'namespace' => 'Luminova\\Utils',
             'uses' => 
            array (
              'closure' => 'Closure',
            ),
             'constUses' => 
            array (
            ),
          )),
           'byRef' => false,
           'public' => true,
           'private' => false,
           'abstract' => false,
           'final' => false,
           'static' => false,
           'returnType' => 'Luminova\\Utils\\Queue',
           'parameters' => 
          array (
          ),
           'attributes' => 
          array (
          ),
        )),
      ),
       'attributes' => 
      array (
      ),
    )),
  ),
); },
];
